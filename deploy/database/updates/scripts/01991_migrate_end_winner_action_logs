#!/usr/bin/python
#####
# Utility to migrate end_winner action log entries to new format

import json
import re
import MySQLdb

END_WINNER_OLD_STRING_RE = re.compile('^won round (\d+) \((-?[0-9\.]+) vs (-?[0-9\.]+)\)$')

def get_last_insert_id(crs):
  crs.execute('SELECT LAST_INSERT_ID()')
  return crs.fetchone()[0]

def migrate_to_type_log_end_winner(row, crs):
  row_id = row[0]
  try:
    msgdata = json.loads(row[1])
    round_number = msgdata['roundNumber']
    assert(len(msgdata['roundScoreArray']) == 2)
    winning_round_score = max([float(x) for x in msgdata['roundScoreArray']])
    losing_round_score = min([float(x) for x in msgdata['roundScoreArray']])
    round_score = msgdata['roundScoreArray'][0]
    surrendered = bool('resultForced' in msgdata and msgdata['resultForced'])
  except ValueError:
    mobj = END_WINNER_OLD_STRING_RE.match(row[1])
    if not mobj:
      raise ValueError, "Could not match string: %s" % row[1]
    round_number = mobj.group(1)
    winning_round_score = max(float(mobj.group(2)), float(mobj.group(3)))
    losing_round_score = min(float(mobj.group(2)), float(mobj.group(3)))
    surrendered = False
    
  insert_sql = 'INSERT INTO game_action_log_type_end_winner ' + \
    '(round_number, winning_round_score, losing_round_score, surrendered) VALUES ' + \
    '(%s, %s, %s, %s);' % (round_number, winning_round_score, losing_round_score, surrendered)
  result = crs.execute(insert_sql)
  if not result == 1:
    raise ValueError, "Got unexpected return %s from %s" % (result, insert_sql)
  type_log_id = get_last_insert_id(crs)
  update_sql = 'UPDATE game_action_log SET type_log_id=%s,message=NULL WHERE id=%d' % (type_log_id, row_id)
  result == crs.execute(update_sql)
  if not result == 1:
    raise ValueError, "Got unexpected return %s from %s" % (result, update_sql)
  print "Moved %s to game_action_log_type_end_winner id %s" % (row[1], type_log_id)

conn = MySQLdb.connect(user='root', db='buttonmen')
crs = conn.cursor()
results = crs.execute(
  'SELECT id,message FROM game_action_log WHERE action_type="end_winner" ' + \
  'AND type_log_id IS NULL')
if results > 0:
  for row in crs.fetchall():
    migrate_to_type_log_end_winner(row, crs)
conn.commit()
