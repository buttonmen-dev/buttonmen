// PhantomJS script to run QUnit tests and print detailed errors,
// expecting the webserver to be provided by JSCover
//
// Code lightly adapted from:
// * https://github.com/tntim96/JSCover/blob/master/src/test/javascript/lib/PhantomJS/run-jscover-qunit.js
// * https://github.com/jquery/qunit/blob/master/addons/phantomjs/runner.js
var system = require('system');

/**
 * Wait until the test condition is true or a timeout occurs. Useful for waiting
 * on a server response or for a ui change (fadeIn, etc.) to occur.
 *
 * @param testFx javascript condition that evaluates to a boolean,
 * it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
 * as a callback function.
 * @param onReady what to do when testFx condition is fulfilled,
 * it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
 * as a callback function.
 * @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.
 */
function waitFor(testFx, onReady, timeOutMillis) {
    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 180001, //< Default Max Timout is 180s
        start = new Date().getTime(),
        condition = false,
        interval = setInterval(function() {
            if ( (new Date().getTime() - start < maxtimeOutMillis) && !condition ) {
                // If not time-out yet and condition not yet fulfilled
                condition = (typeof(testFx) === "string" ? eval(testFx) : testFx()); //< defensive code
            } else {
                if(!condition) {
                    // If condition still not fulfilled (timeout but condition is 'false')
                    console.log("'waitFor()' timeout");
                    phantom.exit(1);
                } else {
                    // Condition fulfilled (timeout and/or condition is 'true')
                    console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
                    typeof(onReady) === "string" ? eval(onReady) : onReady(); //< Do what it's supposed to do once the condition is fulfilled
                    clearInterval(interval); //< Stop this interval
                }
            }
        }, 100); //< repeat check every 250ms
};


if (system.args.length !== 2) {
    console.log('Usage: run-qunit.js URL');
    phantom.exit(1);
}

var page = require('webpage').create();

// Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
page.onConsoleMessage = function(msg) {
    console.log(msg);
};

// Configure logging function, borrowed from runner.js
page.onInitialized = function() {
    page.evaluate(addLogging);
};

addLogging = function() {
    window.document.addEventListener('DOMContentLoaded', function() {
        var currentTestAssertions = [];

        QUnit.log(function(details) {
            var response;

            // Ignore passing assertions
            if (details.result) {
                return;
            }

            response = details.message || '';

            if (typeof details.expected !== 'undefined') {
                if (response) {
                    response += ', ';
                }

                response += 'expected: ' + details.expected + ', but was: ' + details.actual;
            }

            if (details.source) {
                response += "\n" + details.source;
            }

            currentTestAssertions.push('Failed assertion: ' + response);
        });

        QUnit.testStart(function(details) {
            console.log("Running test: " + details.name);
        });

        QUnit.testDone(function(result) {
            var i,
            len,
            name = result.module + ': ' + result.name;

            if (result.failed) {
                console.log('Test failed: ' + name);

                for (i = 0, len = currentTestAssertions.length; i < len; i++) {
                    console.log('    ' + currentTestAssertions[i]);
                }
            }

            currentTestAssertions.length = 0;
        });
    });
};

page.settings.resourceTimeout = 3000;
page.open(system.args[1], function(status){
    if (status !== "success") {
        console.log("Unable to access network");
        phantom.exit(1);
    } else {
        waitFor(function(){
            return page.evaluate(function(){
                var el = document.getElementById('qunit-testresult');
                if (el && el.innerText.match('completed')) {
                    return true;
                }
                return false;
            });
        }, function(){
            var failedNum = page.evaluate(function(){
                var el = document.getElementById('qunit-testresult');
                console.log(el.innerText);
                try {
                    return el.getElementsByClassName('failed')[0].innerHTML;
                } catch (e) { }
                return 10000;
            });
            phantom.exit((parseInt(failedNum, 10) > 0) ? 1 : 0);
        });
    }
});
