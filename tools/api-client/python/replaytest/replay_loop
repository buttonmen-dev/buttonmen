#!/opt/conda/envs/python27/bin/python
##### replay_loop
# This loop is designed for use on a VM which is recording games
# for use in replay-testing of new code, or on a VM which is
# replay-testing new code against recorded games.  It does:
# A. Steps involving novel games generated using the new code:
#   1. Play 100 new games using random_ai, generating replay logs in
#      an internal log format, and caching it in pickle files
#   2. Translate the 100 games into responderTest's PHP replay format
#   3. If local replay is requested, translate the games into
#      responderTest's PHP replay format again, and use responderTest
#      to test them.
#   4. If games are being recorded for future use, tar those generated
#      files and cache them in an expected archive location
# B. Steps involving replaying games recorded by a previous code version:
#   1. Look for any new recorded files which may have showed up in the
#      archive location, translate them into responderTest's PHP replay
#      format, and use responderTest to test them.
# These steps repeat indefinitely.  If any "novel game" steps fail, the loop
# will blow up and stop running.  Failures in replay are saved in
# log files for later inspection, but the loop continues.

# What problems will cause each of these test types to fail?
# * If normal gameplay with the new code causes internal errors, A1 will fail
# * If loadGameData in the new code returns game state that the
#   replay rig doesn't understand or doesn't think is sane, A1 or A2 will fail
# * If responderTest doesn't have functionality to test the new
#   code correctly, A3 will fail
# * If the new code causes game behavior to differ from the behavior
#   of old code, B1 will fail

import os
import re
import subprocess
import sys
import time
import datetime
import argparse

SITETAG = open('%s/sitetag' % os.getenv('HOME')).read().strip()
COMMITID = None
LOGF = None

USERNAME = 'root'

PARENTDIR = '/srv/bmgames/chaos-test'
GAMESDIR = '%s/archive' % (PARENTDIR)
STATEDIR = '%s/replay_state/%s' % (PARENTDIR, SITETAG)
STATEFILE = '%s/filesread' % (STATEDIR)
LOGFILE = '%s/replay_loop.log' % (STATEDIR)
SRCDIR = '/buttonmen/src'
TESTDIR = '/buttonmen/test'
TESTFILE = '%s/src/api/responder99Test.php' % TESTDIR

SLEEPSECS = 60

# e.g. 390b58027049ef07562b17ff9503471d0f2aae38.games.20160205.163427.tar.bz2
GAMEFILE_RE = re.compile('^([0-9a-f]{40})\.games\.([0-9]{8}\.[0-9]{6})\.tar\.bz2$')

ORIGDIR = os.getcwd()
HOMEBMDIR = "%s/src/buttonmen" % ORIGDIR

def parse_args():
  parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description="""Test game logic by brute force, by playing games and taking random actions.

Once started, this script runs indefinitely in a loop, cycling
between the actions it has been configured to take:
* play novel games: play a batch of NUM_GAMES novel games, randomly
  selecting buttons and moves, using random_ai to play the games.
  Save output from the games in an internal "game log" format.
* replay recorded games: unpack a tarball of previously-recorded
  games, translate them from the internal game log format to the
  PHP syntax used by responderTestFramework, and test that file using phpunit.
""")

  parser.add_argument(
    '--archive-games', '-a', action='store_true',
    help="archive novel games for replay by other sites")
  parser.add_argument(
    '--local-replay', '-l', action='store_true',
    help="replay each batch of novel games locally after recording it")
  parser.add_argument(
    '--skip-init', '-s', action='store_true',
    help="skip initial batch of novel games, so the first action is replaying a batch")
  parser.add_argument(
    '--num-games', '-n', type=int, default=100,
    help="number of novel games to play in each batch (default 100)")
  parser.add_argument(
    '--player-button-names', '-pb', type=str, default=None,
    help="comma-separated list of buttons for player one to use in novel games (e.g. 'Avis,Timea')")
  parser.add_argument(
    '--opponent-button-names', '-ob', type=str, default=None,
    help="comma-separated list of buttons for player two to use in novel games (e.g. 'Avis,Timea')")

  return parser.parse_args()

ARGS = parse_args()

def read_commit_id():
  prevcwd = os.getcwd()
  os.chdir('/buttonmen/.git')
  commitid = subprocess.check_output(['git', 'show', '--format=%H']).strip()
  os.chdir(prevcwd)
  return commitid

def setup():
  global COMMITID
  global LOGF
  if not os.path.isdir(STATEDIR):
    os.mkdir(STATEDIR)
  os.chdir(SRCDIR)
  if ARGS.archive_games:
    COMMITID = read_commit_id()
  LOGF = open(LOGFILE, 'a')

def load_state():
  if os.path.isfile(STATEFILE):
    f = open(STATEFILE, 'r')
    state = [l.strip() for l in f.readlines()]
    f.close()
  else:
    state = []
  return state

def save_state(state):
  f = open(STATEFILE, 'w')
  for l in state:
    f.write('%s\n' % l)
  f.close()

def restart_mysqld():
  os.system('sudo killall -u mysql')
  time.sleep(2)
  os.system('sudo /etc/init.d/mysql start')
  time.sleep(5)

def restart_apache():
  os.system('sudo /etc/init.d/apache2 stop')
  time.sleep(2)
  os.system('sudo /etc/init.d/apache2 start')
  time.sleep(5)

def find_next_file(state):
  newest_file = None
  newest_timestamp = None
  dirfiles = os.listdir(GAMESDIR)
  for dirfile in dirfiles:
    if dirfile in state: continue
    mobj = GAMEFILE_RE.match(dirfile)
    if mobj:
      if not newest_timestamp or mobj.group(2) > newest_timestamp:
        newest_timestamp = mobj.group(2)
        newest_file = dirfile
  return newest_file

def generate_responder_testfile(gen_command, output_file):
  if USERNAME == 'vagrant':
    write_to_bm_prefix = 'sudo -u %s' % USERNAME
  else:
    write_to_bm_prefix = ''

  commands = [
    'sudo -u %s touch %s' % (USERNAME, output_file),
    'sudo chown chaos %s' % output_file,
    'echo "<?php" | %s tee -a %s' % (write_to_bm_prefix, output_file),
    'echo "require_once \'responderTestFramework.php\';" | %s tee -a %s' % (write_to_bm_prefix, output_file),
    'echo "class responder99Test extends responderTestFramework {" | %s tee -a %s' % (write_to_bm_prefix, output_file),
    '%s ./output | %s tee -a %s > /dev/null' % (gen_command, write_to_bm_prefix, output_file),
    'echo "}" | %s tee -a %s > /dev/null' % (write_to_bm_prefix, output_file),
  ]
  if os.path.isfile(output_file):
    commands.insert(0, 'sudo -u %s rm -f %s' % (USERNAME, output_file))
  for command in commands:
    retval = os.system(command)
    if retval != 0:
      print "command failed: %s" % command
      sys.exit(1)

def test_file(filename):
  ## prep test file for replay
  os.chdir(HOMEBMDIR)
  tar_command = 'tar xf %s/%s' % (GAMESDIR, filename)
  for retry in range(3):
    retval = os.system(tar_command)
    if retval == 0:
      break
    print "tar failed - retrying: %s" % tar_command
    time.sleep(SLEEPSECS)
  else:
    print "tar failed too many times - giving up"
    sys.exit(1)

  generate_responder_testfile('./update_replay_games', TESTFILE)
  os.system('/bin/rm ./output/*')
  execute_responder_test(filename)

def execute_responder_test(testname):
  # actually run the test, capturing output

  restart_mysqld()

  prevcwd = os.getcwd()
  os.chdir(SRCDIR)

  logfile = '%s/%s.output' % (STATEDIR, testname)
  cmdargs = 'sudo -u %s sh -c "phpunit --bootstrap /usr/local/etc/buttonmen_phpunit.php --group fulltest_deps /buttonmen/test/src/api/ 2>&1" | tee %s' % (USERNAME, logfile)
  print "About to execute: %s" % cmdargs
  os.system(cmdargs)

  os.chdir(prevcwd)
  return

def phpunit_log_shows_success(testname):
  logfile = '%s/%s.output' % (STATEDIR, testname)
  contents = open(logfile).read()
  num_tests = ARGS.num_games + 1
  ok_string = 'OK (%d tests' % (num_tests)
  return ok_string in contents

def log_database_games(logname):
  logpath = '%s/%s' % (STATEDIR, logname)
  os.system('echo "select * from game" | sudo mysql_root_cli > %s' % logpath)
  os.system('echo "select * from game_player_view" | sudo mysql_root_cli >> %s' % logpath)

def player_one_button_args():
  if ARGS.player_button_names:
    return 'name=%s' % ARGS.player_button_names
  return ''

def player_two_button_args():
  if ARGS.opponent_button_names:
    return 'name=%s' % ARGS.opponent_button_names
  return ''

def test_new_games():
  # If we're running in archive mode, this will generate new games
  # and archive them for replay testing on this and other sites.
  # Otherwise, it will simply run the tests and discard the results.
  #
  # Regardless, this is intended to blow up if any exceptions are
  # received.

  # Restart MySQL and apache, then reset primary and test databases
  restart_mysqld()
  restart_apache()
  os.system('echo "drop database buttonmen" | sudo mysql')
  os.system('sudo /usr/local/bin/create_buttonmen_databases')
  os.system('cat ~/example_players.sql | sudo mysql')

  os.chdir(HOMEBMDIR)
  cmdargs = './test_log_games %d "%s" "%s"' % (
    ARGS.num_games, player_one_button_args(), player_two_button_args())
  retval = os.system(cmdargs)
  if retval != 0:
    sys.exit(1)

  target_file = ARGS.archive_games and './output/allgames.php' or '/dev/null'
  retval = os.system('./prep_replay_games ./output > %s' % target_file)
  if retval != 0:
    sys.exit(1)

  timestamp = datetime.datetime.now().strftime('%Y%m%d.%H%M%S')
  log_database_games('new_games.%s' % timestamp)

  if ARGS.local_replay:
    generate_responder_testfile('./prep_replay_games', TESTFILE)
    testname = 'local.%s' % timestamp
    execute_responder_test(testname)
    if not phpunit_log_shows_success(testname):
      sys.exit(1)

  if ARGS.archive_games:
    targetpath = '%s/%s.games.%s.tar' % (GAMESDIR, COMMITID, timestamp)
    os.system('tar cf %s ./output' % (targetpath))
    os.system('bzip2 %s' % (targetpath))
  os.system('rm ./output/*')
  os.chdir(SRCDIR)

def log(message):
  LOGF.write('%s: %s\n' % (
    datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), message))
  LOGF.flush()

########################################################################
setup()
log("Starting replay_loop")
state = load_state()
skip_init_new_games = ARGS.skip_init
while True:
  if skip_init_new_games:
    print "Skipping new games the first time"
    skip_init_new_games = False
  else:
    log("Testing new games")
    test_new_games()
  nextfile = find_next_file(state)
  if nextfile:
    print "Testing %s..." % nextfile
    log("Testing replay of %s" % nextfile)
    test_file(nextfile)
    state.append(nextfile)
    save_state(state)
  else:
    print "No new files; sleeping..."
    log("No files to replay; sleeping...")
    time.sleep(SLEEPSECS)
