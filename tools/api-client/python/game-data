#!/usr/bin/env python3

##### game-data
#
# Print out data about a game.

### Imports

# Import regular stuff.

import configparser
import argparse
import json
import os
import sys

# Import yaml if we can, and set a variable to track whether we did or not.

try:
  import yaml
  yaml_available = True
except ImportError:
  yaml_available = False

# Import Button Men utilities.

sys.path.append('lib')
import bmutils

### Classes

# A class to not use anchors and aliases when dumping YAML.

if yaml_available:
  class noalias_dumper(yaml.SafeDumper):
    def ignore_aliases(self, _data):
      return True

### Functions

## parse_arguments

def parse_arguments():

  parser = argparse.ArgumentParser(description="Print out data about a game.")

  parser.add_argument('gamenumber', help="game number")

  if yaml_available:
    parser.add_argument('--format',
                        choices = ['json', 'yaml'], default = 'yaml',
                        help = "output data format (default: yaml)")
  else:
    parser.add_argument('--format',
                        choices = ['json'], default = 'json',
                        help = "output data format (default: json)")

  # Add general optional arguments.

  parser.add_argument('--site',
                      default = 'www',
                      help = "site to check ('www' by default)")

  parser.add_argument('--config', '-c',
                      default='~/.bmrc',
                      help="config file containing site parameters")

  # Return the parser.

  return parser.parse_args()

### Main body

args = parse_arguments()

# Connect to the site.

try:
  bmconn = bmutils.BMClientParser(os.path.expanduser(args.config), args.site)
except configparser.NoSectionError as e:
  print("ERROR: {0} doesn't seem to have a '{1}' section".format(args.config, args.site))
  print("(Exception: {0}: {1})".format(e.__module__, e.message))
  sys.exit(1)

if not bmconn.verify_login():
  print("ERROR: Could not log in to {0}".format(args.site))
  sys.exit(1)

# Fetch the game data.

game = bmconn.wrap_load_game_data(args.gamenumber)

# Print the game data.

if not yaml_available or args.format == 'json':
  print(json.dumps(game, indent=1, sort_keys=True))
else:
  print(yaml.dump(game, Dumper=noalias_dumper))
