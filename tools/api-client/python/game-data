#!/usr/bin/env python

# GAME-DATA
#
# Print out data about a game.

# IMPORTS


import argparse
import configparser
import json
import os
import sys

import yaml

from lib import bmutils


# CLASSES

# A class to not use anchors and aliases when dumping YAML.

class noalias_dumper(yaml.SafeDumper):
  def ignore_aliases(self, _data):
    return True


# FUNCTIONS

# PARSE ARGUMENTS

def parse_arguments():
  parser = argparse.ArgumentParser(description="Print out data about a game.")

  parser.add_argument('gamenumber', help="game number")

  parser.add_argument('--format',
                      choices=['json', 'yaml'], default='yaml',
                      help="output data format (default: yaml)")

  # Add general optional arguments.

  parser.add_argument('--site',
                      default='www',
                      help="site to check ('www' by default)")

  parser.add_argument('--config', '-c',
                      default='~/.bmrc',
                      help="config file containing site parameters")

  # Return the parser.

  return parser.parse_args()


# MAIN BODY

args = parse_arguments()

# Connect to the site.

try:
  bmconn = bmutils.BMClientParser(os.path.expanduser(args.config), args.site)
except configparser.NoSectionError as e:
  print("ERROR: {0} doesn't seem to have a '{1}' section".format(args.config,
                                                                 args.site))
  print("(Exception: {0}: {1})".format(e.__module__, e.message))
  sys.exit(1)

if not bmconn.verify_login():
  print("ERROR: Could not log in to {0}".format(args.site))
  sys.exit(1)

# Fetch the game data.

game = bmconn.wrap_load_game_data(args.gamenumber)

# Print the game data.

if args.format == 'json':
  print(json.dumps(game, indent=1, sort_keys=True))
elif args.format == 'yaml':
  print(yaml.dump(game, Dumper=noalias_dumper))
