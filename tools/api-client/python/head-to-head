#!/usr/bin/env python

##### head-to-head.py
#
# Show head-to-head records between a protagonist (a button or a player)
# and one or more opponents.

### Imports

# Import stuff from the future.

from __future__ import division

# Import regular stuff.

import ConfigParser
import argparse
import os
import sys

# Import Button Men utilities.

sys.path.append('lib')
import bmutils

### Functions

## parse_arguments

def parse_arguments():

  # Set up the main parser and subparser.

  parser = argparse.ArgumentParser(description="Show head-to-head records between a protagonist (a button or a player) and one or more opponents.")

  subparsers = parser.add_subparsers(dest='type', title="Type of thing to compare",
                                     help="more help: head-to-head <subcommand> --help")

  # Set up the button subparser.

  parser_button = subparsers.add_parser('button', help="show head-to-head records between buttons")

  parser_button.add_argument('protag', help="protagonist button")

  parser_button.add_argument('opponent',
                             nargs = '+',
                             help = "opponent buttons")

  # Set up the player subparser.

  parser_player = subparsers.add_parser('player', help="show head-to-head records between players")

  parser_player.add_argument('protag', help="protagonist player")

  parser_player.add_argument('opponent',
                             nargs = '+',
                             help = "opponent players")

  # Add general optional arguments.

  parser.add_argument('--n-way',
                      action='store_true',
                      help = "compare opponents to each other as well")

  parser.add_argument('--summary',
                      action='store_true',
                      help = "summarize results")

  parser.add_argument('--skip-detail',
                      action='store_true',
                      help = "skip the detailed per-opponent breakdown")

  parser.add_argument('--wiki',
                      action='store_true',
                      help = "format results as a wiki table")

  parser.add_argument('--site',
                      default = 'www',
                      help = "site to check ('www' by default)")

  parser.add_argument('--config', '-c',
                      default='~/.bmrc',
                      help="config file containing site parameters")

  # Return the parser.

  return parser.parse_args()

## get_record
#
# Get the record between two things.

def get_record(bmconn, type, thing1, thing2):

  apicmd = { 'type': 'searchGameHistory',
             'sortColumn': 'lastMove',
             'sortDirection': 'DESC',
             'numberOfResults': 20,
             'page': 1,
             type + 'NameA': thing1,
             type + 'NameB': thing2,
             'status': 'COMPLETE' }

  result = bmconn._make_request(apicmd)

  # If we don't get an ok result, print some helpful info, and give up.

  if result.status != 'ok':
    print "WARNING: Couldn't get data about {0} vs {1}".format(thing1,thing2)
    print "Result status: {0}".format(result.status)
    print "Result message: {0}\n".format(result.message)
    return

  # If we're still here, set some variables, figure out the win
  # percentage, and print the answer.

  wins = result.data['summary']['gamesWonA']
  losses = result.data['summary']['gamesWonB']

  return (thing1, thing2, wins, losses)

## update_win_records
#
# Add the win record for both things versus each other to the win_records dictionary.

def update_win_records(thing1, thing2, wins1, wins2):
  if thing1 not in win_records:
    win_records[thing1] = { }
  win_records[thing1][thing2] = wins1
  
  if thing2 not in win_records:
    win_records[thing2] = { }
  win_records[thing2][thing1] = wins2

## calculate_totals
#
# Calculats the total win/loss record for a thing based on the win_records

def calculate_totals(thing):
  wins = 0
  for opponent in win_records[thing]:
    wins += win_records[thing][opponent]

  losses = 0
  for opponent in win_records:
    if opponent != thing:
      losses += win_records[opponent][thing]

  win_percent = calculate_percent(wins, losses)

  return (wins, losses, win_percent)
          
## calculate_percent
#
# Find the ratio between the first value and the total of the two values

def calculate_percent(first, second):
  total = first + second
  if total == 0:
    return 0
  return (first / total) * 100

## display_wiki_table
#
# Display the win results as the source code of a Wikia-style table

def display_wiki_table(protags, opponents):
  print "{| class=\"wikitable\" style=\"white-space: nowrap; text-align: center;\""
  if args.summary:
    print "! Totals"
  print "!"
  if not args.skip_detail:
    for opponent in opponents:
      print "! {{{{Button|{0}}}}}".format(opponent)
    print "!"
 
  for protag in protags:
    print "|- style=\"vertical-align: top;\""
    if args.summary:
      (wins, losses, win_percent) = calculate_totals(protag)
      cell_text = "'''{0} - {1}'''".format(wins, losses)
      cell_color = get_cell_color_by_record(wins, losses)
      print "| style=\"background-color: " + cell_color + ";\" |" + cell_text
    print "! {{{{Button|{0}}}}}".format(protag)
    if not args.skip_detail:
      for opponent in opponents:
        if protag == opponent:
          cell_text = ""
          cell_color = "#e8e8e8"
        else:
          cell_text = "'''{0} - {1}'''".format(win_records[protag][opponent], win_records[opponent][protag])
          cell_color = get_cell_color_by_record(win_records[protag][opponent], win_records[opponent][protag])
        print "| style=\"background-color: " + cell_color + ";\" |" + cell_text
      print "! {{{{Button|{0}}}}}".format(protag)

  print "|- style=\"vertical-align: top;\""
  if args.summary:
    print "! Totals"
  print "!"
  if not args.skip_detail:
    for opponent in opponents:
      print "! {{{{Button|{0}}}}}".format(opponent)
    print "!"
  print "|}"

def get_cell_color_by_record(wins, losses):
  if wins + losses == 0:
    return "#8888ff"
  if wins + losses < 3:
    return "#ccccff"

  win_percent = calculate_percent(wins, losses)
  if win_percent > 65:
    return "#88ff88"
  if win_percent < 35:
    return "#ff8888"
  if win_percent > 50:
    return "#ccffcc"
  if win_percent < 50:
    return "#ffcccc"
  # win_percent == 50
  return "#ffffcc"

## display_flat_results
#
# Display the win results as individual lines of text

def display_flat_results(protags, opponents):
  # Make a local copy of the list since we're going to be modifying it
  opponents = list(opponents)

  if not args.skip_detail:
    for protag in protags:
      opponents.remove(protag)
      for opponent in opponents:
        win_percent = calculate_percent(win_records[protag][opponent], win_records[opponent][protag])
        print "{0} vs {1}: {2} - {3} ({4:.2f}%)".format(protag, opponent, win_records[protag][opponent], win_records[opponent][protag], win_percent)

  if args.summary:
    for protag in protags:
      (wins, losses, win_percent) = calculate_totals(protag)
      print "{0} totals: {1} - {2} ({3:.2f}%)".format(protag, wins, losses, win_percent)

### Main body

args = parse_arguments()

# Connect to the site.

try:
  bmconn = bmutils.BMClientParser(os.path.expanduser(args.config), args.site)
except ConfigParser.NoSectionError as e:
  print "ERROR: {0} doesn't seem to have a '{1}' section".format(args.config, args.site)
  print "(Exception: {0}: {1})".format(e.__module__, e.message)
  sys.exit(1)

if not bmconn.verify_login():
  print "ERROR: Could not log in to {0}".format(args.site)
  sys.exit(1)

# Set up data structions to keep track of which things we're querying and what data we've gotten so far

protags = [ args.protag ]
if args.n_way:
  protags.extend(args.opponent)

opponents = [ ]
if args.n_way:
  opponents.append(args.protag)
opponents.extend(args.opponent)

win_records = { }

# Look up all the head-to-head data from the server

for protag in protags:
  for opponent in opponents:
    if protag != opponent and (protag not in win_records or opponent not in win_records[protag]):
      (thing1, thing2, wins, losses) = get_record(bmconn, args.type, protag, opponent)
      update_win_records(thing1, thing2, wins, losses)

# Render it appropriately

if args.wiki:
  display_wiki_table(protags, opponents)
else:
  display_flat_results(protags, opponents)
