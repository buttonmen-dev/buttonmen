<?php

require_once('TestDummyBMDieTesting.php');
require_once('TestDummyBMSkillTesting.php');
require_once('TestDummyBMSkillTesting2.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-01 at 14:50:59.
 */
class BMCanHaveSkillTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BMCanHaveSkill
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BMCanHaveSkill;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    protected static function getMethod($name) {
        $class = new ReflectionClass('BMCanHaveSkill');
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        return $method;
    }

    /*
     * @covers BMCanHaveSkill::add_skill
     */

    public function testAdd_skill() {
        // Check that the skill list is indeed empty
        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");

        $this->assertEmpty($sl, "Skill list not initially empty.");
        $this->assertFalse(array_key_exists("test", $hl), "Hook list not initially empty.");

        $this->object->add_skill("Testing", "TestDummyBMSkillTesting");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 1, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertEquals($sl["Testing"], "TestDummyBMSkillTesting", "Incorrect stored classname for 'Testing'");

        // Proper maintenance of the hook lists
        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");
        $this->assertArrayHasKey("test", $hl, "Hook list missing test hooks.");

        $this->assertContains("TestDummyBMSkillTesting", $hl["test"], "Hook list missing 'Testing' hook.");

        $this->assertEquals(1, count($hl), "Hook list contains something extra.");
        $this->assertEquals(1, count($hl["test"]), "Hook list for function 'test' contains something extra.");



        // Another skill

        $this->object->add_skill("Testing2", "TestDummyBMSkillTesting2");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");
        $this->assertEquals($sl["Testing2"], "TestDummyBMSkillTesting2", "Incorrect stored classname for 'Testing2'");


        // Redundancy

        $this->object->add_skill("Testing", "TestDummyBMSkillTesting");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");

        // Proper maintenance of the hook lists
        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");
        $this->assertArrayHasKey("test", $hl, "Hook list missing test hooks.");

        $this->assertContains("TestDummyBMSkillTesting", $hl["test"], "Hook list missing 'Testing' hook.");
        $this->assertContains("TestDummyBMSkillTesting2", $hl["test"], "Hook list missing 'Testing2' hook.");

        $this->assertEquals(1, count($hl), "Hook list contains something extra.");
        $this->assertEquals(2, count($hl["test"]), "Hook list for function 'test' contains something extra.");
    }

    /**
     * @covers BMCanHaveSkill::has_skill
     *
     * @depends testAdd_skill
     */
    public function testHas_skill() {
        $this->object->add_skill("Testing", "TestDummyBMSkillTesting");
        $this->object->add_skill("Testing2", "TestDummyBMSkillTesting2");
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
        $this->assertFalse($this->object->has_skill("Testing3"));
    }

    /**
     * @covers BMCanHaveSkill::remove_skill
     *
     * @depends testAdd_skill
     * @depends testHas_skill
     */
    public function testRemove_skill() {

        // simple
        $this->object->add_skill("Testing", "TestDummyBMSkillTesting");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));

        // multiple skills
        $this->object->add_skill("Testing", "TestDummyBMSkillTesting");
        $this->object->add_skill("Testing2", "TestDummyBMSkillTesting2");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));

        // fail to remove non-existent skills
        $this->object->add_skill("Testing", "TestDummyBMSkillTesting");
        $this->assertFalse($this->object->remove_skill("Testing3"));
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));

        // examine the hook list for proper editing
        $this->assertTrue($this->object->remove_skill("Testing2"));
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing2"));

        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");
        $this->assertArrayHasKey("test", $hl, "Hook list missing test hooks.");

        $this->assertContains("TestDummyBMSkillTesting", $hl["test"], "Hook list missing 'Testing' hook.");
        $this->assertNotContains("TestDummyBMSkillTesting2", $hl["test"], "Hook list _not_ missing 'Testing2' hook.");

        $this->assertEquals(1, count($hl), "Hook list contains something extra.");
        $this->assertEquals(1, count($hl["test"]), "Hook list for function 'test' contains something extra.");
    }

    /**
     * @covers BMCanHaveSkill::run_hooks
     *
     * @depends testAdd_skill
     * @depends testHas_skill
     * @depends testRemove_skill
     */
    public function testRun_hooks() {
        $die = new TestDummyBMDieTesting;

        $die->add_skill("Testing", "TestDummyBMSkillTesting");

        $die->test();

        $this->assertEquals("testing", $die->testvar);

        $die->remove_skill("Testing");
        $die->add_skill("Testing2", "TestDummyBMSkillTesting2");

        $die->test();
        $this->assertEquals("still testing", $die->testvar);

        $die->add_skill("Testing", "TestDummyBMSkillTesting");

        $die->test();
        // order in which hooks run is not guaranteed
        $this->assertRegExp('/testingstill testing|still testingtesting/', $die->testvar);
    }
}
