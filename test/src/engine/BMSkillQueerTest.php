<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-12 at 00:32:58.
 */

class BMSkillQueerTest extends PHPUnit_Framework_TestCase {
    /**
     * @var BMSkillQueer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BMSkillQueer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers BMSkillShadow::attack_list
     */
    public function testAttack_list()
    {
        // test with even value
        $a = array();
        $b = array('attackTypeArray' => &$a, 'value' => 2);

        $this->object->attack_list($b);
        // Test adding Queer
        $this->assertNotEmpty($a);
        $this->assertContains('Power', $a);
        // Only once
        $this->assertEquals(1, count($a));

        // Test for no interaction with skill attack
        $a = array('Skill' => 'Skill');
        $this->object->attack_list($b);
        $this->assertNotEmpty($a);
        $this->assertEquals(2, count($a));
        $this->assertContains('Power', $a);
        // Confirm other contents intact
        $this->assertContains('Skill', $a);

        // Check adding Power to an array already containing Power
        $a = array('Power' => 'Power', 'Skill' => 'Skill');
        $this->object->attack_list($b);
        $this->assertNotEmpty($a);
        $this->assertContains('Power', $a);
        $this->assertEquals(2, count($a));

        // Test Shadow removal
        $a = array('Shadow' => 'Shadow', 'Skill' => 'Skill');
        $this->object->attack_list($b);
        $this->assertNotEmpty($a);
        $this->assertNotContains('Shadow', $a);
        // Check proper behavior not disrupted when removing Power
        $this->assertEquals(2, count($a));
        $this->assertContains('Power', $a);
        $this->assertContains('Skill', $a);


        // test with odd value
        $a = array();
        $b = array('attackTypeArray' => &$a, 'value' => 3);

        $this->object->attack_list($b);
        // Test adding Queer
        $this->assertNotEmpty($a);
        $this->assertContains('Shadow', $a);
        // Only once
        $this->assertEquals(1, count($a));

        // Test for no interaction with skill attack
        $a = array('Skill' => 'Skill');
        $this->object->attack_list($b);
        $this->assertNotEmpty($a);
        $this->assertEquals(2, count($a));
        $this->assertContains('Shadow', $a);
        // Confirm other contents intact
        $this->assertContains('Skill', $a);

        // Check adding Shadow to an array already containing Shadow
        $a = array('Shadow' => 'Shadow', 'Skill' => 'Skill');
        $this->object->attack_list($b);
        $this->assertNotEmpty($a);
        $this->assertContains('Shadow', $a);
        $this->assertEquals(2, count($a));

        // Test Power removal
        $a = array('Power' => 'Power', 'Skill' => 'Skill');
        $this->object->attack_list($b);
        $this->assertNotEmpty($a);
        $this->assertNotContains('Power', $a);
        // Check proper behavior not disrupted when removing Power
        $this->assertEquals(2, count($a));
        $this->assertContains('Shadow', $a);
        $this->assertContains('Skill', $a);
    }
}
