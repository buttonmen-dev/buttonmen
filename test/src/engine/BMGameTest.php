<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-11 at 13:27:50.
 */
class BMGameTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BMGame
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BMGame;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers BMGame::update_game_state_start_game
     */
    public function test_update_game_state_start_game() {
        $this->object->gameState = BMGameState::START_GAME;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_GAME, $this->object->gameState);

        // both players must be set before advancing the game
        $this->object->gameState = BMGameState::START_GAME;
        $Button1 = new BMButton;
        $Button2 = new BMButton;
        $this->object->buttonArray = array($Button1, $Button2);
        $this->object->maxWins = 3;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_GAME, $this->object->gameState);

        $this->object->gameState = BMGameState::START_GAME;
        $this->object->playerIdArray = array(12345, 54321);
        $Button1 = new BMButton;
        $Button2 = new BMButton;
        $this->object->buttonArray = array($Button1, $Button2);
        $this->object->maxWins = 3;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::APPLY_HANDICAPS, $this->object->gameState);
        $this->assertEquals(0, $this->object->nRecentPasses);
        $this->assertEquals(array(array(0, 0, 0), array(0, 0, 0)),
                            $this->object->gameScoreArrayArray);
        $this->assertEquals(array(FALSE, FALSE), $this->object->autopassArray);
    }

    /**
     * @covers BMGame::do_next_step_apply_handicaps
     */
    public function test_do_next_step_apply_handicaps() {
        $this->object->gameState = BMGameState::APPLY_HANDICAPS;
        $this->object->do_next_step();
        $this->assertEquals($this->object->gameScoreArrayArray,
                            array(array('W' => 0, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 0, 'D' => 0)));
    }

    /**
     * @covers BMGame::update_game_state_apply_handicaps
     */
    public function test_update_game_state_apply_handicaps() {
        $this->object->gameState = BMGameState::APPLY_HANDICAPS;
        unset($this->object->maxWins);
        try {
            $this->object->update_game_state();
            $this->fail('Max wins must exist.');
        }
        catch (LogicException $expected) {
        }

        $this->object->playerIdArray = array(12345, 54321);
        $this->object->gameState = BMGameState::APPLY_HANDICAPS;
        $this->object->maxWins = 3;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::APPLY_HANDICAPS,
                            $this->object->gameState);

        $this->object->playerIdArray = array('12345', '54321');
        $this->object->gameState = BMGameState::APPLY_HANDICAPS;
        $this->object->gameScoreArrayArray = array(array(0, 0, 0),array(0, 0, 0));
        $this->object->maxWins = 3;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::LOAD_DICE_INTO_BUTTONS,
                            $this->object->gameState);

        $this->object->playerIdArray = array('12345', '54321');
        $this->object->gameState = BMGameState::APPLY_HANDICAPS;
        $this->object->gameScoreArrayArray = array(array(3, 0, 0),array(0, 3, 0));
        $this->object->maxWins = 3;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_GAME, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_load_dice_into_buttons
     */
    public function test_do_next_step_load_dice_into_buttons() {
//        $this->object->gameState = BMGameState::LOAD_DICE_INTO_BUTTONS;
//
//        $button1 = new BMButton;
//        $button2 = new BMButton;
//        $recipe1 = '(4) (8) (12) (30)';
//        $recipe2 = '(6) (12) (20) (20)';
//        $button1->load_from_recipe($recipe1);
//        $button2->load_from_recipe($recipe2);
//        $dieArray1 = $button1->dieArray;
//        $dieArray2 = $button2->dieArray;
//        $button1->dieArray = array();
//        $button2->dieArray = array();
//        $this->object->buttonArray = array($button1, $button2);
//        $this->object->do_next_step();
//
//        $this->assertEquals($dieArray1, $this->object->buttonArray[0]->dieArray);
//        $this->assertEquals($dieArray2, $this->object->buttonArray[1]->dieArray);
    }

    /**
     * @covers BMGame::update_game_state_load_dice_into_buttons
     */
    public function test_update_game_state_load_dice_into_buttons() {
        $this->object->gameState = BMGameState::LOAD_DICE_INTO_BUTTONS;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $button1->load('(4) (8) (12) (20)');
        $button2->load('(4) (12) (20) (X)');
        $this->object->buttonArray = array($button1, new $button2);
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::LOAD_DICE_INTO_BUTTONS, $this->object->gameState);

        $this->object->gameState = BMGameState::LOAD_DICE_INTO_BUTTONS;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $button1->load('(4) (8) (12) (20)');
        $button2->load('(4) (12) (20) (X)');
        $this->object->buttonArray = array($button1, $button2);
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::ADD_AVAILABLE_DICE_TO_GAME, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_add_available_dice_to_game
     */
    public function test_do_next_step_add_available_dice_to_game() {
        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) (12) (30)';
        $recipe2 = '(6) (12) (20) (20)';
        $button1->load($recipe1);
        $button2->load($recipe2);
        $this->object->buttonArray = array($button1, $button2);
        $this->object->do_next_step();

        // synchronise values
        $dieArray1 = array();
        foreach ($button1->dieArray as $die) {
            $dieArray1[] = clone $die;
        }

        $dieArray2 = array();
        foreach ($button2->dieArray as $die) {
            $dieArray2[] = clone $die;
        }

        $this->assertEquals(array($dieArray1, $dieArray2),
                            $this->object->activeDieArrayArray);
        $this->assertNull($this->object->activeDieArrayArray[0][0]->value);
    }

    /**
     * @covers BMGame::do_next_step_add_available_dice_to_game
     * @covers BMGame::offer_courtesy_auxiliary_dice
     * @covers BMGame::do_players_have_dice_with_skill
     * @covers BMGame::get_all_auxiliary_dice
     */
    public function test_do_next_step_add_available_dice_to_game_one_aux() {
        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) +(6) (12) +(30)';
        $recipe2 = '(6) (12) (20) (20)';
        $button1->load($recipe1);
        $button2->load($recipe2);
        $this->object->buttonArray = array($button1, $button2);
        $this->object->do_next_step();

        // synchronise values
        $dieArray1 = array();
        foreach ($button1->dieArray as $die) {
            $dieArray1[] = clone $die;
        }

        $dieArray2 = array();
        foreach ($button2->dieArray as $die) {
            $dieArray2[] = clone $die;
        }
        $firstAuxDie = clone $button1->dieArray[2];
        $firstAuxDie->playerIdx = 1;
        $firstAuxDie->originalPlayerIdx = 1;
        $dieArray2[] = $firstAuxDie;

        $secondAuxDie = clone $button1->dieArray[4];
        $secondAuxDie->playerIdx = 1;
        $secondAuxDie->originalPlayerIdx = 1;
        $dieArray2[] = $secondAuxDie;

        $this->assertEquals(array($dieArray1, $dieArray2),
                            $this->object->activeDieArrayArray);
        $this->assertNull($this->object->activeDieArrayArray[0][0]->value);
    }

    /**
     * @covers BMGame::do_next_step_add_available_dice_to_game
     * @covers BMGame::offer_courtesy_auxiliary_dice
     * @covers BMGame::do_players_have_dice_with_skill
     * @covers BMGame::get_all_auxiliary_dice
     */
    public function test_do_next_step_add_available_dice_to_game_both_aux() {
        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) +(6) (12) +(30)';
        $recipe2 = '(6) +(12) (20) (20)';
        $button1->load($recipe1);
        $button2->load($recipe2);
        $this->object->buttonArray = array($button1, $button2);
        $this->object->do_next_step();

        // synchronise values
        $dieArray1 = array();
        foreach ($button1->dieArray as $die) {
            $dieArray1[] = clone $die;
        }

        $dieArray2 = array();
        foreach ($button2->dieArray as $die) {
            $dieArray2[] = clone $die;
        }

        $this->assertEquals(array($dieArray1, $dieArray2),
                            $this->object->activeDieArrayArray);
        $this->assertNull($this->object->activeDieArrayArray[0][0]->value);
    }

    /**
     * @covers BMGame::update_game_state_add_available_dice_to_game
     */
    public function test_update_game_state_add_available_dice_to_game() {
        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::ADD_AVAILABLE_DICE_TO_GAME,
                            $this->object->gameState);

        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $die1 = new BMDie;
        $die2 = new BMDie;
        $die3 = new BMDie;
        $die4 = new BMDie;
        $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                   array($die3, $die4));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::CHOOSE_AUXILIARY_DICE, $this->object->gameState);
        $this->assertEquals(array(FALSE, FALSE), $this->object->waitingOnActionArray);
    }

    /**
     * @covers BMGame::update_game_state_add_available_dice_to_game
     */
    public function test_update_game_state_add_available_dice_to_game_one_aux() {
        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) (12) +(30)';
        $recipe2 = '(6) (12) (20) (20)';
        $button1->load($recipe1);
        $button2->load($recipe2);
        $this->object->buttonArray = array($button1, $button2);
        $this->object->activeDieArrayArray =
            array(array(BMDie::create(4),
                        BMDie::create(8),
                        BMDie::create(12),
                        BMDie::create_from_recipe('+(30)')),
                  array(BMDie::create(6),
                        BMDie::create(12),
                        BMDie::create(20),
                        BMDie::create(20)));
        $this->object->update_game_state();
        $this->assertEquals($recipe1, $this->object->buttonArray[0]->recipe);
        $this->assertEquals($recipe2, $this->object->buttonArray[1]->recipe);
        $this->assertCount(4, $this->object->activeDieArrayArray[0]);
        $this->assertCount(4, $this->object->activeDieArrayArray[1]);
        $this->assertEquals(array(TRUE, FALSE), $this->object->waitingOnActionArray);
    }

    /**
     * @covers BMGame::update_game_state_add_available_dice_to_game
     */
    public function test_update_game_state_add_available_dice_to_game_both_aux() {
        $this->object->gameState = BMGameState::ADD_AVAILABLE_DICE_TO_GAME;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) (12) +(30)';
        $recipe2 = '+(6) (12) (20) (20)';
        $button1->load($recipe1);
        $button2->load($recipe2);
        $this->object->buttonArray = array($button1, $button2);
        $this->object->activeDieArrayArray =
            array(array(BMDie::create(4),
                        BMDie::create(8),
                        BMDie::create(12),
                        BMDie::create_from_recipe('+(30)')),
                  array(BMDie::create_from_recipe('+(6)'),
                        BMDie::create(12),
                        BMDie::create(20),
                        BMDie::create(20)));
        $this->object->update_game_state();
        $this->assertEquals($recipe1, $this->object->buttonArray[0]->recipe);
        $this->assertEquals($recipe2, $this->object->buttonArray[1]->recipe);
        $this->assertCount(4, $this->object->activeDieArrayArray[0]);
        $this->assertCount(4, $this->object->activeDieArrayArray[1]);
        $this->assertEquals(array(TRUE, TRUE), $this->object->waitingOnActionArray);
    }

    /**
     * @covers BMGame::update_game_state_choose_auxiliary_dice
     * @covers BMGame::remove_dice_with_skill
     * @covers BMButton::update_button_recipe
     */
    public function test_update_game_state_choose_auxiliary_dice_no_aux() {
        $button1 = new BMButton;
        $button1->load('(4) (8)');

        $button2 = new BMButton;
        $button2->load('(10) (20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        $die4 = BMDie::create_from_recipe('(20)');

        $this->object->gameState = BMGameState::CHOOSE_AUXILIARY_DICE;
        $this->object->waitingOnActionArray = array(FALSE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::CHOOSE_RESERVE_DICE, $this->object->gameState);
        $this->assertFalse($this->object->buttonArray[0]->hasAlteredRecipe);
        $this->assertFalse($this->object->buttonArray[1]->hasAlteredRecipe);
        $this->assertEquals('(4) (8)', $this->object->buttonArray[0]->recipe);
        $this->assertEquals('(10) (20)', $this->object->buttonArray[1]->recipe);
    }

    /**
     * @covers BMGame::update_game_state_choose_auxiliary_dice
     * @covers BMGame::remove_dice_with_skill
     * @covers BMButton::update_button_recipe
     */
    public function test_update_game_state_choose_auxiliary_dice_first_aux_unspecified() {
        $button1 = new BMButton;
        $button1->load('(4) +(8)');

        $button2 = new BMButton;
        $button2->load('(10) (20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('+(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        $die4 = BMDie::create_from_recipe('(20)');

        $this->object->gameState = BMGameState::CHOOSE_AUXILIARY_DICE;
        $this->object->waitingOnActionArray = array(TRUE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::CHOOSE_AUXILIARY_DICE, $this->object->gameState);
        $this->assertFalse($this->object->buttonArray[0]->hasAlteredRecipe);
        $this->assertFalse($this->object->buttonArray[1]->hasAlteredRecipe);
        $this->assertEquals('(4) +(8)', $this->object->buttonArray[0]->recipe);
        $this->assertEquals('(10) (20)', $this->object->buttonArray[1]->recipe);
    }

    /**
     * @covers BMGame::update_game_state_choose_auxiliary_dice
     * @covers BMGame::remove_dice_with_skill
     * @covers BMButton::update_button_recipe
     */
    public function test_update_game_state_choose_auxiliary_dice_second_aux_unspecified() {
        $button1 = new BMButton;
        $button1->load('(4) (8)');

        $button2 = new BMButton;
        $button2->load('(10) +(20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        $die4 = BMDie::create_from_recipe('+(20)');

        $this->object->gameState = BMGameState::CHOOSE_AUXILIARY_DICE;
        $this->object->waitingOnActionArray = array(FALSE, TRUE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::CHOOSE_AUXILIARY_DICE, $this->object->gameState);
        $this->assertFalse($this->object->buttonArray[0]->hasAlteredRecipe);
        $this->assertFalse($this->object->buttonArray[1]->hasAlteredRecipe);
        $this->assertEquals('(4) (8)', $this->object->buttonArray[0]->recipe);
        $this->assertEquals('(10) +(20)', $this->object->buttonArray[1]->recipe);
    }

    /**
     * @covers BMGame::update_game_state_choose_auxiliary_dice
     * @covers BMGame::remove_dice_with_skill
     * @covers BMButton::update_button_recipe
     */
    public function test_update_game_state_choose_auxiliary_dice_second_aux_specified() {
        $button1 = new BMButton;
        $button1->load('(4) (8)');

        $button2 = new BMButton;
        $button2->load('+(10) (20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('(8)');

        $die3 = BMDie::create_from_recipe('+(10)');
        $die4 = BMDie::create_from_recipe('(20)');

        $this->object->gameState = BMGameState::CHOOSE_AUXILIARY_DICE;
        $this->object->waitingOnActionArray = array(FALSE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::CHOOSE_RESERVE_DICE, $this->object->gameState);
        $this->assertCount(2, $this->object->activeDieArrayArray[0]);
        $this->assertCount(1, $this->object->activeDieArrayArray[1]);
        $this->assertEquals($die4, $this->object->activeDieArrayArray[1][0]);
        $this->assertFalse($this->object->buttonArray[0]->hasAlteredRecipe);
        $this->assertTrue($this->object->buttonArray[1]->hasAlteredRecipe);
        $this->assertEquals('(4) (8)', $this->object->buttonArray[0]->recipe);
        $this->assertEquals('(20)', $this->object->buttonArray[1]->recipe);
    }

    /*
     * @covers BMGame::do_next_step_choose_reserve_dice
     */
    public function test_do_next_step_choose_reserve_dice_round_1() {
        $button1 = new BMButton;
        $button1->load('(4) (8)');

        $button2 = new BMButton;
        $button2->load('(10) r(20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        $die4 = BMDie::create_from_recipe('r(20)');

        $this->object->gameState = BMGameState::CHOOSE_RESERVE_DICE;
        $this->object->waitingOnActionArray = array(FALSE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));
        $this->object->do_next_step();
        $this->assertEquals(array(FALSE, FALSE), $this->object->waitingOnActionArray);
    }

    /*
     * @covers BMGame::do_next_step_choose_reserve_dice
     */
    public function test_do_next_step_choose_reserve_dice_round_2() {
        $button1 = new BMButton;
        $button1->load('(4) r(8)');

        $button2 = new BMButton;
        $button2->load('(10) r(20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('r(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        $die4 = BMDie::create_from_recipe('r(20)');

        $this->object->gameState = BMGameState::CHOOSE_RESERVE_DICE;
        $this->object->waitingOnActionArray = array(FALSE, FALSE);
        $this->object->isPrevRoundWinnerArray = array(TRUE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));
        $this->object->do_next_step();
        $this->assertEquals(array(FALSE, TRUE), $this->object->waitingOnActionArray);
    }

    /*
     * @covers BMGame::update_game_state_choose_reserve_dice
     */
    public function test_update_game_state_choose_reserve_dice_decline() {
        $button1 = new BMButton;
        $button1->load('(4) r(8)');

        $button2 = new BMButton;
        $button2->load('(10) r(20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('r(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        // the reserve dice is not selected
        $die4 = BMDie::create_from_recipe('r(20)');

        $this->object->gameState = BMGameState::CHOOSE_RESERVE_DICE;
        // all decisions have been made, so we are not waiting on anyone
        $this->object->waitingOnActionArray = array(FALSE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));

        $this->object->update_game_state();
        $this->assertCount(1, $this->object->activeDieArrayArray[0]);
        $this->assertCount(1, $this->object->activeDieArrayArray[1]);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $this->object->gameState);
    }

    /*
     * @covers BMGame::update_game_state_choose_reserve_dice
     */
    public function test_update_game_state_choose_reserve_dice_accept() {
        $button1 = new BMButton;
        $button1->load('(4) r(8)');

        $button2 = new BMButton;
        $button2->load('(10) r(20)');

        $this->object->buttonArray = array($button1, $button2);

        $die1 = BMDie::create_from_recipe('(4)');
        $die2 = BMDie::create_from_recipe('r(8)');

        $die3 = BMDie::create_from_recipe('(10)');
        // the reserve die is selected
        $die4 = BMDie::create_from_recipe('r(20)');
        $die4->selected = TRUE;

        $this->object->gameState = BMGameState::CHOOSE_RESERVE_DICE;
        // all decisions have been made, so we are not waiting on anyone
        $this->object->waitingOnActionArray = array(FALSE, FALSE);
        $this->object->activeDieArrayArray =
            array(array($die1, $die2), array($die3, $die4));

        $this->object->update_game_state();
        $this->assertCount(1, $this->object->activeDieArrayArray[0]);
        $this->assertCount(2, $this->object->activeDieArrayArray[1]);
        $this->assertFalse($this->object->activeDieArrayArray[1][1]->has_skill('Reserve'));
        $this->assertEquals(20, $this->object->activeDieArrayArray[1][1]->max);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $this->object->gameState);
        $this->assertEquals('(10) (20)', $this->object->buttonArray[1]->recipe);
    }

    /**
     * @covers BMGame::do_next_step_specify_dice
     */
    public function test_do_next_step_specify_dice() {
        // no swing dice
        $this->object->gameState = BMGameState::SPECIFY_DICE;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) (12) (30)';
        $recipe2 = '(6) (12) (20) (20)';
        $button1->load($recipe1);
        $button2->load($recipe2);
        $this->object->activeDieArrayArray = array($button1->dieArray,
                                                   $button2->dieArray);
        $this->object->swingRequestArrayArray = array(array(), array());
        $this->object->gameScoreArrayArray = array_fill(0, $this->object->nPlayers, array(0, 0, 0));
        $this->object->do_next_step();
        $this->assertEquals(array(FALSE, FALSE), $this->object->waitingOnActionArray);
        $this->assertEquals(array(array(), array()), $this->object->swingValueArrayArray);

        // with swing dice
        $this->object->gameState = BMGameState::SPECIFY_DICE;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $recipe1 = '(4) (8) (12) (X)';
        $recipe2 = '(6) (12) (Y) (Y)';
        $button1->load($recipe1);
        $button2->load($recipe2);

        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[3]);
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[2]);
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[3]);
        $this->assertTrue($button1->dieArray[3]->needsSwingValue);
        $this->assertTrue($button2->dieArray[2]->needsSwingValue);
        $this->assertTrue($button2->dieArray[3]->needsSwingValue);

        $this->object->activeDieArrayArray = array($button1->dieArray,
                                                   $button2->dieArray);

        $this->assertInstanceOf('BMDieSwing', $this->object->activeDieArrayArray[0][3]);
        $this->assertInstanceOf('BMDieSwing', $this->object->activeDieArrayArray[1][2]);
        $this->assertInstanceOf('BMDieSwing', $this->object->activeDieArrayArray[1][3]);
        $this->assertTrue($this->object->activeDieArrayArray[0][3]->needsSwingValue);
        $this->assertTrue($this->object->activeDieArrayArray[1][2]->needsSwingValue);
        $this->assertTrue($this->object->activeDieArrayArray[1][3]->needsSwingValue);

        $this->object->swingRequestArrayArray =
            array(array('X'=>array($this->object->activeDieArrayArray[0][3])),
                  array('Y'=>array($this->object->activeDieArrayArray[1][2],
                                   $this->object->activeDieArrayArray[1][3])));
        $this->object->do_next_step();

        $this->assertEquals(array(TRUE, TRUE), $this->object->waitingOnActionArray);
        $this->assertEquals(array(array('X'=>NULL), array('Y'=>NULL)),
                            $this->object->swingValueArrayArray);

        $this->object->swingValueArrayArray = array(array('X'=>30), array('Y'=>1));
        $this->object->do_next_step();
        $this->assertEquals(array(array(), array('Y'=>1)),
                            $this->object->swingValueArrayArray);

        $this->object->swingValueArrayArray = array(array('X'=>5), array('Y'=>20));
        $this->object->do_next_step();
        $this->assertEquals(array(array('X'=>5), array('Y'=>20)),
                            $this->object->swingValueArrayArray);

        $this->assertInstanceOf('BMDieSwing', $this->object->activeDieArrayArray[0][3]);
        $this->assertInstanceOf('BMDieSwing', $this->object->activeDieArrayArray[1][2]);
        $this->assertInstanceOf('BMDieSwing', $this->object->activeDieArrayArray[1][3]);
        $this->assertFalse($this->object->activeDieArrayArray[0][3]->needsSwingValue);
        $this->assertFalse($this->object->activeDieArrayArray[1][2]->needsSwingValue);
        $this->assertFalse($this->object->activeDieArrayArray[1][3]->needsSwingValue);

        $this->assertEquals(4,  $this->object->activeDieArrayArray[0][0]->max);
        $this->assertEquals(8,  $this->object->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $this->object->activeDieArrayArray[0][2]->max);
        $this->assertEquals(5,  $this->object->activeDieArrayArray[0][3]->max);
        $this->assertEquals(6,  $this->object->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $this->object->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $this->object->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $this->object->activeDieArrayArray[1][3]->max);
    }

    /**
     * @covers BMGame::update_game_state_specify_dice
     */
    public function test_update_game_state_specify_dice() {
        $this->object->gameState = BMGameState::SPECIFY_DICE;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $button1->load('(4) (8) (12) (20)');
        $button2->load('(4) (12) (20) (20)');
        $this->object->activeDieArrayArray = array($button1->dieArray,
                                                   $button2->dieArray);
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE,
                            $this->object->gameState);

        $this->object->gameState = BMGameState::SPECIFY_DICE;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $button1->load('(4) (8) (12) (20)');
        $button2->load('(4) (12) (20) (X)');
        $this->object->activeDieArrayArray = array($button1->dieArray,
                                                   $button2->dieArray);
        $this->object->waitingOnActionArray = array(FALSE, TRUE);
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::SPECIFY_DICE, $this->object->gameState);

        $this->object->gameState = BMGameState::SPECIFY_DICE;
        $button1 = new BMButton;
        $button2 = new BMButton;
        $button1->load('(4) (8) (12) (20)');
        $button2->load('(4) (12) (20) (4/12)');
        $this->object->buttonArray = array($button1, $button2);
        $this->object->waitingOnActionArray = array(FALSE, TRUE);
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::SPECIFY_DICE, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_determine_initiative
     */
    public function test_do_next_step_determine_initiative() {
        $this->object->gameState = BMGameState::DETERMINE_INITIATIVE;
        $this->object->gameScoreArrayArray = array(array(0,0,0), array(0,0,0));
        $die1 = BMDie::create(1, array());
        $die1->value = 1;
        $die2 = BMDie::create(2, array());
        $die2->value = 2;
        $this->object->activeDieArrayArray = array(array($die1), array($die2));
        $this->object->do_next_step();
        $this->assertEquals(0, $this->object->playerWithInitiativeIdx);

        $this->object->gameState = BMGameState::DETERMINE_INITIATIVE;
        $die1 = BMDie::create(2, array());
        $die1->value = 2;
        $die2 = BMDie::create(1, array());
        $die2->value = 1;
        $this->object->activeDieArrayArray = array(array($die1), array($die2));
        $this->object->do_next_step();
        $this->assertEquals(1, $this->object->playerWithInitiativeIdx);

        $this->object->gameState = BMGameState::DETERMINE_INITIATIVE;
        $die1 = BMDie::create(1, array());
        $die1->value = 1;
        $die2 = BMDie::create(1, array());
        $die2->value = 1;
        $this->object->activeDieArrayArray = array(array($die1), array($die2));
        $playerWithInitiativeStore = array();
        for ($runIdx = 1; $runIdx <= 50; $runIdx++) {
            unset($this->object->playerWithInitiativeIdx);
            $this->object->do_next_step();
            $playerWithInitiativeStore[] = $this->object->playerWithInitiativeIdx;
        }
        $this->assertGreaterThanOrEqual(0, min($playerWithInitiativeStore));
        $this->assertLessThanOrEqual(1, max($playerWithInitiativeStore));
        $this->assertTrue(in_array(0, $playerWithInitiativeStore));
        $this->assertTrue(in_array(1, $playerWithInitiativeStore));

        $this->object->gameState = BMGameState::DETERMINE_INITIATIVE;
        $die1 = BMDie::create(20, array());
        $die1->value = 10;
        $die2 = BMDie::create(20, array());
        $die2->value = 12;
        $die3 = BMDie::create(20, array());
        $die3->value = 10;
        $die4 = BMDie::create(20, array());
        $die4->value = 11;
        $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                   array($die3, $die4));
        $playerWithInitiativeStore = array();
        for ($runIdx = 1; $runIdx <= 50; $runIdx++) {
            unset($this->object->playerWithInitiativeIdx);
            $this->object->do_next_step();
            $playerWithInitiativeStore[] = $this->object->playerWithInitiativeIdx;
        }
        $this->assertFalse(in_array(0, $playerWithInitiativeStore));
        $this->assertTrue(in_array(1, $playerWithInitiativeStore));
    }

    /**
     * @covers BMGame::update_game_state_determine_initiative
     */
    public function test_update_game_state_determine_initiative() {
        $this->object->gameState = BMGameState::DETERMINE_INITIATIVE;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE,
                            $this->object->gameState);

        $this->object->gameState = BMGameState::DETERMINE_INITIATIVE;
        $this->object->playerWithInitiativeIdx = 0;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_react_to_initiative
     * @covers BMGame::react_to_initiative_decline
     */
    public function test_do_next_step_react_to_initiative_decline_chance() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) (8) (10) c(10) c(12)', 'FuzzFace');

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (12)', 'Coil');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->proceed_to_next_user_action(BMGameState::DETERMINE_INITIATIVE);

        // manually set die values
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 4;
        $activeDieArrayArray[0][1]->value = 6;
        $activeDieArrayArray[0][2]->value = 6;
        $activeDieArrayArray[0][3]->value = 6;
        $activeDieArrayArray[0][4]->value = 6;
        $activeDieArrayArray[1][0]->value = 4;
        $activeDieArrayArray[1][1]->value = 4;
        $activeDieArrayArray[1][2]->value = 4;
        $activeDieArrayArray[1][3]->value = 4;
        $activeDieArrayArray[1][4]->value = 4;

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        // test invalid action
        try {
            $game->react_to_initiative(array('action' => 'blargl',
                                             'playerIdx' => 0,
                                             'dieIdxArray' => NULL,
                                             'dieValueArray' => NULL));
            $this->fail('Bad reaction to initiative did not throw an exception');
        } catch (InvalidArgumentException $e) {
        }

        // test invalid 'decline' action
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'decline',
                                             'playerIdx' => 0,
                                             'dieIdxArray' => array(3),
                                             'dieValueArray' => NULL)));

        // test valid 'decline' action
        $this->assertEquals(
            array('gainedInitiative' => FALSE),
            $game->react_to_initiative(array('action' => 'decline',
                                             'playerIdx' => 0,
                                             'dieIdxArray' => NULL,
                                             'dieValueArray' => NULL)));
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(1, $game->playerWithInitiativeIdx);
    }

    /**
     * @covers BMGame::do_next_step_react_to_initiative
     * @covers BMGame::react_to_initiative_chance
     */
    public function test_do_next_step_react_to_initiative_perform_chance() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) (8) (10) c(10) c(4)', 'FuzzFaceAltered');

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (12)', 'Coil');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->proceed_to_next_user_action(BMGameState::DETERMINE_INITIATIVE);

        // check that a reaction to initiative cannot yet occur
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0,
                                             'rerolledDieIdx' => 4)));

        // manually set die values
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 4;
        $activeDieArrayArray[0][1]->value = 6;
        $activeDieArrayArray[0][2]->value = 6;
        $activeDieArrayArray[0][3]->value = 6;
        $activeDieArrayArray[0][4]->value = 4;
        $activeDieArrayArray[1][0]->value = 4;
        $activeDieArrayArray[1][1]->value = 4;
        $activeDieArrayArray[1][2]->value = 4;
        $activeDieArrayArray[1][3]->value = 4;
        $activeDieArrayArray[1][4]->value = 4;
        $game->activeDieArrayArray = $activeDieArrayArray;

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);

        // test incomplete 'chance' action
        $this->assertFalse(
            $game->react_to_initiative(array('playerIdx' => 0,
                                             'rerolledDieIdx' => 4)));

        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'chance',
                                             'rerolledDieIdx' => 4)));

        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0)));

        // test that 'chance' fails gracefully with an invalid index
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0,
                                             'rerolledDieIdx' => 10)));

        // test that 'chance' can only be used with chance dice
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0,
                                             'rerolledDieIdx' => 0)));

        // test correct 'chance' action
        $reactResponse = $game->react_to_initiative(array('action' => 'chance',
                                                          'playerIdx' => 0,
                                                          'rerolledDieIdx' => 4,
                                                          'TESTrerolledDieValue' => 3));
        $this->assertTrue(array_key_exists('gainedInitiative', $reactResponse));
        $this->assertTrue($reactResponse['gainedInitiative']);

        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);

        $game->do_next_step();
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);
    }

    /**
     * @covers BMGame::do_next_step_react_to_initiative
     * @covers BMGame::react_to_initiative_chance
     */
    public function test_do_next_step_react_to_initiative_multiple_chance() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) (8) (10) c(10) c(12)', 'FuzzFace');

        $button2 = new BMButton;
        $button2->load('(6) c(6) (10) (12) c(20)', 'John Kovalic');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->proceed_to_next_user_action(BMGameState::DETERMINE_INITIATIVE);

        // check that a reaction to initiative cannot yet occur
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0,
                                             'rerolledDieIdx' => 4)));

        // manually set die values
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 4;
        $activeDieArrayArray[0][1]->value = 4;
        $activeDieArrayArray[0][2]->value = 4;
        $activeDieArrayArray[0][3]->value = 4;
        $activeDieArrayArray[0][4]->value = 5;
        $activeDieArrayArray[1][0]->value = 4;
        $activeDieArrayArray[1][1]->value = 4;
        $activeDieArrayArray[1][2]->value = 4;
        $activeDieArrayArray[1][3]->value = 4;
        $activeDieArrayArray[1][4]->value = 4;
        $game->activeDieArrayArray = $activeDieArrayArray;

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(5, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);

        // test correct 'chance' action by player 1
        $this->assertTrue(
            array_key_exists('gainedInitiative',
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0,
                                             'rerolledDieIdx' => 4,
                                             'TESTrerolledDieValue' => 3))));
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertEquals(array(FALSE, FALSE), $game->waitingOnActionArray);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[0][4]->disabled));

        $game->do_next_step();
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[0][4]->disabled));

        // test correct 'chance' action by player 2
        $this->assertTrue(
            array_key_exists(
                'gainedInitiative',
                $game->react_to_initiative(array('action' => 'chance',
                                                 'playerIdx' => 1,
                                                 'rerolledDieIdx' => 4,
                                                 'TESTrerolledDieValue' => 2)))
        );
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertFalse(isset($game->activeDieArrayArray[1][1]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[1][4]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[0][4]->disabled));

        $game->do_next_step();
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertFalse(isset($game->activeDieArrayArray[1][1]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[1][4]->disabled));

        // test correct 'chance' action by player 1
        $this->assertTrue(
            array_key_exists('gainedInitiative',
            $game->react_to_initiative(array('action' => 'chance',
                                             'playerIdx' => 0,
                                             'rerolledDieIdx' => 4,
                                             'TESTrerolledDieValue' => 1))));
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(2, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[0][4]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[1][1]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[1][4]->disabled));
    }

    /**
     * @covers BMGame::do_next_step_react_to_initiative
     * @covers BMGame::react_to_initiative_chance
     */
    public function test_do_next_step_react_to_initiative_unsuccessful_chance() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) (8) (10) c(10) c(12)', 'FuzzFace');

        $button2 = new BMButton;
        $button2->load('(6) c(6) (10) (12) c(20)', 'John Kovalic');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->proceed_to_next_user_action(BMGameState::DETERMINE_INITIATIVE);

        // manually set die values
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 4;
        $activeDieArrayArray[0][1]->value = 4;
        $activeDieArrayArray[0][2]->value = 4;
        $activeDieArrayArray[0][3]->value = 4;
        $activeDieArrayArray[0][4]->value = 5;
        $activeDieArrayArray[1][0]->value = 1;
        $activeDieArrayArray[1][1]->value = 1;
        $activeDieArrayArray[1][2]->value = 1;
        $activeDieArrayArray[1][3]->value = 1;
        $activeDieArrayArray[1][4]->value = 1;
        $game->activeDieArrayArray = $activeDieArrayArray;

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(1, $game->playerWithInitiativeIdx);

        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(5, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][4]->value);

        // test unsuccessful 'chance' action by player 1
        $chanceSuccess = $game->react_to_initiative(array('action' => 'chance',
                                                          'playerIdx' => 0,
                                                          'rerolledDieIdx' => 4));
        $this->assertFalse($chanceSuccess['gainedInitiative']);
        $this->assertEquals(1, $game->playerWithInitiativeIdx);
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(array(FALSE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertTrue($game->activeDieArrayArray[0][3]->disabled);
        $this->assertTrue($game->activeDieArrayArray[0][4]->disabled);

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->disabled));
        $this->assertFalse(isset($game->activeDieArrayArray[0][4]->disabled));
    }

    /**
     * @covers BMGame::do_next_step_react_to_initiative
     * @covers BMGame::react_to_initiative_decline
     */
    public function test_do_next_step_react_to_initiative_decline_focus() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) f(6) (10) f(12) (20)', 'Kakita');

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (12)', 'Coil');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->proceed_to_next_user_action(BMGameState::DETERMINE_INITIATIVE);

        // manually set die values
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 6;
        $activeDieArrayArray[0][1]->value = 6;
        $activeDieArrayArray[0][2]->value = 6;
        $activeDieArrayArray[0][3]->value = 6;
        $activeDieArrayArray[0][4]->value = 6;
        $activeDieArrayArray[1][0]->value = 4;
        $activeDieArrayArray[1][1]->value = 4;
        $activeDieArrayArray[1][2]->value = 4;
        $activeDieArrayArray[1][3]->value = 4;
        $activeDieArrayArray[1][4]->value = 4;

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        // test invalid action
        try {
            $game->react_to_initiative(array('action' => 'blargl',
                                             'playerIdx' => 0,
                                             'dieIdxArray' => NULL,
                                             'dieValueArray' => NULL));
            $this->fail('Bad reaction to initiative did not throw an exception');
        } catch (InvalidArgumentException $e) {

        }

        // test invalid 'decline' action
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'decline',
                                             'playerIdx' => 0,
                                             'dieIdxArray' => array(1, 3),
                                             'dieValueArray' => array(3, 4))));

        // test valid 'decline' action
        $this->assertEquals(
            array('gainedInitiative' => FALSE),
            $game->react_to_initiative(array('action' => 'decline',
                                             'playerIdx' => 0,
                                             'dieIdxArray' => NULL,
                                             'dieValueArray' => NULL)));
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(1, $game->playerWithInitiativeIdx);
    }

    /**
     * @covers BMGame::do_next_step_react_to_initiative
     * @covers BMGame::react_to_initiative_focus
     */
    public function test_do_next_step_react_to_initiative_perform_focus() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) f(6) (10) f(12) (20)', 'Kakita');

        $button2 = new BMButton;
        $button2->load('f(6) (10) f(10) (12) (20)', 'Mirumoto');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->proceed_to_next_user_action(BMGameState::DETERMINE_INITIATIVE);

        // check that a reaction to initiative cannot yet occur
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(1 => 1,
                                                                        3 => 5))));

        // manually set die values
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 4;
        $activeDieArrayArray[0][1]->value = 6;
        $activeDieArrayArray[0][2]->value = 4;
        $activeDieArrayArray[0][3]->value = 6;
        $activeDieArrayArray[0][4]->value = 4;
        $activeDieArrayArray[1][0]->value = 4;
        $activeDieArrayArray[1][1]->value = 4;
        $activeDieArrayArray[1][2]->value = 4;
        $activeDieArrayArray[1][3]->value = 4;
        $activeDieArrayArray[1][4]->value = 4;
        $game->activeDieArrayArray = $activeDieArrayArray;

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);

        // test incomplete 'focus' action
        $this->assertFalse(
            $game->react_to_initiative(array('playerIdx' => 0,
                                             'focusValueArray' => array(1 => 1,
                                                                        3 => 5))));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'focusValueArray' => array(1 => 1,
                                                                        3 => 5))));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0)));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array())));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        // test invalid 'focus' action
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(1 => 1,
                                                                        3 => 12))));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        // test that 'focus' fails gracefully with invalid die index
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(1 => 1,
                                                                        10 => 1))));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        // test that 'focus' can only be used with focus dice
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(2 => 1,
                                                                        3 => 1))));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        // test incorrect 'focus' action, where the dice tie in values
        $this->assertFalse(
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(1 => 4,
                                                                        3 => 4))));
        $this->assertEquals(6, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);

        // test correct 'focus' action
        $this->assertEquals(
            array('gainedInitiative' => TRUE),
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(1 => 1,
                                                                        3 => 6))));
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertTrue($game->activeDieArrayArray[0][1]->dizzy);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->dizzy));

        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        // test correct response 'focus' action
        $this->assertEquals(
            array('gainedInitiative' => TRUE),
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 1,
                                             'focusValueArray' => array(0 => 4,
                                                                        2 => 1))));
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertTrue($game->activeDieArrayArray[0][1]->dizzy);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->dizzy));
        $this->assertFalse(isset($game->activeDieArrayArray[1][0]->dizzy));
        $this->assertTrue($game->activeDieArrayArray[1][2]->dizzy);

        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(1, $game->playerWithInitiativeIdx);

        // test correct counter-response 'focus' action
        $this->assertEquals(
            array('gainedInitiative' => TRUE),
            $game->react_to_initiative(array('action' => 'focus',
                                             'playerIdx' => 0,
                                             'focusValueArray' => array(1 => 1,
                                                                        3 => 3))));

        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertTrue($game->activeDieArrayArray[0][1]->dizzy);
        $this->assertTrue($game->activeDieArrayArray[0][3]->dizzy);
        $this->assertFalse(isset($game->activeDieArrayArray[1][0]->dizzy));
        $this->assertTrue($game->activeDieArrayArray[1][2]->dizzy);

        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        // test 'decline' action
        $this->assertEquals(
            array('gainedInitiative' => FALSE),
            $game->react_to_initiative(array('action' => 'decline',
                                             'playerIdx' => 1,
                                             'dieIdxArray' => NULL,
                                             'dieValueArray' => NULL)));
        $this->assertEquals(4, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[0][4]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);
        $this->assertEquals(BMGameState::START_ROUND, $game->gameState);
        $this->assertTrue($game->activeDieArrayArray[0][1]->dizzy);
        $this->assertTrue($game->activeDieArrayArray[0][3]->dizzy);
        $this->assertFalse(isset($game->activeDieArrayArray[1][0]->dizzy));
        $this->assertTrue($game->activeDieArrayArray[1][2]->dizzy);

        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);
        $this->assertTrue($game->activeDieArrayArray[0][1]->dizzy);
        $this->assertTrue($game->activeDieArrayArray[0][3]->dizzy);
        $this->assertFalse(isset($game->activeDieArrayArray[1][0]->dizzy));
        $this->assertFalse(isset($game->activeDieArrayArray[1][2]->dizzy));
    }

    /**
     * @covers BMGame::update_game_state_react_to_initiative
     */
    public function test_update_game_state_react_to_initiative() {
        $this->object->gameState = BMGameState::REACT_TO_INITIATIVE;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_ROUND,
                            $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_start_round
     */
    public function test_do_next_step_start_round() {
        $this->object->gameState = BMGameState::START_ROUND;
        try {
            $this->object->do_next_step();
            $this->fail('The player who has won initiative must already have been determined.');
        }
        catch (LogicException $expected) {
        }

        $this->object->gameState = BMGameState::START_ROUND;
        $this->object->playerWithInitiativeIdx = 0;
        $this->object->do_next_step();
        $this->assertEquals($this->object->playerWithInitiativeIdx,
                            $this->object->activePlayerIdx);

        $this->object->gameState = BMGameState::START_ROUND;
        $this->object->playerWithInitiativeIdx = 1;
        $this->object->do_next_step();
        $this->assertEquals($this->object->playerWithInitiativeIdx,
                            $this->object->activePlayerIdx);
    }

    /**
     * @covers BMGame::update_game_state_start_round
     */
    public function test_update_game_state_start_round() {
        $this->object->gameState = BMGameState::START_ROUND;
        $this->object->activeDieArrayArray = array(array(new BMDie), array(new BMDie));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_ROUND, $this->object->gameState);

        $this->object->gameState = BMGameState::START_ROUND;
        $this->object->activePlayerIdx = 0;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_start_turn
     */
    public function test_do_next_step_start_turn() {
        $this->object->gameState = BMGameState::START_TURN;

        $die1ValueStore = array();
        $die2ValueStore = array();
        $die4ValueStore = array();
        for ($runIdx = 0; $runIdx <= 50; $runIdx++) {
            $this->object->activePlayerIdx = 0;
            $die1 = BMDie::create(30, array());
            $die2 = BMDie::create(20, array());
            $die3 = BMDie::create(16, array());
            $die4 = BMDie::create(50, array());
            $die1->value = 1;
            $die2->value = 3;
            $die3->value = 2;
            $die4->value = 1;
            $die1->playerIdx = 0;
            $die2->playerIdx = 0;
            $die3->playerIdx = 1;
            $die4->playerIdx = 1;
            $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                       array($die3, $die4));
            $this->object->capturedDieArrayArray = array(array(), array());
            $this->object->attack = array(0, 1, array(1), array(0), 'Power');
            $this->object->do_next_step();
            $die1ValueStore[] = $die1->value;
            $die2ValueStore[] = $die2->value;
            $die4ValueStore[] = $die4->value;
        }
        // check that only dice involved in the attack have rerolled
        $this->assertEquals(1, max($die1ValueStore));
        $this->assertGreaterThan(1, count(array_flip($die2ValueStore)));
        $this->assertCount(1, $this->object->capturedDieArrayArray[0]);
        $this->assertTrue($die3->captured);
        $this->assertFalse($die1->has_flag('WasJustCaptured'));
        $this->assertFalse($die2->has_flag('WasJustCaptured'));
        $this->assertTrue($die3->has_flag('WasJustCaptured'));
        $this->assertFalse($die4->has_flag('WasJustCaptured'));
        $this->assertEquals(1, max($die4ValueStore));

        $dieArrayArray = $this->object->activeDieArrayArray;
        // set values manually
        $dieArrayArray[0][0]->value = 5;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[1][0]->value = 4;

        $this->assertEquals(5, $this->object->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $this->object->activeDieArrayArray[0][1]->value);
        $this->assertEquals(4, $this->object->activeDieArrayArray[1][0]->value);

        $this->object->attack = array(0, 1, array(0), array(0), "Power");
        $this->object->gameState = BMGameState::START_TURN;
        $this->object->activePlayerIdx = 0;
        $this->object->do_next_step();

        $this->assertCount(2, $this->object->activeDieArrayArray[0]);
        $this->assertCount(0, $this->object->activeDieArrayArray[1]);
        $this->assertCount(2, $this->object->capturedDieArrayArray[0]);

        $this->assertFalse($this->object->capturedDieArrayArray[0][0]->has_flag('WasJustCaptured'));
        $this->assertTrue($this->object->capturedDieArrayArray[0][1]->has_flag('WasJustCaptured'));

        // make sure actionLog has various attack parameters set correctly
        $this->assertTrue(count($this->object->actionLog) > 0);
        $arrayVal = array_values($this->object->actionLog);
        $attackLogEntry = end($arrayVal);
        $this->assertEquals('attack', $attackLogEntry->actionType);
        $this->assertEquals('Power', $attackLogEntry->params['attackType']);
    }

    /**
     * @covers BMGame::update_game_state_start_turn
     */
    public function test_update_game_state_start_turn() {
        $this->object->gameState = BMGameState::START_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $this->object->gameState);

        $this->object->gameState = BMGameState::START_TURN;
        $this->object->attack = array(0, 1, array(), array(), 'Pass');
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_TURN, $this->object->gameState);
        //james: need to check that the attack has been carried out
    }

    /**
     * @covers BMGame::do_next_step_end_turn
     */
    public function test_do_next_step_end_turn() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMGame::update_game_state_end_turn
     */
    public function test_update_game_state_end_turn() {
        $die1 = new BMDie;
        $die2 = new BMDie;

        // both players still have dice and both have not passed
        $this->object->playerIdArray = array(12345, 54321);
        $this->object->activeDieArrayArray = array(array($die1),
                                                   array($die2));
        $this->object->nRecentPasses = 0;
        $this->object->gameState = BMGameState::END_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $this->object->gameState);
        $this->assertTrue(isset($this->object->activeDieArrayArray));
        $this->assertEquals(0, $this->object->nRecentPasses);

        $this->object->playerIdArray = array(12345, 54321);
        $this->object->activeDieArrayArray = array(array($die1),
                                                   array($die2));
        $this->object->nRecentPasses = 1;
        $this->object->gameState = BMGameState::END_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $this->object->gameState);
        $this->assertTrue(isset($this->object->activeDieArrayArray));
        $this->assertEquals(1, $this->object->nRecentPasses);

        $this->object->playerIdArray = array(12345, 54321);
        $this->object->activeDieArrayArray = array(array($die1),
                                                   array($die2));
        $this->object->nRecentPasses = 1;
        $this->object->gameState = BMGameState::END_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $this->object->gameState);
        $this->assertTrue(isset($this->object->activeDieArrayArray));
        $this->assertEquals(1, $this->object->nRecentPasses);

        // both players have passed
        $this->object->activeDieArrayArray = array(array($die1),
                                                   array($die2));
        $this->object->nRecentPasses = 2;
        $this->object->gameState = BMGameState::END_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_ROUND, $this->object->gameState);

        // the first player has no dice
        $this->object->activeDieArrayArray = array(array($die1),
                                                   array());
        $this->object->nRecentPasses = 0;
        $this->object->gameState = BMGameState::END_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_ROUND, $this->object->gameState);

        // the second player has no dice
        $this->object->activeDieArrayArray = array(array(),
                                                   array($die2));
        $this->object->nRecentPasses = 0;
        $this->object->gameState = BMGameState::END_TURN;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_ROUND, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_end_round
     */
    public function test_do_next_step_end_round() {
        // test for end turn with one player without dice
        $this->object->playerIdArray = array(12345, 54321);
        $this->object->gameState = BMGameState::END_ROUND;
        $die = BMDie::create_from_recipe('(12)');
        $this->object->activeDieArrayArray = array(array(), array($die));
        $this->object->swingValueArrayArray = array(array('X' => 5), array('Y' => 2));
        $this->object->maxWins = 6;
        $this->object->gameScoreArrayArray = array(array(4,2,1), array(2,4,1));
        $this->object->playerWithInitiativeIdx = 1;
        $this->object->activePlayerIdx = 1;
        $this->object->nRecentPasses = 0;
        $this->object->do_next_step();
        $this->assertFalse(isset($this->object->activePlayerIdx));
        $this->assertFalse(isset($this->object->playerWithInitiativeIdx));
        $this->assertEquals(array(array('W' => 4, 'L' => 3, 'D' => 1),
                                  array('W' => 3, 'L' => 4, 'D' => 1)),
                            $this->object->gameScoreArrayArray);
        $this->assertEquals(array(array(), array('Y' => 2)),
                            $this->object->swingValueArrayArray);
        $this->assertTrue(count($this->object->actionLog) > 0);
        $arrayVal = array_values($this->object->actionLog);
        $roundEndLogEntry = end($arrayVal);
        $this->assertEquals('end_winner', $roundEndLogEntry->actionType);
        $this->assertEquals(8, $roundEndLogEntry->params['roundNumber']);

        // test for draw
        $this->object->playerIdArray = array(12345, 54321);
        $this->object->gameState = BMGameState::END_ROUND;
        $die1 = BMDie::create_from_recipe('(12)');
        $die2 = BMDie::create_from_recipe('(12)');
        $this->object->activeDieArrayArray = array(array($die1), array($die2));
        $this->object->swingValueArrayArray = array(array('X' => 5), array('Y' => 2));
        $this->object->maxWins = 6;
        $this->object->gameScoreArrayArray = array(array(4,2,1), array(2,4,1));
        $this->object->playerWithInitiativeIdx = 1;
        $this->object->activePlayerIdx = 1;
        $this->object->nRecentPasses = 0;
        $this->object->do_next_step();
        $this->assertFalse(isset($this->object->activePlayerIdx));
        $this->assertFalse(isset($this->object->playerWithInitiativeIdx));
        $this->assertEquals(array(array('W' => 4, 'L' => 2, 'D' => 2),
                                  array('W' => 2, 'L' => 4, 'D' => 2)),
                            $this->object->gameScoreArrayArray);
        $this->assertEquals(array(array('X' => 5), array('Y' => 2)),
                            $this->object->swingValueArrayArray);
        $this->assertTrue(count($this->object->actionLog) > 0);
        $arrayVal = array_values($this->object->actionLog);
        $roundEndLogEntry = end($arrayVal);
        $this->assertEquals('end_draw', $roundEndLogEntry->actionType);
        $this->assertEquals(8, $roundEndLogEntry->params['roundNumber']);

        // test for all pass at end of round
        $this->object->playerIdArray = array(12345, 54321);
        $this->object->playerWithInitiativeIdx = 1;
        $this->object->activePlayerIdx = 0;
        $die1 = BMDie::create(12);
        $die2 = BMDie::create(15);
        $this->object->activeDieArrayArray = array(array($die1), array($die2));
        $this->object->capturedDieArrayArray = array(array(), array());
        $this->object->nRecentPasses = 2;
        $this->object->maxWins = 3;
        $this->object->gameScoreArrayArray = array(array(1,2,1), array(2,1,1));
        $this->object->gameState = BMGameState::END_ROUND;
        $this->object->do_next_step();
        $this->assertFalse(isset($this->object->activePlayerIdx));
        $this->assertFalse(isset($this->object->playerWithInitiativeIdx));
        $this->assertFalse(isset($this->object->activeDieArrayArray));
        $this->assertEquals(array(array(), array()), $this->object->capturedDieArrayArray);
        $this->assertEquals(0, $this->object->nRecentPasses);
        $this->assertFalse(isset($this->object->roundScoreArray));
        $this->assertEquals(array(array('W' => 1, 'L' => 3, 'D' => 1),
                                  array('W' => 3, 'L' => 1, 'D' => 1)),
                            $this->object->gameScoreArrayArray);
        $this->assertTrue(count($this->object->actionLog) > 0);
        $arrayVal = array_values($this->object->actionLog);
        $roundEndLogEntry = end($arrayVal);
        $this->assertEquals('end_winner', $roundEndLogEntry->actionType);
        $this->assertEquals(5, $roundEndLogEntry->params['roundNumber']);
    }

    /**
     * @covers BMGame::update_game_state_end_round
     */
    public function test_update_game_state_end_round() {
        $this->object->gameState = BMGameState::END_ROUND;
        $this->object->gameScoreArrayArray = array(array(2,1,2), array(1,2,2));
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::LOAD_DICE_INTO_BUTTONS, $this->object->gameState);

        $this->object->activePlayerIdx = 0;
        $this->object->gameState = BMGameState::END_ROUND;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_ROUND, $this->object->gameState);

        unset($this->object->activePlayerIdx);
        $this->object->maxWins = 5;
        $this->object->gameScoreArrayArray = array(array(5,2,1),
                                                   array(2,5,1));
        $this->object->gameState = BMGameState::END_ROUND;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_GAME, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step_end_game
     */
    public function test_do_next_step_end_game() {
        $this->object->gameState = BMGameState::END_GAME;
        $this->object->activePlayerIdx = 1;
        $this->object->do_next_step();
        $this->assertFalse(isset($this->object->activePlayerIdx));
    }

    /**
     * @covers BMGame::update_game_state_end_game
     */
    public function test_update_game_state_end_game() {
        $this->object->gameState = BMGameState::END_GAME;
        $this->object->update_game_state();
        $this->assertEquals(BMGameState::END_GAME, $this->object->gameState);
    }

    /**
     * @covers BMGame::do_next_step
     */
    public function test_do_next_step_undefined() {
        unset($this->object->gameState);
        try {
            $this->object->do_next_step();
            $this->fail('Game state must be set.');
        }
        catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::update_game_state
     */
    public function test_update_game_state_not_set() {
        unset($this->object->gameState);
        try {
            $this->object->update_game_state();
            $this->fail('An undefined game state cannot be updated.');
        }
        catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::proceed_to_next_user_action
     */
    public function test_proceed_to_next_user_action() {
        $this->object->gameState = BMGameState::END_GAME;
        $this->object->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::END_GAME, $this->object->gameState);

        // james: need to complete this
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMGame::add_die
     */
    public function test_add_die() {
        $die1 = new BMDie;
        try {
            $this->object->add_die($die1);
            $this->fail('activeDieArrayArray must be set before a die can be added.');
        }
        catch (LogicException $expected) {
        }

        $this->object->activeDieArrayArray = array(array(), array());
        $die2 = new BMDie;
        $die2->ownerObject = $this->object;
        $die2->playerIdx = 1;
        $this->object->add_die($die2);
        $this->assertCount(1, $this->object->activeDieArrayArray[1]);
        $this->assertEquals($die2, $this->object->activeDieArrayArray[1][0]); // clone

        $die3 = new BMDie;
        $die3->ownerObject = $this->object;
        $die3->playerIdx = 1;
        $this->object->add_die($die3);
        $this->assertCount(2, $this->object->activeDieArrayArray[1]);
        $this->assertEquals($die2, $this->object->activeDieArrayArray[1][0]); // clone
        $this->assertEquals($die3, $this->object->activeDieArrayArray[1][1]); // clone
    }

    /**
     * @covers BMGame::capture_die
     */
    public function test_capture_die() {
        try {
            $this->object->capture_die(new BMDie);
            $this->fail('activeDieArrayArray must be set before capturing dice.');
        }
        catch (LogicException $expected) {
        }

        // valid capture
        $die = new BMDie;
        $this->object->activeDieArrayArray = array(array(new BMDie), array($die));
        $this->object->capture_die($die);

        // invalid capture
        $this->object->activeDieArrayArray = array(array(new BMDie), array(new BMDie));
        try {
            $this->object->capture_die(new BMDie);
            $this->fail('Captured die does not exist for the defender.');
        }
        catch (LogicException $expected) {
        }


    }

    /**
     * @covers BMGame::request_swing_values
     */
    public function test_request_swing_values() {
        $this->assertFalse(isset($this->object->swingRequestArrayArray));

        $die = new BMDieSwing;
        $swingtype = 'X';
        $playerIdx = 1;

        $this->object->request_swing_values($die, $swingtype, $playerIdx);
        $this->assertEquals(array(array(), array('X' => array($die))),
                            $this->object->swingRequestArrayArray);
    }

    /**
     * @covers BMGame::is_die_specified
     */
    public function test_is_die_specified() {
        // unspecified die
        $die = new BMDie;
        $this->assertFalse(BMGame::is_die_specified($die));

        // normal die
        $die = BMDie::create(12);
        $this->assertTrue(BMGame::is_die_specified($die));

//        // swing die
//        $die = new BMDie;
//        $die->mSides = 'X';
//        $die->mSkills = '';
//        $this->assertFalse(BMGame::is_die_specified($die));
//
//        // option die
//        $die = new BMDie;
//        $die->mSides = '8/12';
//        $die->mSkills = '';
//        $this->assertFalse(BMGame::is_die_specified($die));
    }

    /**
     * @covers BMGame::valid_attack_types
     */
    public function testValid_attack_types()
    {
        $die1 = new BMDie;
        $die1->init(4);
        $die1->value = 3;

        $die2 = new BMDie;
        $die2->init(20);
        $die2->value = 2;

        $game = new BMGame;
        $game->activeDieArrayArray = array(array($die1), array($die2));
        $game->activePlayerIdx = 0;

        $attackArray = $game->valid_attack_types();
        $this->assertTrue(is_array($attackArray));
        $this->assertEquals(1, count($attackArray));
        $this->assertTrue(in_array('Power', $attackArray));

        $die2->value = 3;
        $game->activeDieArrayArray = array(array($die1), array($die2));

        $attackArray = $game->valid_attack_types();
        $this->assertTrue(is_array($attackArray));
        $this->assertEquals(2, count($attackArray));
        $this->assertTrue(in_array('Power', $attackArray));
        $this->assertTrue(in_array('Skill', $attackArray));

        $die2->value = 4;
        $game->activeDieArrayArray = array(array($die1), array($die2));

        $attackArray = $game->valid_attack_types();
        $this->assertTrue(is_array($attackArray));
        $this->assertEquals(1, count($attackArray));
        $this->assertTrue(in_array('Pass', $attackArray));

        $die1->add_skill('Shadow');
        $die2->value = 4;
        $game->activeDieArrayArray = array(array($die1), array($die2));

        $attackArray = $game->valid_attack_types();
        $this->assertTrue(is_array($attackArray));
        $this->assertEquals(1, count($attackArray));
        $this->assertTrue(in_array('Shadow', $attackArray));

        $die2->value = 3;
        $game->activeDieArrayArray = array(array($die1), array($die2));

        $attackArray = $game->valid_attack_types();
        $this->assertTrue(is_array($attackArray));
        $this->assertEquals(2, count($attackArray));
        $this->assertTrue(in_array('Shadow', $attackArray));
        $this->assertTrue(in_array('Skill', $attackArray));

        $die2->value = 2;
        $game->activeDieArrayArray = array(array($die1), array($die2));

        $attackArray = $game->valid_attack_types();
        $this->assertTrue(is_array($attackArray));
        $this->assertEquals(1, count($attackArray));
        $this->assertTrue(in_array('Pass', $attackArray));
    }

    /**
     * @covers BMGame::reset_play_state
     */
    public function test_reset_game_state() {
        $method = new ReflectionMethod('BMGame', 'reset_play_state');
        $method->setAccessible(TRUE);

        $this->object->playerIdArray = array(12345, 54321);
        $this->object->activePlayerIdx = 1;
        $this->object->playerWithInitiativeIdx = 0;

        $die1 = BMDie::create(3);
        $die2 = BMDie::create(4);
        $BMDie3 = BMDie::create(5);
        $BMDie4 = BMDie::create(6);

        $this->object->activeDieArrayArray = array(array($die1), array($die2));
        $this->object->nRecentPasses = 2;
        $this->object->capturedDieArrayArray = array(array($BMDie3), array($BMDie4));
        $this->object->waitingOnActionArray = array(FALSE, TRUE);

        $method->invoke($this->object);
        $this->assertFalse(isset($this->object->activePlayerIdx));
        $this->assertFalse(isset($this->object->playerWithInitiativeIdx));
        $this->assertFalse(isset($this->object->activeDieArrayArray));
        $this->assertEquals(0, $this->object->nRecentPasses);
        $this->assertEquals(array(array(), array()), $this->object->capturedDieArrayArray);
        $this->assertFalse(isset($this->object->roundScoreArray));
        $this->assertEquals(array(FALSE, FALSE), $this->object->waitingOnActionArray);
        $this->assertFalse(isset($this->object->attack));
    }

    /**
     * @covers BMGame::update_active_player
     */
    public function test_update_active_player() {
        $method = new ReflectionMethod('BMGame', 'update_active_player');
        $method->setAccessible(TRUE);

        $game = new BMGame(1234,
                           array(1, 12, 21, 3, 15),
                           array('', '', '', '', ''),
                           3);
        $game->activePlayerIdx = 0;
        $method->invoke($game);
        $this->assertEquals(1, $game->activePlayerIdx);
        $method->invoke($game);
        $this->assertEquals(2, $game->activePlayerIdx);
        $method->invoke($game);
        $this->assertEquals(3, $game->activePlayerIdx);
        $method->invoke($game);
        $this->assertEquals(4, $game->activePlayerIdx);
        $method->invoke($game);
        $this->assertEquals(0, $game->activePlayerIdx);
    }

    /**
     * @covers BMGame::__construct
     * @covers BMGame::__get
     */
    public function test__construct() {
        // construct default empty game
        $game = new BMGame;
        $this->assertEquals(0, $game->gameId);
        $this->assertEquals(array(0, 0), $game->playerIdArray);
        $this->assertEquals(2, $game->nPlayers);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertNull($game->buttonArray[0]);
        $this->assertNull($game->buttonArray[1]);
        $this->assertEquals(3, $game->maxWins);
        // the gameScoreArrayArray must remain unset until BMGameState::APPLY_HANDICAPS
        $this->assertTrue(!isset($this->object->gameScoreArrayArray));
        $this->assertEquals(array(FALSE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(array(FALSE, FALSE), $game->isPrevRoundWinnerArray);

        // construct valid game
        $gameId = 2745;
        $playerIdArray = array(123, 456);
        $buttonRecipeArray = array('(4) (8) (12) (20)', '(4) (4) (4) (20)');
        $maxWins = 5;
        $game = new BMGame($gameId, $playerIdArray, $buttonRecipeArray, $maxWins);
        $this->assertEquals($playerIdArray, $game->playerIdArray);
        $this->assertEquals(2, $game->nPlayers);
        $this->assertEquals($buttonRecipeArray[0], $game->buttonArray[0]->recipe);
        $this->assertEquals($buttonRecipeArray[1], $game->buttonArray[1]->recipe);
        $this->assertEquals($maxWins, $game->maxWins);
        $this->assertEquals(array(FALSE, FALSE), $game->waitingOnActionArray);

        // construct invalid game
        $gameId = 2745;
        $playerIdArray = array(123, 456, 789);
        $buttonRecipeArray = array('(4) (8) (12) (20)', '(4) (4) (4) (20)');
        $maxWins = 5;
        try {
            $game = new BMGame($gameId, $playerIdArray, $buttonRecipeArray, $maxWins);
            $this->fail('The number of buttons must equal the number of players.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_attacker_player_idx() {
        $this->assertNull($this->object->attackerPlayerIdx);

        $this->object->attack = array(1, 0, array(), array(), 'Pass');
        $this->assertEquals(1, $this->object->attackerPlayerIdx);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_defender_player_idx() {
        $this->assertNull($this->object->defenderPlayerIdx);

        $this->object->attack = array(1, 0, array(), array(), 'Pass');
        $this->assertEquals(0, $this->object->defenderPlayerIdx);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_attacker_all_die_array() {
        $this->assertNull($this->object->attackerAllDieArray);

        $die1 = new BMDie;
        $die2 = new BMDie;
        $die3 = new BMDie;
        $die4 = new BMDie;
        $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                   array($die3, $die4));
        $this->object->attack = array(1, 0, array(), array(), 'Pass');
        $this->assertEquals(array($die3, $die4), $this->object->attackerAllDieArray);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_defender_all_die_array() {
        $this->assertNull($this->object->defenderAllDieArray);

        $die1 = new BMDie;
        $die2 = new BMDie;
        $die3 = new BMDie;
        $die4 = new BMDie;
        $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                   array($die3, $die4));
        $this->object->attack = array(1, 0, array(), array(), 'Pass');
        $this->assertEquals(array($die1, $die2), $this->object->defenderAllDieArray);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_attacker_attack_die_array() {
        $this->assertEquals(NULL, $this->object->attackerAttackDieArray);

        $this->object->activeDieArrayArray = array(array(), array());
        $this->object->attack = array(0, 1, array(), array(), 'Pass');
        $this->assertEquals(array(), $this->object->attackerAttackDieArray);

        $die1 = new BMDie;
        $die2 = new BMDie;
        $die3 = new BMDie;
        $die4 = new BMDie;

        $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                   array($die3, $die4));
        $this->object->attack = array(1, 0, array(1), array(0), 'Power');
        $this->assertEquals(array($die4), $this->object->attackerAttackDieArray);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_defender_attack_die_array() {
        $this->assertEquals(NULL, $this->object->defenderAttackDieArray);

        $this->object->attack = array(0, 1, array(), array(), 'Pass');
        $this->assertEquals(array(), $this->object->defenderAttackDieArray);

        $die1 = new BMDie;
        $die2 = new BMDie;
        $die3 = new BMDie;
        $die4 = new BMDie;

        $this->object->activeDieArrayArray = array(array($die1, $die2),
                                                   array($die3, $die4));
        $this->object->attack = array(1, 0, array(1), array(0), 'Power');
        $this->assertEquals(array($die2), $this->object->defenderAttackDieArray);
    }

    /**
     * @covers BMGame::get__roundNumber
     */
    public function testGet__roundNumber() {
        $this->object->maxWins = 4;

        $this->object->gameScoreArrayArray = array(array('W' => 0, 'L' => 0, 'D' => 0),
                                                   array('W' => 0, 'L' => 0, 'D' => 0));
        $this->assertEquals(1, $this->object->roundNumber);

        $this->object->gameScoreArrayArray = array(array('W' => 2, 'L' => 1, 'D' => 2),
                                                   array('W' => 1, 'L' => 2, 'D' => 2));
        $this->assertEquals(6, $this->object->roundNumber);

        $this->object->gameScoreArrayArray = array(array('W' => 4, 'L' => 1, 'D' => 2),
                                                   array('W' => 1, 'L' => 4, 'D' => 2));
        $this->assertEquals(7, $this->object->roundNumber);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_round_score_array() {
        $this->object->gameState = BMGameState::START_TURN;

        $die1 = BMDie::create(5);
        $die2 = BMDie::create(8);

        $die1->captured = FALSE;
        $this->object->activeDieArrayArray = array(array($die1), array());
        $this->object->capturedDieArrayArray = array(array(), array());
        $this->assertEquals(array(5/2, 0), $this->object->roundScoreArray);

        $die1->captured = FALSE;
        $die2->captured = FALSE;
        $this->object->activeDieArrayArray = array(array(), array($die1, $die2));
        $this->object->capturedDieArrayArray = array(array(), array());
        $this->assertEquals(array(0, 13/2), $this->object->roundScoreArray);

        $die1->captured = TRUE;
        $this->object->activeDieArrayArray = array(array(), array());
        $this->object->capturedDieArrayArray = array(array(), array($die1));
        $this->assertEquals(array(0, 5), $this->object->roundScoreArray);

        $die1->captured = TRUE;
        $die2->captured = TRUE;
        $this->object->activeDieArrayArray = array(array(), array());
        $this->object->capturedDieArrayArray = array(array(), array($die1, $die2));
        $this->assertEquals(array(0, 13), $this->object->roundScoreArray);
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get_nonexistent() {
        // check that a nonexistent property can be gotten gracefully
        $this->assertEquals(NULL, $this->object->nonsenseVariable);

        $button1 = new BMButton;
        $button2 = new BMButton;
        $this->object->buttonArray = array($button1, $button2);
        $this->assertEquals(array($button1, $button2), $this->object->buttonArray);
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_nPlayers() {
        // set is always invalid
        try {
            $this->object->nPlayers = 5;
            $this->fail('The number of players is automatically determined.');
        }
        catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_turnNumberInRound() {
        // set requires a non-negative integer
        try {
            $this->object->turnNumberInRound = 4.5;
            $this->fail('The round number must be an integer.');
        }
        catch (LogicException $expected) {
        }

        $this->object->turnNumberInRound = 5;
        $this->assertEquals(5, $this->object->turnNumberInRound);
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_game_id() {
        // valid set
        $this->object->gameId = 235;

        // invalid set
        try {
            $this->object->gameId = 'abc';
            $this->fail('The game ID must be a non-negative integer.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_player_idx_array() {
        $game = new BMGame(12345, array(123, 456), array('', ''), 3);

        // valid set
        $game->playerIdArray = array(345, 567);

        // invalid set
        try {
            $game->playerIdArray = array(123, 345, 567);
            $this->fail('The number of players cannot change during a game.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_active_player_idx() {
        $game = new BMGame(12345, array(123, 456), array('', ''), 3);

        // valid set
        $game->activePlayerIdx = 0;

        // invalid set
        try {
            $game->activePlayerIdx = 6;
            $this->fail('The active player index must be a valid index.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_player_with_initiative_idx() {
        $game = new BMGame(12345, array(123, 456), array('', ''), 3);

        // valid set
        $game->playerWithInitiativeIdx = 0;

        // invalid set
        try {
            $game->playerWithInitiativeIdx = 6;
            $this->fail('The index of the player with initiative must be valid.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }


    /**
     * @covers BMGame::__set
     */
    public function test__set_button_array() {
        $game = new BMGame(12345, array(123, 456), array('', ''), 3);

        $button1 = new BMButton;
        $button2 = new BMButton;
        $button3 = new BMButton;

        $button1->load('p(23)');
        $button2->load('s(58)');
        $button3->load('(4) (8)');

        // valid set
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals(0, $button1->playerIdx);
        $this->assertEquals(1, $button2->playerIdx);

        // invalid set
        try {
            $game->buttonArray = array($button1, $button2, $button3);
            $this->fail('The number of buttons must match the number of players.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $game->buttonArray = array('(45)', '(23)');
            $this->fail('The buttonArray must contain BMButtons.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_game_score_array_array() {
        $this->object->playerIdArray = array(12345, 54321);
        $die1 = new BMDie;
        $die2 = new BMDie;
        $this->object->dieArrayArray = array(array($die1), array($die2));
        $this->assertEquals($die1, $this->object->dieArrayArray[0][0]);
        $this->assertEquals($die2, $this->object->dieArrayArray[1][0]);

        $this->object->gameScoreArrayArray = array(array(2,1,1), array(1,2,1));

        try {
            $this->object->gameScoreArrayArray = array(array(2,1,1), array(1,2));
            $this->fail('W/L/D must be three numbers.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->gameScoreArrayArray = array(array(2,1,1));
            $this->fail('There must be the same number of players and game scores.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_active_die_array_array() {
        $die1 = new BMDie;
        $die2 = new BMDie;

        // valid set
        $this->object->activeDieArrayArray = array(array(), array());
        $this->object->activeDieArrayArray = array(array($die1), array($die2));

        // invalid set
        try {
            $this->object->activeDieArrayArray = 'abc';
            $this->fail('Active die array array must be an array.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->activeDieArrayArray = array(1, 2);
            $this->fail('Active die arrays must be arrays.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->activeDieArrayArray = array(array(1), array(2));
            $this->fail('Active die arrays must be arrays of BM dice.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_attack() {
        try {
            $this->object->attack = array(array(1), array(2));
            $this->fail('There must be exactly five elements in attack.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(array(1), 2, array(array(1,3)), array(array(2,5)), '');
            $this->fail('The first element of attack must be an integer.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, array(2), array(array(1,3)), array(array(2,5)), '');
            $this->fail('The second element of attack must be an integer.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, 1, array(array(1,3)), '');
            $this->fail('The third element of attack must be an array.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, array(array(1,3)), 12, '');
            $this->fail('The fourth element of attack must be an array.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, array(array(1,3)), 12, '');
            $this->fail('The third element of attack must be a 1-D array of indices.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, array(array(1,3)), 12, '');
            $this->fail('The third element of attack must be a 1-D array of indices.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, array('hello'), array(0), '');
            $this->fail('The third element of attack must be a 1-D array of indices.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, array(0), array('hello'), '');
            $this->fail('The fourth element of attack must be a 1-D array of indices.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->attack = array(1, 2, array(1), array(0), 'xxyyzz');
            $this->fail('The fifth element of attack must be a valid string.');
        } catch (InvalidArgumentException $expected) {
        }

        // check that attacker die indices are validated
        $this->object->activeDieArrayArray =
            array(array(new BMDie), array(new BMDie));
        try {
            $this->object->attack = array(0, 1, array(2), array(0), 'Pass');
            $this->fail('Invalid attacker die indices.');
        } catch (LogicException $expected) {
        }

        // check that defender die indices are validated
        $this->object->activeDieArrayArray =
            array(array(new BMDie), array(new BMDie));
        try {
            $this->object->attack = array(0, 1, array(0), array(2), 'Pass');
            $this->fail('Invalid defender die indices.');
        } catch (LogicException $expected) {
        }

        // check that a pass attack is valid
        $this->object->attack = array(0, 1, array(), array(), 'Pass');

        // check that a skill attack is valid
        $this->object->activeDieArrayArray =
            array(array(new BMDie, new BMDie), array(new BMDie));
        $this->object->attack = array(0, 1, array(0, 1), array(0), 'Skill');

        // check that an invalid attack is invalid
        try {
            $this->object->attack = array(1, 2, array(0, 1), 0, 'xxyyzz');
            $this->fail('Invalid attack type.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_attacker_attack_die_array() {
        try {
            $this->object->attackerAttackDieArray = array();
            $this->fail('AttackerAttackDieArray cannot be set.');
        } catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_defender_attack_die_array() {
        try {
            $this->object->defenderAttackDieArray = array();
            $this->fail('DefenderAttackDieArray cannot be set.');
        } catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_nRecentPasses() {
        // valid set
        $this->object->nRecentPasses = 1;

        // invalid set
        try {
            $this->object->nRecentPasses = -1;
            $this->fail('Pass status array must be non-negative.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->nRecentPasses = 5;
            $this->fail('Pass status array must be no more than the number of players.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->nRecentPasses = array(TRUE, TRUE, TRUE);
            $this->fail('Pass status array must be an integer.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_captured_die_array_array() {
        $die1 = new BMDie;
        $die2 = new BMDie;

        // valid set
        $this->object->capturedDieArrayArray = array(array(), array());
        $this->object->capturedDieArrayArray = array(array($die1), array($die2));

        // invalid set
        try {
            $this->object->capturedDieArrayArray = 'abc';
            $this->fail('Active die array array must be an array.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->capturedDieArrayArray = array(1, 2);
            $this->fail('Active die arrays must be arrays.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->capturedDieArrayArray = array(array(1), array(2));
            $this->fail('Active die arrays must be arrays of BM dice.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_round_score_array() {
        // all sets are invalid
        try {
            $this->object->roundScoreArray = array(22, 35);
            $this->fail('Round score array cannot be set directly.');
        } catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_max_wins() {
        // valid set
        $this->object->maxWins = 5;

        // invalid set
        try {
            $this->object->maxWins = 0;
            $this->fail('maxWins must be a positive integer.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->maxWins = 2.5;
            $this->fail('maxWins must be a positive integer.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_game_state() {
        // valid set
        $this->object->gameState = BMGameState::START_ROUND;

        // invalid set
        try {
            $this->object->gameState = 'abcd';
            $this->fail('Game state must be an integer.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->gameState = 0;
            $this->fail('Invalid game state.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set_waiting_on_action_array() {
        $game = new BMGame(12345, array(123, 456), array('', ''), 3);

        // valid set
        $game->waitingOnActionArray = array(TRUE, FALSE);

        // invalid set
        try {
            $game->waitingOnActionArray = array(TRUE, FALSE, FALSE);
            $this->fail('The action array must match the number of players.');
        } catch (InvalidArgumentException $expected) {
        }

        try {
            $game->waitingOnActionArray = array(1, 2);
            $this->fail('The action array must contain booleans.');
        } catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__isset
     */
    public function test__isset() {
        $button1 = new BMButton;
        $button2 = new BMButton;
        $this->object->buttonArray = array($button1, $button2);
        $this->assertTrue(isset($this->object->buttonArray));
    }

    /**
     * @covers BMGame::__unset
     */
    public function test__unset() {
        // check that a nonexistent property can be unset gracefully
        unset($this->object->rubbishVariable);

        $button1 = new BMButton;
        $button2 = new BMButton;
        $this->object->buttonArray = array($button1, $button2);
        unset($this->object->buttonArray);
        $this->assertFalse(isset($this->object->buttonArray));
    }


    /**
     * @covers BMGame::getJsonData
     * @covers BMGame::get_sideScoreArray
     */
    public function test__get_json_data() {
        $button1 = new BMButton;
        $button1->load('(8) (10) (12) (20) (X)', 'Bauer');

        $button2 = new BMButton;
        $button2->load('(4) (6) (8) (X) (X)', 'Stark');

        // load game
        $game1 = new BMGame(424242, array(123, 456));
        $game1->buttonArray = array($button1, $button2);
        $game1->waitingOnActionArray = array(FALSE, FALSE);
        $game1->proceed_to_next_user_action();

        // beginning of game
        // one player has specified the swing value, the other not
        $game1->swingValueArrayArray = array(array('X' => 5), array());
        $game1->proceed_to_next_user_action();

        $out1 = $game1->getJsonData(123);
        $this->assertEquals(424242, $out1['gameId']);
        $this->assertEquals(BMGameState::as_string(BMGameState::SPECIFY_DICE), $out1['gameState']);
        $this->assertEquals(1, $out1['roundNumber']);
        $this->assertEquals(3, $out1['maxWins']);
        $this->assertEquals(array(), $out1['gameSkillsInfo']);
        $this->assertNull($out1['activePlayerIdx']);
        $this->assertNull($out1['playerWithInitiativeIdx']);
        $this->assertEquals(123, $out1['playerDataArray'][0]['playerId']);
        $this->assertEquals(456, $out1['playerDataArray'][1]['playerId']);
        $this->assertEquals('Bauer', $out1['playerDataArray'][0]['button']['name']);
        $this->assertEquals('Stark', $out1['playerDataArray'][1]['button']['name']);
        $this->assertEquals(FALSE, $out1['playerDataArray'][0]['waitingOnAction']);
        $this->assertEquals(TRUE, $out1['playerDataArray'][1]['waitingOnAction']);
        $this->assertEquals(5, count($out1['playerDataArray'][0]['activeDieArray']));
        $this->assertEquals(5, count($out1['playerDataArray'][1]['activeDieArray']));
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(8)', 'description' => '8-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 10, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(10)', 'description' => '10-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 12, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(12)', 'description' => '12-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][2]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 20, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(20)', 'description' => '20-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 5, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(X)', 'description' => 'X Swing Die (with 5 sides)'),
            $out1['playerDataArray'][0]['activeDieArray'][4]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 4, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(4)', 'description' => '4-sided die'),
            $out1['playerDataArray'][1]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 6, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(6)', 'description' => '6-sided die'),
            $out1['playerDataArray'][1]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(8)', 'description' => '8-sided die'),
            $out1['playerDataArray'][1]['activeDieArray'][2]);
        // at the beginning of the game, all opponents' swing dice are hidden
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(X)', 'description' => 'X Swing Die'),
            $out1['playerDataArray'][1]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(X)', 'description' => 'X Swing Die'),
            $out1['playerDataArray'][1]['activeDieArray'][4]);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['capturedDieArray']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['capturedDieArray']);
        $this->assertEquals(array('X' => array(4, 20)), $out1['playerDataArray'][0]['swingRequestArray']);
        $this->assertEquals(array('X' => array(4, 20)), $out1['playerDataArray'][1]['swingRequestArray']);
        $this->assertEquals(array(), $out1['validAttackTypeArray']);
        $this->assertEquals(NULL, $out1['playerDataArray'][0]['roundScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][1]['roundScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][0]['sideScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][1]['sideScore']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out1['playerDataArray'][0]['gameScoreArray']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out1['playerDataArray'][1]['gameScoreArray']);


        $out2 = $game1->getJsonData(456);
        $this->assertEquals(424242, $out2['gameId']);
        $this->assertEquals(BMGameState::as_string(BMGameState::SPECIFY_DICE), $out2['gameState']);
        $this->assertEquals(1, $out2['roundNumber']);
        $this->assertEquals(3, $out2['maxWins']);
        $this->assertNull($out2['activePlayerIdx']);
        $this->assertNull($out2['playerWithInitiativeIdx']);
        $this->assertEquals(123, $out2['playerDataArray'][0]['playerId']);
        $this->assertEquals(456, $out2['playerDataArray'][1]['playerId']);
        $this->assertEquals('Bauer', $out2['playerDataArray'][0]['button']['name']);
        $this->assertEquals('Stark', $out2['playerDataArray'][1]['button']['name']);
        $this->assertEquals(FALSE, $out2['playerDataArray'][0]['waitingOnAction']);
        $this->assertEquals(TRUE, $out2['playerDataArray'][1]['waitingOnAction']);
        $this->assertEquals(5, count($out2['playerDataArray'][0]['activeDieArray']));
        $this->assertEquals(5, count($out2['playerDataArray'][1]['activeDieArray']));
        // at the beginning of the game, all opponents' swing dice are hidden
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(), 'recipe' => '(8)', 'description' => '8-sided die'),
            $out2['playerDataArray'][0]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 10, 'skills' => array(), 'properties' => array(), 'recipe' => '(10)', 'description' => '10-sided die'),
            $out2['playerDataArray'][0]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 12, 'skills' => array(), 'properties' => array(), 'recipe' => '(12)', 'description' => '12-sided die'),
            $out2['playerDataArray'][0]['activeDieArray'][2]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 20, 'skills' => array(), 'properties' => array(), 'recipe' => '(20)', 'description' => '20-sided die'),
            $out2['playerDataArray'][0]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(), 'recipe' => '(X)', 'description' => 'X Swing Die'),
            $out2['playerDataArray'][0]['activeDieArray'][4]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 4, 'skills' => array(), 'properties' => array(), 'recipe' => '(4)', 'description' => '4-sided die'),
            $out2['playerDataArray'][1]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 6, 'skills' => array(), 'properties' => array(), 'recipe' => '(6)', 'description' => '6-sided die'),
            $out2['playerDataArray'][1]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(), 'recipe' => '(8)', 'description' => '8-sided die'),
            $out2['playerDataArray'][1]['activeDieArray'][2]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(), 'recipe' => '(X)', 'description' => 'X Swing Die'),
            $out2['playerDataArray'][1]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(), 'recipe' => '(X)', 'description' => 'X Swing Die'),
            $out2['playerDataArray'][1]['activeDieArray'][4]);
        $this->assertEquals(array(), $out2['playerDataArray'][0]['capturedDieArray']);
        $this->assertEquals(array(), $out2['playerDataArray'][1]['capturedDieArray']);
        $this->assertEquals(array('X' => array(4, 20)), $out2['playerDataArray'][0]['swingRequestArray']);
        $this->assertEquals(array('X' => array(4, 20)), $out2['playerDataArray'][1]['swingRequestArray']);
        $this->assertEquals(array(), $out2['validAttackTypeArray']);
        $this->assertEquals(NULL, $out2['playerDataArray'][0]['roundScore']);
        $this->assertEquals(NULL, $out2['playerDataArray'][1]['roundScore']);
        $this->assertEquals(NULL, $out2['playerDataArray'][0]['sideScore']);
        $this->assertEquals(NULL, $out2['playerDataArray'][1]['sideScore']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out2['playerDataArray'][0]['gameScoreArray']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out2['playerDataArray'][1]['gameScoreArray']);

        // beginning of game
        // both players have specified the swing value
        $game1->swingValueArrayArray = array(array('X' => 5), array('X' => 7));
        $game1->proceed_to_next_user_action();

        $out3 = $game1->getJsonData(123);
        $this->assertEquals(424242, $out3['gameId']);
        $this->assertEquals(BMGameState::as_string(BMGameState::START_TURN), $out3['gameState']);
        $this->assertTrue(count($out3['validAttackTypeArray']) > 0,
            "validAttackTypeArray should contain at least one attack type");
        foreach ($out3['validAttackTypeArray'] as $idx => $attackType) {
            $this->assertTrue(is_int($idx), "validAttackTypeArray keys should be indices");
            $this->assertTrue(in_array($attackType, array("Power", "Skill", "Pass")),
                "validAttackTypeArray values should be in known attack set for these buttons");
        }
        $this->assertEquals(1, $out3['roundNumber']);
        $this->assertEquals(3, $out3['maxWins']);
        $this->assertTrue(isset($out3['activePlayerIdx']));
        $this->assertEquals(
            $out3['activePlayerIdx'],
            $out3['playerWithInitiativeIdx']
        );
        $this->assertEquals(123, $out3['playerDataArray'][0]['playerId']);
        $this->assertEquals(456, $out3['playerDataArray'][1]['playerId']);
        $this->assertEquals('Bauer', $out3['playerDataArray'][0]['button']['name']);
        $this->assertEquals('Stark', $out3['playerDataArray'][1]['button']['name']);
        $this->assertEquals(0 === $out3['activePlayerIdx'], $out3['playerDataArray'][0]['waitingOnAction']);
        $this->assertEquals(1 === $out3['activePlayerIdx'], $out3['playerDataArray'][1]['waitingOnAction']);
        $this->assertEquals(5, count($out3['playerDataArray'][0]['activeDieArray']));
        $this->assertEquals(5, count($out3['playerDataArray'][1]['activeDieArray']));
        $this->assertTrue(isset($out3['playerDataArray'][0]['activeDieArray'][0]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][0]['activeDieArray'][1]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][0]['activeDieArray'][2]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][0]['activeDieArray'][3]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][0]['activeDieArray'][4]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][1]['activeDieArray'][0]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][1]['activeDieArray'][1]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][1]['activeDieArray'][2]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][1]['activeDieArray'][3]['value']));
        $this->assertTrue(isset($out3['playerDataArray'][1]['activeDieArray'][4]['value']));
        $this->assertEquals(8, $out3['playerDataArray'][0]['activeDieArray'][0]['sides']);
        $this->assertEquals(10, $out3['playerDataArray'][0]['activeDieArray'][1]['sides']);
        $this->assertEquals(12, $out3['playerDataArray'][0]['activeDieArray'][2]['sides']);
        $this->assertEquals(20, $out3['playerDataArray'][0]['activeDieArray'][3]['sides']);
        $this->assertEquals(5, $out3['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertEquals(4, $out3['playerDataArray'][1]['activeDieArray'][0]['sides']);
        $this->assertEquals(6, $out3['playerDataArray'][1]['activeDieArray'][1]['sides']);
        $this->assertEquals(8, $out3['playerDataArray'][1]['activeDieArray'][2]['sides']);
        $this->assertEquals(7, $out3['playerDataArray'][1]['activeDieArray'][3]['sides']);
        $this->assertEquals(7, $out3['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][0]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][1]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][2]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][3]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][4]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][0]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][1]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][2]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][3]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][4]['skills']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][0]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][1]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][2]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][3]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][0]['activeDieArray'][4]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][0]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][1]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][2]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][3]['properties']);
        $this->assertEquals(array(), $out3['playerDataArray'][1]['activeDieArray'][4]['properties']);
        $this->assertEquals('(8)', $out3['playerDataArray'][0]['activeDieArray'][0]['recipe']);
        $this->assertEquals('(10)', $out3['playerDataArray'][0]['activeDieArray'][1]['recipe']);
        $this->assertEquals('(12)', $out3['playerDataArray'][0]['activeDieArray'][2]['recipe']);
        $this->assertEquals('(20)', $out3['playerDataArray'][0]['activeDieArray'][3]['recipe']);
        $this->assertEquals('(X)', $out3['playerDataArray'][0]['activeDieArray'][4]['recipe']);
        $this->assertEquals('(4)', $out3['playerDataArray'][1]['activeDieArray'][0]['recipe']);
        $this->assertEquals('(6)', $out3['playerDataArray'][1]['activeDieArray'][1]['recipe']);
        $this->assertEquals('(8)', $out3['playerDataArray'][1]['activeDieArray'][2]['recipe']);
        $this->assertEquals('(X)', $out3['playerDataArray'][1]['activeDieArray'][3]['recipe']);
        $this->assertEquals('(X)', $out3['playerDataArray'][1]['activeDieArray'][4]['recipe']);
        $this->assertEquals('8-sided die', $out3['playerDataArray'][0]['activeDieArray'][0]['description']);
        $this->assertEquals('10-sided die', $out3['playerDataArray'][0]['activeDieArray'][1]['description']);
        $this->assertEquals('12-sided die', $out3['playerDataArray'][0]['activeDieArray'][2]['description']);
        $this->assertEquals('20-sided die', $out3['playerDataArray'][0]['activeDieArray'][3]['description']);
        $this->assertEquals('X Swing Die (with 5 sides)', $out3['playerDataArray'][0]['activeDieArray'][4]['description']);
        $this->assertEquals('4-sided die', $out3['playerDataArray'][1]['activeDieArray'][0]['description']);
        $this->assertEquals('6-sided die', $out3['playerDataArray'][1]['activeDieArray'][1]['description']);
        $this->assertEquals('8-sided die', $out3['playerDataArray'][1]['activeDieArray'][2]['description']);
        $this->assertEquals('X Swing Die (with 7 sides)', $out3['playerDataArray'][1]['activeDieArray'][3]['description']);
        $this->assertEquals('X Swing Die (with 7 sides)', $out3['playerDataArray'][1]['activeDieArray'][4]['description']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['capturedDieArray']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['capturedDieArray']);
        $this->assertEquals(array('X' => array(4, 20)), $out3['playerDataArray'][0]['swingRequestArray']);
        $this->assertEquals(array('X' => array(4, 20)), $out3['playerDataArray'][1]['swingRequestArray']);
        $this->assertEquals(27.5, $out3['playerDataArray'][0]['roundScore']);
        $this->assertEquals(16, $out3['playerDataArray'][1]['roundScore']);
        $this->assertEquals(7.7, $out3['playerDataArray'][0]['sideScore']);
        $this->assertEquals(-7.7, $out3['playerDataArray'][1]['sideScore']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out3['playerDataArray'][0]['gameScoreArray']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out3['playerDataArray'][1]['gameScoreArray']);

        $out4 = $game1->getJsonData(456);
        $this->assertEquals(5, $out4['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertEquals(7, $out4['playerDataArray'][1]['activeDieArray'][4]['sides']);

        // after one round has been played and tied
        // one player has specified the swing value, the other not
        $game2 = new BMGame(424242, array(123, 456));
        $game2->buttonArray = array($button1, $button2);
        $game2->waitingOnActionArray = array(FALSE, FALSE);
        $game2->proceed_to_next_user_action();
        $game2->gameScoreArrayArray = array(array(0, 0, 1), array(0, 0, 1));
        $game2->swingValueArrayArray = array(array('X' => 5), array());
        $game2->proceed_to_next_user_action();

        $out5 = $game2->getJsonData(123);
        $this->assertEquals(5, $out5['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out5['playerDataArray'][1]['activeDieArray'][4]['sides']);

        $out6 = $game2->getJsonData(456);
        $this->assertEquals(5, $out6['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out6['playerDataArray'][1]['activeDieArray'][4]['sides']);

        // after one round has been played and won
        // one player has specified the swing value, the other not
        $game2 = new BMGame(424242, array(123, 456));
        $game2->buttonArray = array($button1, $button2);
        $game2->waitingOnActionArray = array(FALSE, FALSE);
        $game2->proceed_to_next_user_action();
        $game2->gameScoreArrayArray = array(array(1, 0, 0), array(0, 1, 0));
        $game2->swingValueArrayArray = array(array('X' => 5), array());
        $game2->proceed_to_next_user_action();

        $out5 = $game2->getJsonData(123);
        $this->assertEquals(5, $out5['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out5['playerDataArray'][1]['activeDieArray'][4]['sides']);

        $out6 = $game2->getJsonData(456);
        $this->assertEquals(5, $out6['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out6['playerDataArray'][1]['activeDieArray'][4]['sides']);

        // after one round has been played and lost
        // one player has specified the swing value, the other not
        $game3 = new BMGame(424242, array(123, 456));
        $game3->buttonArray = array($button1, $button2);
        $game3->waitingOnActionArray = array(FALSE, FALSE);
        $game3->proceed_to_next_user_action();
        $game3->gameScoreArrayArray = array(array(0, 1, 0), array(1, 0, 0));
        $game3->swingValueArrayArray = array(array('X' => 5), array());
        $game3->proceed_to_next_user_action();

        $out5 = $game3->getJsonData(123);
        $this->assertEquals(5, $out5['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out5['playerDataArray'][1]['activeDieArray'][4]['sides']);

        $out6 = $game3->getJsonData(456);
        $this->assertEquals(5, $out6['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out6['playerDataArray'][1]['activeDieArray'][4]['sides']);

        // add test for button without swing dice
        $button1 = new BMButton;
        $button1->load('(8) (10) (12) (20) (4)', 'BauerAltered');

        $button2 = new BMButton;
        $button2->load('(4) (6) (8) (X) (X)', 'Stark');

        // load game
        $game4 = new BMGame(424242, array(123, 456));
        $game4->buttonArray = array($button1, $button2);
        $game4->waitingOnActionArray = array(FALSE, FALSE);
        $game4->proceed_to_next_user_action();

        // beginning of game
        // one player has specified the swing value, the other not
        $game4->swingValueArrayArray = array(array(), array('X' => 5));
        $game4->proceed_to_next_user_action();

        $out7 = $game4->getJsonData(123);
        $this->assertTrue(isset($out7['playerDataArray'][0]['swingRequestArray']));
        $this->assertTrue(isset($out7['playerDataArray'][1]['swingRequestArray']));
        $this->assertEquals(array(), $out7['playerDataArray'][0]['swingRequestArray']);
        $this->assertEquals(array('4', '20'), $out7['playerDataArray'][1]['swingRequestArray']['X']);
    }

    /**
     * @covers BMGame::getJsonData
     * @covers BMGame::get_sideScoreArray
     */
    public function test__getJsonData_twin_swing_visibility () {
        $button1 = new BMButton;
        $button1->load('(8) (10) (12) (20) (X)', 'Bauer');

        $button2 = new BMButton;
        $button2->load('(2,2) (4,4) (6,6) (10,10) (T,T)', 'Tweedledum+dee');

        // load game
        $game1 = new BMGame(424242, array(123, 456));
        $game1->buttonArray = array($button1, $button2);
        $game1->waitingOnActionArray = array(FALSE, FALSE);
        $game1->proceed_to_next_user_action();

        // beginning of game
        // twin swing value is specified, the other not
        $game1->swingValueArrayArray = array(array(), array('T' => 3));
        $game1->proceed_to_next_user_action();

        $out1 = $game1->getJsonData(123);
        $this->assertEquals(424242, $out1['gameId']);
        $this->assertEquals(BMGameState::as_string(BMGameState::SPECIFY_DICE), $out1['gameState']);
        $this->assertEquals(1, $out1['roundNumber']);
        $this->assertEquals(3, $out1['maxWins']);
        $this->assertNull($out1['activePlayerIdx']);
        $this->assertNull($out1['playerWithInitiativeIdx']);
        $this->assertEquals(123, $out1['playerDataArray'][0]['playerId']);
        $this->assertEquals(456, $out1['playerDataArray'][1]['playerId']);
        $this->assertEquals('Bauer', $out1['playerDataArray'][0]['button']['name']);
        $this->assertEquals('Tweedledum+dee', $out1['playerDataArray'][1]['button']['name']);
        $this->assertEquals(TRUE, $out1['playerDataArray'][0]['waitingOnAction']);
        $this->assertEquals(FALSE, $out1['playerDataArray'][1]['waitingOnAction']);
        $this->assertEquals(5, count($out1['playerDataArray'][0]['activeDieArray']));
        $this->assertEquals(5, count($out1['playerDataArray'][1]['activeDieArray']));
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(), 'recipe' => '(8)', 'description' => '8-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 10, 'skills' => array(), 'properties' => array(), 'recipe' => '(10)', 'description' => '10-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 12, 'skills' => array(), 'properties' => array(), 'recipe' => '(12)', 'description' => '12-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][2]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 20, 'skills' => array(), 'properties' => array(), 'recipe' => '(20)', 'description' => '20-sided die'),
            $out1['playerDataArray'][0]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(), 'recipe' => '(X)', 'description' => 'X Swing Die'),
            $out1['playerDataArray'][0]['activeDieArray'][4]);
        $this->assertEquals(
	    array('value' => NULL, 'sides' => 4, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(2,2)', 'description' => 'Twin Die (both with 2 sides)'),
            $out1['playerDataArray'][1]['activeDieArray'][0]);
        $this->assertEquals(
	    array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(4,4)', 'description' => 'Twin Die (both with 4 sides)'),
            $out1['playerDataArray'][1]['activeDieArray'][1]);
        $this->assertEquals(
	    array('value' => NULL, 'sides' => 12, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(6,6)', 'description' => 'Twin Die (both with 6 sides)'),
            $out1['playerDataArray'][1]['activeDieArray'][2]);
        $this->assertEquals(
	    array('value' => NULL, 'sides' => 20, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(10,10)', 'description' => 'Twin Die (both with 10 sides)'),
            $out1['playerDataArray'][1]['activeDieArray'][3]);
        // at the beginning of the game, all opponents' swing dice are hidden
        $this->assertEquals(
	    array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(T,T)', 'description' => 'Twin T Swing Die'),
            $out1['playerDataArray'][1]['activeDieArray'][4]);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['capturedDieArray']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['capturedDieArray']);
        $this->assertEquals(
            array('X' => array(4, 20)), $out1['playerDataArray'][0]['swingRequestArray']);
        $this->assertEquals(
            array('T' => array(2, 12)), $out1['playerDataArray'][1]['swingRequestArray']);
        $this->assertEquals(array(), $out1['validAttackTypeArray']);
        $this->assertEquals(NULL, $out1['playerDataArray'][0]['roundScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][1]['roundScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][0]['sideScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][1]['sideScore']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out1['playerDataArray'][0]['gameScoreArray']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out1['playerDataArray'][1]['gameScoreArray']);
    }

    /**
     * @covers BMGame::getJsonData
     */
    public function test__getJsonData_option () {
        $button1 = new BMButton;
        $button1->load('(8) (8) (2/12) (8/16) (20/24)', 'Apples');

        $button2 = new BMButton;
        $button2->load('(8) (10) (1/8) (6/12) (12/20)', 'Green Apple');

        // load game
        $game1 = new BMGame(424242, array(123, 456));
        $game1->buttonArray = array($button1, $button2);
        $game1->waitingOnActionArray = array(FALSE, FALSE);
        $game1->proceed_to_next_user_action();

        // beginning of game
        // option values of player 2 are specified
        $game1->optValueArrayArray = array(array(), array(2 => 8, 3 => 6, 4 => 20));
        $game1->proceed_to_next_user_action();

        $out1 = $game1->getJsonData(123);
        $this->assertEquals(424242, $out1['gameId']);
        $this->assertEquals(BMGameState::as_string(BMGameState::SPECIFY_DICE), $out1['gameState']);
        $this->assertEquals(1, $out1['roundNumber']);
        $this->assertEquals(3, $out1['maxWins']);
        $this->assertNull($out1['activePlayerIdx']);
        $this->assertNull($out1['playerWithInitiativeIdx']);
        $this->assertEquals(123, $out1['playerDataArray'][0]['playerId']);
        $this->assertEquals(456, $out1['playerDataArray'][1]['playerId']);
        $this->assertEquals('Apples', $out1['playerDataArray'][0]['button']['name']);
        $this->assertEquals('Green Apple', $out1['playerDataArray'][1]['button']['name']);
        $this->assertEquals(TRUE, $out1['playerDataArray'][0]['waitingOnAction']);
        $this->assertEquals(FALSE, $out1['playerDataArray'][1]['waitingOnAction']);
        $this->assertEquals(5, count($out1['playerDataArray'][0]['activeDieArray']));
        $this->assertEquals(5, count($out1['playerDataArray'][1]['activeDieArray']));
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][4]['value']);
        // at the beginning of the game, all opponents' option dice are hidden
        $this->assertEquals(8, $out1['playerDataArray'][0]['activeDieArray'][0]['sides']);
        $this->assertEquals(8, $out1['playerDataArray'][0]['activeDieArray'][1]['sides']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][2]['sides']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][3]['sides']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertEquals(8, $out1['playerDataArray'][1]['activeDieArray'][0]['sides']);
        $this->assertEquals(10, $out1['playerDataArray'][1]['activeDieArray'][1]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][2]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][3]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][0]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][1]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][2]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][3]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][4]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][0]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][1]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][2]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][3]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][4]['skills']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][0]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][1]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][2]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][3]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['activeDieArray'][4]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][0]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][1]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][2]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][3]['properties']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['activeDieArray'][4]['properties']);
        $this->assertEquals('(8)', $out1['playerDataArray'][0]['activeDieArray'][0]['recipe']);
        $this->assertEquals('(8)', $out1['playerDataArray'][0]['activeDieArray'][1]['recipe']);
        $this->assertEquals('(2/12)', $out1['playerDataArray'][0]['activeDieArray'][2]['recipe']);
        $this->assertEquals('(8/16)', $out1['playerDataArray'][0]['activeDieArray'][3]['recipe']);
        $this->assertEquals('(20/24)', $out1['playerDataArray'][0]['activeDieArray'][4]['recipe']);
        $this->assertEquals('(8)', $out1['playerDataArray'][1]['activeDieArray'][0]['recipe']);
        $this->assertEquals('(10)', $out1['playerDataArray'][1]['activeDieArray'][1]['recipe']);
        $this->assertEquals('(1/8)', $out1['playerDataArray'][1]['activeDieArray'][2]['recipe']);
        $this->assertEquals('(6/12)', $out1['playerDataArray'][1]['activeDieArray'][3]['recipe']);
        $this->assertEquals('(12/20)', $out1['playerDataArray'][1]['activeDieArray'][4]['recipe']);
        $this->assertEquals('8-sided die', $out1['playerDataArray'][0]['activeDieArray'][0]['description']);
        $this->assertEquals('8-sided die', $out1['playerDataArray'][0]['activeDieArray'][1]['description']);
        $this->assertEquals('Option Die (with 2 or 12 sides)', $out1['playerDataArray'][0]['activeDieArray'][2]['description']);
        $this->assertEquals('Option Die (with 8 or 16 sides)', $out1['playerDataArray'][0]['activeDieArray'][3]['description']);
        $this->assertEquals('Option Die (with 20 or 24 sides)', $out1['playerDataArray'][0]['activeDieArray'][4]['description']);
        $this->assertEquals('8-sided die', $out1['playerDataArray'][1]['activeDieArray'][0]['description']);
        $this->assertEquals('10-sided die', $out1['playerDataArray'][1]['activeDieArray'][1]['description']);
        $this->assertEquals('Option Die (with 1 or 8 sides)', $out1['playerDataArray'][1]['activeDieArray'][2]['description']);
        $this->assertEquals('Option Die (with 6 or 12 sides)', $out1['playerDataArray'][1]['activeDieArray'][3]['description']);
        $this->assertEquals('Option Die (with 12 or 20 sides)', $out1['playerDataArray'][1]['activeDieArray'][4]['description']);
        $this->assertEquals(array(), $out1['playerDataArray'][0]['capturedDieArray']);
        $this->assertEquals(array(), $out1['playerDataArray'][1]['capturedDieArray']);
        $this->assertEquals(
            array(2 => array(2, 12),
                  3 => array(8, 16),
                  4 => array(20, 24)), $out1['playerDataArray'][0]['optRequestArray']);
        $this->assertEquals(
            array(2 => array(1, 8),
                  3 => array(6, 12),
                  4 => array(12, 20)), $out1['playerDataArray'][1]['optRequestArray']);
        $this->assertEquals(array(), $out1['validAttackTypeArray']);
        $this->assertEquals(NULL, $out1['playerDataArray'][0]['roundScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][1]['roundScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][0]['sideScore']);
        $this->assertEquals(NULL, $out1['playerDataArray'][1]['sideScore']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out1['playerDataArray'][0]['gameScoreArray']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out1['playerDataArray'][1]['gameScoreArray']);

        $out2 = $game1->getJsonData(456);
        $this->assertEquals(424242, $out2['gameId']);
        $this->assertEquals(BMGameState::as_string(BMGameState::SPECIFY_DICE), $out2['gameState']);
        $this->assertEquals(1, $out2['roundNumber']);
        $this->assertEquals(3, $out2['maxWins']);
        $this->assertNull($out2['activePlayerIdx']);
        $this->assertNull($out2['playerWithInitiativeIdx']);
        $this->assertEquals(123, $out2['playerDataArray'][0]['playerId']);
        $this->assertEquals(456, $out2['playerDataArray'][1]['playerId']);
        $this->assertEquals('Apples', $out2['playerDataArray'][0]['button']['name']);
        $this->assertEquals('Green Apple', $out2['playerDataArray'][1]['button']['name']);
        $this->assertEquals(TRUE, $out2['playerDataArray'][0]['waitingOnAction']);
        $this->assertEquals(FALSE, $out2['playerDataArray'][1]['waitingOnAction']);
        $this->assertEquals(5, count($out2['playerDataArray'][0]['activeDieArray']));
        $this->assertEquals(5, count($out2['playerDataArray'][1]['activeDieArray']));
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(8)', 'description' => '8-sided die'),
            $out2['playerDataArray'][0]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(8)', 'description' => '8-sided die'),
            $out2['playerDataArray'][0]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(2/12)', 'description' => 'Option Die (with 2 or 12 sides)'),
            $out2['playerDataArray'][0]['activeDieArray'][2]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(8/16)', 'description' => 'Option Die (with 8 or 16 sides)'),
            $out2['playerDataArray'][0]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => NULL, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(20/24)', 'description' => 'Option Die (with 20 or 24 sides)'),
            $out2['playerDataArray'][0]['activeDieArray'][4]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(8)', 'description' => '8-sided die'),
            $out2['playerDataArray'][1]['activeDieArray'][0]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 10, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(10)', 'description' => '10-sided die'),
            $out2['playerDataArray'][1]['activeDieArray'][1]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 8, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(1/8)', 'description' => 'Option Die (with 8 sides)'),
            $out2['playerDataArray'][1]['activeDieArray'][2]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 6, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(6/12)', 'description' => 'Option Die (with 6 sides)'),
            $out2['playerDataArray'][1]['activeDieArray'][3]);
        $this->assertEquals(
            array('value' => NULL, 'sides' => 20, 'skills' => array(), 'properties' => array(),
                  'recipe' => '(12/20)', 'description' => 'Option Die (with 20 sides)'),
            $out2['playerDataArray'][1]['activeDieArray'][4]);
        $this->assertEquals(array(), $out2['playerDataArray'][0]['capturedDieArray']);
        $this->assertEquals(array(), $out2['playerDataArray'][1]['capturedDieArray']);
        $this->assertEquals(
            array(2 => array(2, 12),
                  3 => array(8, 16),
                  4 => array(20, 24)), $out2['playerDataArray'][0]['optRequestArray']);
        $this->assertEquals(
            array(2 => array(1, 8),
                  3 => array(6, 12),
                  4 => array(12, 20)), $out2['playerDataArray'][1]['optRequestArray']);
        $this->assertEquals(array(), $out2['validAttackTypeArray']);
        $this->assertEquals(NULL, $out2['playerDataArray'][0]['roundScore']);
        $this->assertEquals(NULL, $out2['playerDataArray'][1]['roundScore']);
        $this->assertEquals(NULL, $out2['playerDataArray'][0]['sideScore']);
        $this->assertEquals(NULL, $out2['playerDataArray'][1]['sideScore']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out2['playerDataArray'][0]['gameScoreArray']);
        $this->assertEquals(array('W' => 0, 'L' => 0, 'D' => 0), $out2['playerDataArray'][1]['gameScoreArray']);
    }

    /**
     * @coversNothing
     */
    public function test_full_soldiers_game() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(8) (10) (12) (20) (X)', 'Bauer');
        $this->assertEquals('Bauer', $button1->name);
        $this->assertEquals('(8) (10) (12) (20) (X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(8, $button1->dieArray[0]->max);
        $this->assertEquals(10, $button1->dieArray[1]->max);
        $this->assertEquals(12, $button1->dieArray[2]->max);
        $this->assertEquals(20, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);

        $button2 = new BMButton;
        $button2->load('(4) (6) (8) (X) (X)', 'Stark');
        $this->assertEquals('Stark', $button2->name);
        $this->assertEquals('(4) (6) (8) (X) (X)', $button2->recipe);
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(6, $button2->dieArray[1]->max);
        $this->assertEquals(8, $button2->dieArray[2]->max);
        $this->assertFalse(isset($button2->dieArray[3]->max));
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[3]);
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[3]->needsSwingValue);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);

        // load game
        $game = new BMGame(424242, array(123, 456), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);

        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('X' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice incorrectly
        $game->swingValueArrayArray = array(array('X' => 3), array('X' => 4));
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('X' => 4)),
                            $game->swingValueArrayArray);

        // specify swing dice partially
        $game->swingValueArrayArray = array(array('X' => 19), array());
        $game->proceed_to_next_user_action();
        $out1 = $game->getJsonData(123);
        $this->assertEquals(19, $out1['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][4]['value']);
        $out2 = $game->getJsonData(456);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][4]['value']);
        $this->assertEquals('X Swing Die',
                            $out2['playerDataArray'][0]['activeDieArray'][4]['description']);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 19), array('X' => 4));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][3]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][3]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 19), array('X' => 4)),
                            $game->swingValueArrayArray);
        $this->assertEquals(8,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(19, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(6,  $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(19, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][3]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);


        // round 1, turn 1
        // player 1: [8 10 12 20 19] showing [8 1 10 15 7], captured []
        // player 2: [4 6 8 4 4] showing [2 3 8 4 1], captured []
        // player 2 takes player 1's d10
        // check that the player with initiative is set as the attacking player
        $this->assertEquals($game->activePlayerIdx, $game->playerWithInitiativeIdx);

        // artificially set player 2 as winning initiative
        $game->playerWithInitiativeIdx = 1;
        $game->activePlayerIdx = 1;
        $game->waitingOnActionArray = array(FALSE, TRUE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 8;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[0][2]->value = 10;
        $dieArrayArray[0][3]->value = 15;
        $dieArrayArray[0][4]->value = 7;
        $dieArrayArray[1][0]->value = 2;
        $dieArrayArray[1][1]->value = 3;
        $dieArrayArray[1][2]->value = 8;
        $dieArrayArray[1][3]->value = 4;
        $dieArrayArray[1][4]->value = 1;

        $this->assertEquals(8, $game->activeDieArrayArray[0][0]->value);

        // perform attack
        $this->assertNULL($game->attack);
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][2]->value = 5;

        // round 1, turn 2
        // player 1: [8 12 20 19] showing [8 10 15 7], captured []
        // player 2: [4 6 8 4 4] showing [2 3 5 4 1], captured [10]
        // player 1 takes player 2's d8 with a power attack
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertFalse(isset($game->attack));

        $this->assertEquals(8, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(10, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(15, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(7, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(2, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(5, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][4]->value);

        // perform attack
        $this->assertNull($game->attack);
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(10, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(15, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(2, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][3]->value = 16;

        // round 1, turn 3
        // player 1: [8 12 20 19] showing [8 10 15 16], captured [8]
        // player 2: [4 6 4 4] showing [2 3 4 1], captured [10]
        // player 2 takes player 1's d8 with a skill attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(1, 2, 3), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Skill'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][1]->value = 1;
        $dieArrayArray[1][2]->value = 3;
        $dieArrayArray[1][3]->value = 2;

        // round 1, turn 4
        // player 1: [12 20 19] showing [10 15 16], captured [8]
        // player 2: [4 6 4 4] showing [2 1 3 2], captured [10 8]
        // player 1 takes player 2's d4 showing 3 with a power attack

        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][1]->value = 9;

        // round 1, turn 5
        // player 1: [12 20 19] showing [10 9 16], captured [8 4]
        // player 2: [4 6 4] showing [2 1 2], captured [10 8]
        // player 2 is forced to pass

        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(), // attackerAttackDieIdxArray
                              array(), // defenderAttackDieIdxArray
                              'Pass'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // round 1, turn 6
        // player 1: [12 20 19] showing [10 9 16], captured [8 4]
        // player 2: [4 6 4] showing [2 1 2], captured [10 8]
        // player 1 takes player 2's d6 with a power attack

        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertCount(3, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][1]->value = 18;

        // round 1, turn 7
        // player 1: [12 20 19] showing [10 18 16], captured [8 4 6]
        // player 2: [4 4] showing [2 2], captured [10 8]
        // player 2 is forced to pass

        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(), // attackerAttackDieIdxArray
                              array(), // defenderAttackDieIdxArray
                              'Pass'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertCount(3, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // round 1, turn 8
        // player 1: [12 20 19] showing [10 18 16], captured [8 4 6]
        // player 2: [4 4] showing [2 2], captured [10 8]
        // player 1 takes player 2's d4 with a power attack

        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(4, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][3]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[0][3]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][2]->value = 9;

        // round 1, turn 9
        // player 1: [12 20 19] showing [10 18 9], captured [8 4 6 4]
        // player 2: [4] showing [2], captured [10 8]
        // player 2 is forced to pass

        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(), // attackerAttackDieIdxArray
                              array(), // defenderAttackDieIdxArray
                              'Pass'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(4, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][3]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[0][3]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][1]->value);

        // round 1, turn 10
        // player 1: [12 20 19] showing [10 18 16], captured [8 4 6 4]
        // player 2: [4] showing [2], captured [10 8]
        // player 1 takes player 2's d4 with a power attack

        $this->assertFalse(isset($game->prevSwingValueArrayArray));
        $this->assertFalse(isset($game->prevOptValueArrayArray));

        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();

        // round 2
        $this->assertTrue(!isset($game->activePlayerIdx));
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertTrue(isset($game->prevSwingValueArrayArray));
        $this->assertEquals(array(array('X' => 19), array('X' => 4)), $game->prevSwingValueArrayArray);
        $this->assertFalse(isset($game->prevOptValueArrayArray));

        // perform end of round scoring
        $this->assertEquals(array(array('W' => 1, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 1, 'D' => 0)),
                            $game->gameScoreArrayArray);

        // reset dice
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(array(array('X' => 19), array('X' => NULL)),
                            $game->swingValueArrayArray);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][3]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertTrue($game->activeDieArrayArray[1][3]->needsSwingValue);
        $this->assertTrue($game->activeDieArrayArray[1][4]->needsSwingValue);

        $out3 = $game->getJsonData(123);
        $this->assertEquals(19, $out3['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out3['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertNull($out3['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out3['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out3['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out3['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out3['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out3['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out3['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out3['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out3['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out3['playerDataArray'][1]['activeDieArray'][4]['value']);
        $out4 = $game->getJsonData(456);
        $this->assertEquals(19, $out4['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out4['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertNull($out4['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out4['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out4['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out4['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out4['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out4['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out4['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out4['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out4['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out4['playerDataArray'][1]['activeDieArray'][4]['value']);

        // set swing die for player 2
        $game->swingValueArrayArray = array(array('X' => 19), array('X' => 7));
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $game->proceed_to_next_user_action();

        $this->assertFalse(isset($game->prevSwingValueArrayArray));
        $this->assertFalse(isset($game->prevOptValueArrayArray));

        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][3]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][3]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 19), array('X' => 7)),
                            $game->swingValueArrayArray);

        $this->assertEquals(8,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(19, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(6,  $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(7,  $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(7,  $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(19, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(7,  $game->activeDieArrayArray[1][3]->swingValue);
        $this->assertEquals(7,  $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);


        // round 2, turn 1
        // player 1: [8 10 12 20 19] showing [5 4 3 2 1], captured []
        // player 2: [4 6 8 7 7] showing [4 5 6 7 3], captured []
        // player 1 takes player 1's d8 with a skill attack of d12, d20, d19
        // check that the player with initiative is set as the attacking player
        $this->assertEquals($game->activePlayerIdx, $game->playerWithInitiativeIdx);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 5;
        $dieArrayArray[0][1]->value = 4;
        $dieArrayArray[0][2]->value = 3;
        $dieArrayArray[0][3]->value = 2;
        $dieArrayArray[0][4]->value = 1;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 5;
        $dieArrayArray[1][2]->value = 6;
        $dieArrayArray[1][3]->value = 7;
        $dieArrayArray[1][4]->value = 3;

        $this->assertEquals(5, $game->activeDieArrayArray[0][0]->value);

        // perform attack
        $this->assertNULL($game->attack);
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(2, 3, 4), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][2]->value = 12;
        $dieArrayArray[0][3]->value = 17;
        $dieArrayArray[0][4]->value = 18;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0, 1, 3), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][0]->value = 1;
        $dieArrayArray[1][1]->value = 2;
        $dieArrayArray[1][3]->value = 3;

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][1]->value = 2;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][1]->value = 4;

        // check active die values
        $this->assertEquals(8, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(20, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(17, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(19, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(18, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(6, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(4, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(7, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(7, $game->activeDieArrayArray[1][2]->value);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertCount(3, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 8;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(), // attackerAttackDieIdxArray
                              array(), // defenderAttackDieIdxArray
                              'Pass'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertCount(3, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(4, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][3]->max);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][3]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][1]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][1]->value = 2;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(2, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(4, $game->capturedDieArrayArray[0]);
        $this->assertCount(3, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[0][2]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][3]->max);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][3]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][1]->value);
        $this->assertEquals(20, $game->capturedDieArrayArray[1][2]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][2]->value);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][0]->value = 3;

        $this->assertEquals(8, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(18, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[1][0]->value);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $this->assertEquals(2, $game->maxWins);
        $this->assertEquals(array(39.5, 45), $game->roundScoreArray);

        $game->proceed_to_next_user_action();

        // check that we have correctly reached the end of the game
        $this->assertEquals(array(array('W' => 2, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 2, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(BMGameState::END_GAME, $game->gameState);
        $this->assertEquals(array(FALSE, FALSE), $game->waitingOnActionArray);
        $this->assertTrue(is_null($game->activeDieArrayArray));
    }

    /**
     * @coversNothing
     */
    public function test_poison_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('p(2) p(4) (12) (12) (V)', 'Bane');
        $this->assertEquals('p(2) p(4) (12) (12) (V)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(2, $button1->dieArray[0]->max);
        $this->assertEquals(4, $button1->dieArray[1]->max);
        $this->assertEquals(12, $button1->dieArray[2]->max);
        $this->assertEquals(12, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button1->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button1->dieArray[1]->hookList['score_value']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('V' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('V' => 7), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('V' => 7), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(2,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(7,  $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(7,  $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[0][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[0][1]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        $this->assertEquals(array(9.5, -2.5), $game->roundScoreArray);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[0][2]->value = 12;
        $dieArrayArray[0][3]->value = 12;
        $dieArrayArray[0][4]->value = 5;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(4), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(array('score_value'),
                            array_keys($game->capturedDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->capturedDieArrayArray[0][0]->hookList['score_value']);
        $this->assertEquals(array(-0.5, 17.5), $game->roundScoreArray);
    }

    /**
     * @coversNothing
     */
    public function test_value_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('v(2) v(4) v(6) v(8) v(10)', 'TestValue');
        $this->assertEquals('v(2) v(4) v(6) v(8) v(10)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(2, $button1->dieArray[0]->max);
        $this->assertEquals(4, $button1->dieArray[1]->max);
        $this->assertEquals(6, $button1->dieArray[2]->max);
        $this->assertEquals(8, $button1->dieArray[3]->max);
        $this->assertEquals(10, $button1->dieArray[4]->max);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[0]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[1]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[1]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[2]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[2]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[3]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[3]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[4]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $button1->dieArray[4]->hookList['capture']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array(), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(2,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(6,  $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][0]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][0]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][1]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][1]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][2]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][2]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][2]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][3]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][3]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][4]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][4]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $game->activeDieArrayArray[0][4]->hookList['capture']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 2;
        $dieArrayArray[0][3]->value = 2;
        $dieArrayArray[0][4]->value = 2;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        $this->assertEquals(array(4.5, -2.5), $game->roundScoreArray);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1, 2, 3), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->capturedDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillValue'),
                            $game->capturedDieArrayArray[0][0]->hookList['score_value']);
        $this->assertEquals(array('BMSkillValue'),
                            $game->capturedDieArrayArray[0][0]->hookList['capture']);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][1]->value = 3;
        $dieArrayArray[0][2]->value = 4;
        $dieArrayArray[0][3]->value = 4;

        $this->assertEquals(array(13, -12.5), $game->roundScoreArray);
    }

    /**
     * @coversNothing
     */
    public function test_null_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('n(2) n(4) n(6) n(8) n(10)', 'TestValue');
        $this->assertEquals('n(2) n(4) n(6) n(8) n(10)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(2, $button1->dieArray[0]->max);
        $this->assertEquals(4, $button1->dieArray[1]->max);
        $this->assertEquals(6, $button1->dieArray[2]->max);
        $this->assertEquals(8, $button1->dieArray[3]->max);
        $this->assertEquals(10, $button1->dieArray[4]->max);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[0]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[1]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[1]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[2]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[2]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[3]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[3]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[4]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $button1->dieArray[4]->hookList['capture']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array(), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(2,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(6,  $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][0]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][0]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][1]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][1]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][2]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][2]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][2]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][3]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][3]->hookList['capture']);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][4]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][4]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $game->activeDieArrayArray[0][4]->hookList['capture']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 2;
        $dieArrayArray[0][3]->value = 2;
        $dieArrayArray[0][4]->value = 2;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        $this->assertEquals(array(0, -2.5), $game->roundScoreArray);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1, 2, 3), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->capturedDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillNull'),
                            $game->capturedDieArrayArray[0][0]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull'),
                            $game->capturedDieArrayArray[0][0]->hookList['capture']);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][1]->value = 3;
        $dieArrayArray[0][2]->value = 4;
        $dieArrayArray[0][3]->value = 4;

        $this->assertEquals(array(0, -12.5), $game->roundScoreArray);
    }

    /**
     * @coversNothing
     */
    public function test_shadow_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('s(10) (12) s(20) s(X) s(X)', 'PeaceAltered');
        $this->assertEquals('s(10) (12) s(20) s(X) s(X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(10, $button1->dieArray[0]->max);
        $this->assertEquals(12, $button1->dieArray[1]->max);
        $this->assertEquals(20, $button1->dieArray[2]->max);
        $this->assertFalse(isset($button1->dieArray[3]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[3]);
        $this->assertTrue($button1->dieArray[3]->needsSwingValue);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[0]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[3]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[4]->hookList['attack_list']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 13), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][3]);
        $this->assertFalse($game->activeDieArrayArray[0][3]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 13), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(10, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $game->activeDieArrayArray[0][0]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][2]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $game->activeDieArrayArray[0][2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $game->activeDieArrayArray[0][3]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][4]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $game->activeDieArrayArray[0][4]->hookList['attack_list']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 2;
        $dieArrayArray[0][3]->value = 13;
        $dieArrayArray[0][4]->value = 13;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        $this->assertEquals(array(34, -2.5), $game->roundScoreArray);

        // attempt invalid attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // check that normal dice cannot perform shadow attacks
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Shadow'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Shadow'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);

        $this->assertEquals(array(54, -12.5), $game->roundScoreArray);
    }

    /**
     * @coversNothing
     */
    public function test_swing_value_reset_at_end_of_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(1) (X)', 'Test1');
        $this->assertEquals('(1) (X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(2, $button1->dieArray);
        $this->assertEquals(1, $button1->dieArray[0]->max);
        $this->assertFalse(isset($button1->dieArray[1]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[1]);
        $this->assertTrue($button1->dieArray[1]->needsSwingValue);

        $button2 = new BMButton;
        $button2->load('(2) p(V)', 'Test2');
        $this->assertEquals('(2) p(V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(2, $button2->dieArray);
        $this->assertEquals(2, $button2->dieArray[0]->max);
        $this->assertFalse(isset($button2->dieArray[1]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[1]);
        $this->assertTrue($button2->dieArray[1]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[1]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 7), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][1]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][1]);
        $this->assertFalse($game->activeDieArrayArray[0][1]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][1]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 7), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(7,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][1]->max);

        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);

        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][1]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][1]->hookList['score_value']);

        $this->assertEquals(array(4, -10), $game->roundScoreArray);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[1][0]->value = 1;
        $dieArrayArray[1][1]->value = 1;

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][0]->value = 1;

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();

        $this->assertEquals(array(array('W' => 0, 'L' => 1, 'D' => 0),
                                  array('W' => 1, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(11, $game->activeDieArrayArray[1][1]->swingValue);
    }

    /**
     * @coversNothing
     */
    public function test_swing_value_reset_at_end_of_game() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(X)', 'Test1');

        $button2 = new BMButton;
        $button2->load('(V)', 'Test2');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 1);
        $game->buttonArray = array($button1, $button2);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 7), array('V' => 11));
        $game->proceed_to_next_user_action();

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;

        // artificially set player 2 as being active
        $game->activePlayerIdx = 1;
        $game->waitingOnActionArray = array(FALSE, TRUE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[1][0]->value = 2;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::END_GAME, $game->gameState);
        $this->assertEquals(array(array(), array()), $game->swingValueArrayArray);
    }

    /**
     * @coversNothing
     */
    public function test_speed_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) (8) z(20) z(20) (S)', 'Bennett');
        $this->assertEquals('(6) (8) z(20) z(20) (S)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(6, $button1->dieArray[0]->max);
        $this->assertEquals(8, $button1->dieArray[1]->max);
        $this->assertEquals(20, $button1->dieArray[2]->max);
        $this->assertEquals(20, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillSpeed'),
                            $button1->dieArray[2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillSpeed'),
                            $button1->dieArray[3]->hookList['attack_list']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('S' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('S' => 13), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('S' => 13), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(6,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][2]->hookList));
        $this->assertEquals(array('BMSkillSpeed'),
                            $game->activeDieArrayArray[0][2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillSpeed'),
                            $game->activeDieArrayArray[0][3]->hookList['attack_list']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 2;
        $dieArrayArray[0][3]->value = 13;
        $dieArrayArray[0][4]->value = 13;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        $this->assertEquals(array(33.5, -2.5), $game->roundScoreArray);

        // attempt invalid attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Speed'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // check that normal dice cannot perform speed attacks
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(4), // attackerAttackDieIdxArray
                              array(3, 4), // defenderAttackDieIdxArray
                              'Speed'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(3, 4), // defenderAttackDieIdxArray
                              'Speed'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(11, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][1]->value);

        $this->assertEquals(array(64.5, -18), $game->roundScoreArray);
    }

    /**
     * @coversNothing
     */
    public function test_berserk_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('B(4) (4) (10) Bp(20) (X)', 'PappyAltered');
        $this->assertEquals('B(4) (4) (10) Bp(20) (X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(4, $button1->dieArray[0]->max);
        $this->assertEquals(4, $button1->dieArray[1]->max);
        $this->assertEquals(10, $button1->dieArray[2]->max);
        $this->assertEquals(20, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('attack_list', 'capture'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillBerserk'),
                            $button1->dieArray[0]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillBerserk'),
                            $button1->dieArray[0]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'capture', 'score_value'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillBerserk'),
                            $button1->dieArray[3]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillBerserk'),
                            $button1->dieArray[3]->hookList['capture']);
        $this->assertEquals(array('BMSkillPoison'),
                            $button1->dieArray[3]->hookList['score_value']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) B(V)', 'CoilAltered');
        $this->assertEquals('p(4) (12) p(20) (20) B(V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);
        $this->assertEquals(array('attack_list', 'capture'),
                            array_keys($button2->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillBerserk'),
                            $button2->dieArray[4]->hookList['attack_list']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 13), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 13), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(4,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list', 'capture'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillBerserk'),
                            $game->activeDieArrayArray[0][0]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillBerserk'),
                            $game->activeDieArrayArray[0][0]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'capture', 'score_value'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillBerserk'),
                            $game->activeDieArrayArray[0][3]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillBerserk'),
                            $game->activeDieArrayArray[0][3]->hookList['capture']);
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[0][3]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);
        $this->assertEquals(array('attack_list', 'capture'),
                            array_keys($game->activeDieArrayArray[1][4]->hookList));
        $this->assertEquals(array('BMSkillBerserk'),
                            $game->activeDieArrayArray[1][4]->hookList['attack_list']);


        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 4;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 2;
        $dieArrayArray[0][3]->value = 13;
        $dieArrayArray[0][4]->value = 7;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 7;
        $dieArrayArray[1][2]->value = 3;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        $this->assertEquals(array(-4.5, -2.5), $game->roundScoreArray);

        // attempt invalid berserk attack
        $game->attack = array(0,          // attackerPlayerIdx
                              1,          // defenderPlayerIdx
                              array(3),   // attackerAttackDieIdxArray
                              array(3),   // defenderAttackDieIdxArray
                              'Berserk'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // attempt invalid skill attack
        $game->attack = array(0,          // attackerPlayerIdx
                              1,          // defenderPlayerIdx
                              array(0, 1),// attackerAttackDieIdxArray
                              array(3),   // defenderAttackDieIdxArray
                              'Skill'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // check that normal dice cannot perform berserk attacks
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(4), // attackerAttackDieIdxArray
                              array(0, 2), // defenderAttackDieIdxArray
                              'Berserk'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // perform attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(1, 3), // defenderAttackDieIdxArray
                              'Berserk'); // attackType

        $skillList = $game->activeDieArrayArray[0][3]->skillList;
        $this->assertArrayHasKey('Berserk', $skillList);
        $this->assertEquals('BMSkillBerserk', $skillList['Berserk']);
        $this->assertArrayHasKey('Poison', $skillList);
        $this->assertEquals('BMSkillPoison', $skillList['Poison']);

        $game->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);

        $game->do_next_step();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);

        $this->assertCount(2, $game->actionLog);
        $this->assertEquals('determine_initiative', $game->actionLog[0]->actionType);
        $this->assertEquals('attack', $game->actionLog[1]->actionType);
        $this->assertObjectHasAttribute('params', $game->actionLog[1]);
        $this->assertArrayHasKey('attackType', $game->actionLog[1]->params);
        $this->assertArrayHasKey('preAttackDice', $game->actionLog[1]->params);
        $this->assertArrayHasKey('postAttackDice', $game->actionLog[1]->params);
        $this->assertArrayHasKey('attacker', $game->actionLog[1]->params['postAttackDice']);
        $this->assertCount(1, $game->actionLog[1]->params['postAttackDice']['attacker']);
        $this->assertEquals(10, $game->actionLog[1]->params['postAttackDice']['attacker'][0]['max']);
        $this->assertEquals('p(10)', $game->actionLog[1]->params['postAttackDice']['attacker'][0]['recipe']);
        $this->assertLessThanOrEqual(10, $game->actionLog[1]->params['postAttackDice']['attacker'][0]['value']);
        $this->assertGreaterThanOrEqual(1, $game->actionLog[1]->params['postAttackDice']['attacker'][0]['value']);

        $game->update_game_state();
        $this->assertEquals(BMGameState::END_TURN, $game->gameState);

        $game->do_next_step();
        $game->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);

        $this->assertCount(2, $game->actionLog);
        $this->assertEquals('determine_initiative', $game->actionLog[0]->actionType);
        $this->assertEquals('attack', $game->actionLog[1]->actionType);
        $this->assertObjectHasAttribute('params', $game->actionLog[1]);
        $this->assertArrayHasKey('attackType', $game->actionLog[1]->params);
        $this->assertArrayHasKey('preAttackDice', $game->actionLog[1]->params);
        $this->assertArrayHasKey('postAttackDice', $game->actionLog[1]->params);
        $this->assertArrayHasKey('attacker', $game->actionLog[1]->params['postAttackDice']);
        $this->assertCount(1, $game->actionLog[1]->params['postAttackDice']['attacker']);
        $this->assertEquals(10, $game->actionLog[1]->params['postAttackDice']['attacker'][0]['max']);
        $this->assertEquals('p(10)', $game->actionLog[1]->params['postAttackDice']['attacker'][0]['recipe']);
        $this->assertLessThanOrEqual(10, $game->actionLog[1]->params['postAttackDice']['attacker'][0]['value']);
        $this->assertGreaterThanOrEqual(1, $game->actionLog[1]->params['postAttackDice']['attacker'][0]['value']);

        $game->proceed_to_next_user_action();

        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][1]->value);

        $this->assertEquals(array('attack_list', 'capture', 'score_value'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[0][3]->hookList['score_value']);

        $skillList = $game->activeDieArrayArray[0][3]->skillList;
        $this->assertArrayNotHasKey('Berserk', $skillList);
        $this->assertArrayHasKey('Poison', $skillList);
        $this->assertEquals(10, $game->activeDieArrayArray[0][3]->max);

        $this->assertEquals(array(37.5, -18.5), $game->roundScoreArray);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][3]->value = 3;

        // perform attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(1, 2, 3), // defenderAttackDieIdxArray
                              'Berserk'); // attackType

        $skillList = $game->activeDieArrayArray[1][2]->skillList;
        $this->assertArrayHasKey('Berserk', $skillList);
        $this->assertEquals('BMSkillBerserk', $skillList['Berserk']);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][2]);

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(2, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(3, $game->capturedDieArrayArray[1]);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(7, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(4, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(2, $game->capturedDieArrayArray[1][1]->value);
        $this->assertEquals(10, $game->capturedDieArrayArray[1][2]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[1][2]->value);

        $skillList = $game->activeDieArrayArray[1][2]->skillList;
        $this->assertArrayNotHasKey('Berserk', $skillList);
        $this->assertNotInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][2]);
        $this->assertEquals(6, $game->activeDieArrayArray[1][2]->max);
        $this->assertTrue(isset($game->activeDieArrayArray[1][2]->value));

        $this->assertEquals(array(40.5, -12.0), $game->roundScoreArray);
    }

    /**
     * @coversNothing
     */
    public function test_trip_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('t(1) t(1) t(1) t(1) t(4)', 'TestButton');
        $this->assertEquals('t(1) t(1) t(1) t(1) t(4)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(1, $button1->dieArray[0]->max);
        $this->assertEquals(1, $button1->dieArray[1]->max);
        $this->assertEquals(1, $button1->dieArray[2]->max);
        $this->assertEquals(1, $button1->dieArray[3]->max);
        $this->assertEquals(4, $button1->dieArray[4]->max);

        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[0]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[0]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[0]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[1]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[1]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[1]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[2]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[2]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[2]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[3]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[3]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[3]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[4]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[4]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $button1->dieArray[4]->hookList['capture']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array(), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals(1,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(1,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(1,  $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(1,  $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][0]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][0]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][0]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][1]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][1]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][1]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][2]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][2]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][2]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][2]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][3]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][3]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][3]->hookList['capture']);
        $this->assertEquals(array('attack_list', 'initiative_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][4]->hookList));
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][4]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][4]->hookList['initiative_value']);
        $this->assertEquals(array('BMSkillTrip'),
                            $game->activeDieArrayArray[0][4]->hookList['capture']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // check that player 2 always wins initiative
        $this->assertEquals(1, $game->playerWithInitiativeIdx);
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);

        // check that normal dice cannot perform trip attacks
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Trip'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // artificially change active player to player 1
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // Artificially set die values.
        //
        // Note that the target die is artificially set to a value of zero so
        // that we can test for reroll if it is not taken
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[0][2]->value = 1;
        $dieArrayArray[0][3]->value = 1;
        $dieArrayArray[0][4]->value = 3;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 1;
        $dieArrayArray[1][4]->value = 7;

        $this->assertEquals(array(4.0, -2.5), $game->roundScoreArray);

        // attempt trip attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Trip');  // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertTrue((count($game->activeDieArrayArray[1]) == 5) ||
                          (count($game->activeDieArrayArray[1]) >= 4));
        switch (count($game->activeDieArrayArray[1])) {
            // die taken
            case 4:
                $this->assertCount(1, $game->capturedDieArrayArray[0]);
                $capturedDie = $game->capturedDieArrayArray[0][0];
                $this->assertEquals(1, $capturedDie->value);
                break;
            // die not taken
            case 5:
                $this->assertCount(0, $game->capturedDieArrayArray[0]);
                $uncapturedDie = $game->activeDieArrayArray[1][3];
                $this->assertGreaterThan(1, $uncapturedDie->value);
                break;
        }
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
    }

    /**
     * @coversNothing
     */
    public function test_trip_capture_not_triggered_on_non_trip_attack() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('t(1) t(1) t(1) t(1) t(4)', 'TestButton');

        $button2 = new BMButton;
        $button2->load('(99) (98) (97)', 'TestTarget');

        $game = new BMGame(234567, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        // artificially change active player to player 1
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // Artificially set die values.
        //
        // Note that the target die is artificially set to a value of zero so
        // that we can test for reroll if it is not taken
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[0][2]->value = 1;
        $dieArrayArray[0][3]->value = 1;
        $dieArrayArray[0][4]->value = 1;
        $dieArrayArray[1][0]->value = 2;
        $dieArrayArray[1][1]->value = 80;
        $dieArrayArray[1][2]->value = 80;

        // attempt skill attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0, 1), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();

        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertEquals(2, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(99, $game->capturedDieArrayArray[0][0]->max);
    }

    /**
     * @covers BMGame::proceed_to_next_user_action
     */
    public function test_all_pass() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(1)', 'Test1');

        $button2 = new BMButton;
        $button2->load('s(20)', 'Test2');

        // load game
        $game = new BMGame(987654, array(234, 567), array('', ''), 4);
        $game->buttonArray = array($button1, $button2);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[1][0]->value = 20;

        // artificially guarantee that the active player is player 1
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);

        // player 1 passes
        $game->attack = array(0, 1, array(), array(), 'Pass');
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(array(array('W' => 0, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(1, $game->nRecentPasses);

        // player 2 passes
        $game->attack = array(1, 0, array(), array(), 'Pass');
        $game->proceed_to_next_user_action();

        $this->assertEquals(array(array('W' => 0, 'L' => 1, 'D' => 0),
                                  array('W' => 1, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(0, $game->nRecentPasses);

        // test autopass
        $game->autopassArray = array(TRUE, TRUE);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[1][0]->value = 20;

        $game->proceed_to_next_user_action();

        // $game->proceed_to_next_user_action() stops at the first turn of a round
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('W' => 0, 'L' => 1, 'D' => 0),
                                  array('W' => 1, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[1][0]->value = 20;

        // artificially guarantee that the active player is player 1
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);

        // player 1 passes
        $game->attack = array(0, NULL, array(), array(), 'Pass');
        $game->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(1, $game->activePlayerIdx);

        $game->update_game_state();
        $this->assertEquals(BMGameState::END_TURN, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::END_TURN, $game->gameState);

        // player 2 autopasses
        $game->update_game_state();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);

        $this->assertEquals(array('attackerPlayerIdx' => 1,
                                  'defenderPlayerIdx' => NULL,
                                  'attackerAttackDieIdxArray' => array(),
                                  'defenderAttackDieIdxArray' => array(),
                                  'attackType' => 'Pass'),
                            $game->attack);

        $game->update_game_state();
        $this->assertEquals(BMGameState::END_TURN, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::END_TURN, $game->gameState);

        $game->update_game_state();
        $this->assertEquals(BMGameState::END_ROUND, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::END_ROUND, $game->gameState);

        $game->proceed_to_next_user_action(BMGameState::START_TURN);
        $game->do_next_step();
        $this->assertEquals(1, array_sum($game->waitingOnActionArray));

        $this->assertEquals(array(array('W' => 0, 'L' => 2, 'D' => 0),
                                  array('W' => 2, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(1, count($game->activeDieArrayArray[0]));
        $this->assertEquals(1, count($game->activeDieArrayArray[1]));
        $this->assertEquals(0, $game->nRecentPasses);
        if ($game->activeDieArrayArray[1][0]->value >= 2) {
            $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        }

        // check behaviour with only player 2 with autopass
        $game->autopassArray = array(FALSE, TRUE);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[1][0]->value = 20;

        // artificially guarantee that the active player is player 1
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('W' => 0, 'L' => 2, 'D' => 0),
                                  array('W' => 2, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(1, count($game->activeDieArrayArray[0]));
        $this->assertEquals(1, count($game->activeDieArrayArray[1]));
        $this->assertEquals(0, $game->nRecentPasses);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        // player 1 passes
        $game->attack = array(0, 1, array(), array(), 'Pass');
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('W' => 0, 'L' => 3, 'D' => 0),
                                  array('W' => 3, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertEquals(1, count($game->activeDieArrayArray[0]));
        $this->assertEquals(1, count($game->activeDieArrayArray[1]));
        $this->assertEquals(0, $game->nRecentPasses);
        if ($game->activeDieArrayArray[1][0]->value >= 2) {
            $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        }
    }

    /**
     * @coversNothing
     */
    public function test_queer_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('q(4) q(6) q(12) q(20) q(X)', 'Simon');
        $this->assertEquals('q(4) q(6) q(12) q(20) q(X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 4, $button1->dieArray[0]->max);
        $this->assertEquals( 6, $button1->dieArray[1]->max);
        $this->assertEquals(12, $button1->dieArray[2]->max);
        $this->assertEquals(20, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $button1->dieArray[0]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $button1->dieArray[1]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $button1->dieArray[2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $button1->dieArray[3]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $button1->dieArray[4]->hookList['attack_list']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 13), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 13), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 4, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 6, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(13, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][0]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $game->activeDieArrayArray[0][0]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $game->activeDieArrayArray[0][1]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][2]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $game->activeDieArrayArray[0][2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $game->activeDieArrayArray[0][3]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][4]->hookList));
        $this->assertEquals(array('BMSkillQueer'),
                            $game->activeDieArrayArray[0][4]->hookList['attack_list']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 3;
        $dieArrayArray[0][3]->value = 13;
        $dieArrayArray[0][4]->value = 13;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;
        $dieArrayArray[1][4]->value = 7;

        // attempt invalid power attack because of value
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // attempt invalid shadow attack because of value
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Shadow'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // attempt invalid shadow attack because of max
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Shadow'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // perform valid attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Shadow'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
    }

    /**
     * @covers BMGame::proceed_to_next_user_action
     */
    public function test_twin_die() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) (20) s(4,8) s(6,12) ps(6,20)', 'Cthulhu');
        $this->assertEquals('(4) (20) s(4,8) s(6,12) ps(6,20)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 4, $button1->dieArray[0]->max);
        $this->assertEquals(20, $button1->dieArray[1]->max);
        $this->assertEquals(12, $button1->dieArray[2]->max);
        $this->assertEquals(18, $button1->dieArray[3]->max);
        $this->assertEquals(26, $button1->dieArray[4]->max);
        $this->assertInstanceOf('BMDieTwin', $button1->dieArray[2]);
        $this->assertInstanceOf('BMDieTwin', $button1->dieArray[3]);
        $this->assertInstanceOf('BMDieTwin', $button1->dieArray[4]);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[2]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[3]->hookList['attack_list']);
        $this->assertEquals(array('score_value', 'attack_list'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button1->dieArray[4]->hookList['score_value']);
        $this->assertEquals(array('BMSkillShadow'),
                            $button1->dieArray[4]->hookList['attack_list']);

        $button2 = new BMButton;
        $button2->load('(20) (20) (20) (V,V)', 'Bill');
        $this->assertEquals('(20) (20) (20) (V,V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(4, $button2->dieArray);
        $this->assertEquals(20, $button2->dieArray[0]->max);
        $this->assertEquals(20, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertFalse(isset($button2->dieArray[3]->max));
        $this->assertInstanceOf('BMDieTwin', $button2->dieArray[3]);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][3]->dice[0]);
        $this->assertFalse($game->activeDieArrayArray[1][3]->dice[0]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][3]->dice[1]);
        $this->assertFalse($game->activeDieArrayArray[1][3]->dice[1]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array(), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][0]->min);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][1]->min);
        $this->assertEquals( 2, $game->activeDieArrayArray[0][2]->min);
        $this->assertEquals( 2, $game->activeDieArrayArray[0][3]->min);
        $this->assertEquals( 2, $game->activeDieArrayArray[0][4]->min);
        $this->assertEquals( 1, $game->activeDieArrayArray[1][0]->min);
        $this->assertEquals( 1, $game->activeDieArrayArray[1][1]->min);
        $this->assertEquals( 1, $game->activeDieArrayArray[1][2]->min);
        $this->assertEquals( 2, $game->activeDieArrayArray[1][3]->min);
        $this->assertEquals( 4, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(18, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(26, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(22, $game->activeDieArrayArray[1][3]->max);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 3;
        $dieArrayArray[0][3]->value = 13;
        $dieArrayArray[0][4]->value = 13;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 12;
        $dieArrayArray[1][2]->value = 5;
        $dieArrayArray[1][3]->value = 6;

        // perform valid attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Shadow'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(22, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(6, $game->capturedDieArrayArray[0][0]->value);
    }

    /**
     * @coversUpdate_game_state
     */
    public function test_focus_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) f(6) (10) f(12) (20)', 'Kakita');
        $this->assertEquals('(6) f(6) (10) f(12) (20)', $button1->recipe);

        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 6, $button1->dieArray[0]->max);
        $this->assertEquals( 6, $button1->dieArray[1]->max);
        $this->assertEquals(10, $button1->dieArray[2]->max);
        $this->assertEquals(12, $button1->dieArray[3]->max);
        $this->assertEquals(20, $button1->dieArray[4]->max);
        $this->assertEquals(array('react_to_initiative'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillFocus'),
                            $button1->dieArray[1]->hookList['react_to_initiative']);
        $this->assertEquals(array('react_to_initiative'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillFocus'),
                            $button1->dieArray[3]->hookList['react_to_initiative']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));

        $game->update_game_state();
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);

        $game->update_game_state();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);

        // manually set die values
        // 6 6 10 12 20 vs 4 12 20 20 11
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[0][0]->value = 6;
        $activeDieArrayArray[0][1]->value = 6;
        $activeDieArrayArray[0][2]->value = 6;
        $activeDieArrayArray[0][3]->value = 6;
        $activeDieArrayArray[0][4]->value = 3;
        $activeDieArrayArray[1][0]->value = 4;
        $activeDieArrayArray[1][1]->value = 4;
        $activeDieArrayArray[1][2]->value = 4;
        $activeDieArrayArray[1][3]->value = 4;
        $activeDieArrayArray[1][4]->value = 3;

        $game->do_next_step();
        $this->assertEquals(BMGameState::DETERMINE_INITIATIVE, $game->gameState);
        $this->assertEquals(1, $game->playerWithInitiativeIdx);

        $game->update_game_state();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $game->do_next_step();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        $game->update_game_state();
        $this->assertEquals(BMGameState::REACT_TO_INITIATIVE, $game->gameState);

        $game->react_to_initiative(array('action' => 'focus',
                                         'playerIdx' => 0,
                                         'focusValueArray' => array(1 => 1,
                                                                    3 => 6)));
        $this->assertTrue($game->activeDieArrayArray[0][1]->dizzy);
        $this->assertFalse(isset($game->activeDieArrayArray[0][3]->dizzy));
        $game->do_next_step();
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);

        $dataArray = $game->getJsonData(234);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][0]['properties']);
        $this->assertEquals(array('dizzy'), $dataArray['playerDataArray'][0]['activeDieArray'][1]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][2]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][3]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][4]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][0]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][1]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][2]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][3]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][4]['properties']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][0]['skills']);
        $this->assertEquals(array('Focus'), $dataArray['playerDataArray'][0]['activeDieArray'][1]['skills']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][2]['skills']);
        $this->assertEquals(array('Focus'), $dataArray['playerDataArray'][0]['activeDieArray'][3]['skills']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][0]['activeDieArray'][4]['skills']);
        $this->assertEquals(array('Poison'), $dataArray['playerDataArray'][1]['activeDieArray'][0]['skills']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][1]['skills']);
        $this->assertEquals(array('Poison'), $dataArray['playerDataArray'][1]['activeDieArray'][2]['skills']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][3]['skills']);
        $this->assertEquals(array(), $dataArray['playerDataArray'][1]['activeDieArray'][4]['skills']);
        $skillInfoKeys = array_keys($dataArray['gameSkillsInfo']);
        sort($skillInfoKeys);
        $this->assertEquals(array('Focus', 'Poison'), $skillInfoKeys);

        // try to use the focus die in an attack when it is dizzy
        $game->attack = array(0, 1, array(1, 4), array(1), 'Skill');
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(5, count($game->activeDieArrayArray[1]));

        // use the non-dizzy focus die in an attack
        $game->attack = array(0, 1, array(3), array(1), 'Power');
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(4, count($game->activeDieArrayArray[1]));
        $this->assertFalse(isset($game->activeDieArrayArray[0][1]->dizzy));
    }

    /**
     * @coversNothing
     */
    public function test_konstant_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) k(6) (8) (12) (20)', 'Al-Khwarizmi');
        $this->assertEquals('(4) k(6) (8) (12) (20)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 4, $button1->dieArray[0]->max);
        $this->assertEquals( 6, $button1->dieArray[1]->max);
        $this->assertEquals( 8, $button1->dieArray[2]->max);
        $this->assertEquals(12, $button1->dieArray[3]->max);
        $this->assertEquals(20, $button1->dieArray[4]->max);
        $this->assertEquals(array('attack_list', 'add_skill', 'attack_values', 'hit_table'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillKonstant'),
                            $button1->dieArray[1]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillKonstant'),
                            $button1->dieArray[1]->hookList['add_skill']);
        $this->assertEquals(array('BMSkillKonstant'),
                            $button1->dieArray[1]->hookList['attack_values']);
        $this->assertEquals(array('BMSkillKonstant'),
                            $button1->dieArray[1]->hookList['hit_table']);
        $this->assertFalse($button1->dieArray[1]->doesReroll);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array(), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 4, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 6, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals( 8, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list', 'add_skill', 'attack_values', 'hit_table'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillKonstant'),
                            $game->activeDieArrayArray[0][1]->hookList['attack_list']);
        $this->assertEquals(array('BMSkillKonstant'),
                            $game->activeDieArrayArray[0][1]->hookList['add_skill']);
        $this->assertEquals(array('BMSkillKonstant'),
                            $game->activeDieArrayArray[0][1]->hookList['attack_values']);
        $this->assertEquals(array('BMSkillKonstant'),
                            $game->activeDieArrayArray[0][1]->hookList['hit_table']);
        $this->assertFalse($game->activeDieArrayArray[0][1]->doesReroll);

        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        // leave the konstant die value unchanged
        $konstantValue = $dieArrayArray[0][1]->value;
        $dieArrayArray[0][2]->value = 1;
        $dieArrayArray[0][3]->value = 12;
        $dieArrayArray[0][4]->value = 13;
        $dieArrayArray[1][0]->value = 1;
        $dieArrayArray[1][1]->value = $konstantValue;
        $dieArrayArray[1][2]->value = 12 + $konstantValue;
        $dieArrayArray[1][3]->value = 13 - $konstantValue;
        $dieArrayArray[1][4]->value = 7;

        // attempt invalid power attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // attempt invalid single-die skill attack because of value
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Skill'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // player 1 performs valid additive attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1, 3), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(12 + $konstantValue,
                            $game->capturedDieArrayArray[0][0]->value);

        // player 2 performs simple attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(4, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);

        // player 1 performs valid subtractive attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0, 3), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][1]->max);
        $this->assertEquals(13 - $konstantValue,
                            $game->capturedDieArrayArray[0][1]->value);
    }

    /**
     * @coversNothing
     */
    public function test_surrender() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) (4) (10) (12) (X)', 'Avis');

        $button2 = new BMButton;
        $button2->load('(6) (12) (20) (20) (X)', 'Hammer');

        // load game
        $game = new BMGame(424242, array(123, 456), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $game->swingValueArrayArray = array(array('X' => 7), array('X' => 19));
        $game->proceed_to_next_user_action();

        $game->playerWithInitiativeIdx = 1;
        $game->activePlayerIdx = 1;
        $game->waitingOnActionArray = array(FALSE, TRUE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 4;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 8;
        $dieArrayArray[0][3]->value = 12;
        $dieArrayArray[0][4]->value = 7;
        $dieArrayArray[1][0]->value = 4;
        $dieArrayArray[1][1]->value = 1;
        $dieArrayArray[1][2]->value = 8;
        $dieArrayArray[1][3]->value = 12;
        $dieArrayArray[1][4]->value = 17;

        // perform invalid surrender attack with dice selected
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Surrender'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);

        $this->assertEquals(array(array('W' => 0, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // perform invalid surrender attack with non-active player
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(),  // attackerAttackDieIdxArray
                              array(),  // defenderAttackDieIdxArray
                              'Surrender'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);

        $this->assertEquals(array(array('W' => 0, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 0, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // perform valid surrender attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(),  // attackerAttackDieIdxArray
                              array(),  // defenderAttackDieIdxArray
                              'Surrender'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);

        $this->assertEquals(array(array('W' => 1, 'L' => 0, 'D' => 0),
                                  array('W' => 0, 'L' => 1, 'D' => 0)),
                            $game->gameScoreArrayArray);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(array(TRUE, FALSE), $game->isPrevRoundWinnerArray);

        // make sure actionLog has various attack parameters set correctly
        $this->assertTrue(count($game->actionLog) > 0);
        $arrayVal = array_values($game->actionLog);
        $attackLogEntry = end($arrayVal);
        $this->assertEquals('end_winner', $attackLogEntry->actionType);
        $this->assertEquals(1, $attackLogEntry->params['roundNumber']);
        $this->assertEquals(array(TRUE, FALSE), $attackLogEntry->params['resultForced']);
    }

    /**
     * @coversNothing
     */
    public function test_morphing_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(4) m(12) (20) (20) (X)', 'Talus');
        $this->assertEquals('(4) m(12) (20) (20) (X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 4, $button1->dieArray[0]->max);
        $this->assertEquals(12, $button1->dieArray[1]->max);
        $this->assertEquals(20, $button1->dieArray[2]->max);
        $this->assertEquals(20, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertEquals(array('capture'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillMorphing'),
                            $button1->dieArray[1]->hookList['capture']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 7), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 7), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 4, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals( 7, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals( 7, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('capture'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillMorphing'),
                            $game->activeDieArrayArray[0][1]->hookList['capture']);

        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 12;
        $dieArrayArray[0][2]->value = 1;
        $dieArrayArray[0][3]->value = 20;
        $dieArrayArray[0][4]->value = 4;
        $dieArrayArray[1][0]->value = 1;
        $dieArrayArray[1][1]->value = 3;
        $dieArrayArray[1][2]->value = 12;
        $dieArrayArray[1][3]->value = 13;
        $dieArrayArray[1][4]->value = 7;

        // player 1 performs valid power attack with morphing die
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $this->assertEquals(12, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(20, $game->activeDieArrayArray[0][1]->max);
        $this->assertTrue($game->activeDieArrayArray[0][1]->has_skill('Morphing'));
        $this->assertFalse($game->activeDieArrayArray[0][1]->has_skill('Poison'));
    }

    /**
     * @coversNothing
     */
    public function test_doppelganger_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('D(4) D(6) D(10) nvD(12) D(X)', 'EnvyAltered');
        $this->assertEquals('D(4) D(6) D(10) nvD(12) D(X)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 4, $button1->dieArray[0]->max);
        $this->assertEquals( 6, $button1->dieArray[1]->max);
        $this->assertEquals(10, $button1->dieArray[2]->max);
        $this->assertEquals(12, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($button1->dieArray[3]->hookList));
        $this->assertEquals(array('BMSkillNull', 'BMSkillValue'),
                            $button1->dieArray[3]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull', 'BMSkillValue', 'BMSkillDoppelganger'),
                            $button1->dieArray[3]->hookList['capture']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 7), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 7), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 4, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 6, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals( 7, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals( 7, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals( 4, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('score_value', 'capture'),
                            array_keys($game->activeDieArrayArray[0][3]->hookList));
        $this->assertEquals(array('BMSkillNull', 'BMSkillValue'),
                            $game->activeDieArrayArray[0][3]->hookList['score_value']);
        $this->assertEquals(array('BMSkillNull', 'BMSkillValue', 'BMSkillDoppelganger'),
                            $game->activeDieArrayArray[0][3]->hookList['capture']);

        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 6;
        $dieArrayArray[0][2]->value = 1;
        $dieArrayArray[0][3]->value = 12;
        $dieArrayArray[0][4]->value = 4;
        $dieArrayArray[1][0]->value = 1;
        $dieArrayArray[1][1]->value = 3;
        $dieArrayArray[1][2]->value = 12;
        $dieArrayArray[1][3]->value = 13;
        $dieArrayArray[1][4]->value = 7;

        // player 1 performs valid power attack with doppelganger die
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(2), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $this->assertEquals(12, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(20, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertFalse($game->activeDieArrayArray[0][3]->has_skill('Doppelganger'));
        $this->assertFalse($game->activeDieArrayArray[0][3]->has_skill('Value'));
        $this->assertFalse($game->activeDieArrayArray[0][3]->has_skill('Null'));
        $this->assertTrue($game->activeDieArrayArray[0][3]->has_skill('Poison'));
    }

    /**
     * @coversNothing
     */
    public function test_stealth_round() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) d(6) (10) (12) dz(12)', 'White Tiger Altered');
        $this->assertEquals('(6) d(6) (10) (12) dz(12)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals( 6, $button1->dieArray[0]->max);
        $this->assertEquals( 6, $button1->dieArray[1]->max);
        $this->assertEquals(10, $button1->dieArray[2]->max);
        $this->assertEquals(12, $button1->dieArray[3]->max);
        $this->assertEquals(12, $button1->dieArray[4]->max);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[1]->hookList));
        $this->assertEquals(array('BMSkillStealth'),
                            $button1->dieArray[1]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillStealth', 'BMSkillSpeed'),
                            $button1->dieArray[4]->hookList['attack_list']);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array(), array('V' => 11));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array(), array('V' => 11)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 6, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 6, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals( 4, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(11, $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);

        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][1]->hookList));
        $this->assertEquals(array('BMSkillStealth'),
                            $game->activeDieArrayArray[0][1]->hookList['attack_list']);
        $this->assertEquals(array('attack_list'),
                            array_keys($game->activeDieArrayArray[0][4]->hookList));
        $this->assertEquals(array('BMSkillStealth', 'BMSkillSpeed'),
                            $game->activeDieArrayArray[0][4]->hookList['attack_list']);

        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($game->activeDieArrayArray[1][2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $game->activeDieArrayArray[1][2]->hookList['score_value']);

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 2;
        $dieArrayArray[0][2]->value = 3;
        $dieArrayArray[0][3]->value = 12;
        $dieArrayArray[0][4]->value = 8;
        $dieArrayArray[1][0]->value = 1;
        $dieArrayArray[1][1]->value = 3;
        $dieArrayArray[1][2]->value = 12;
        $dieArrayArray[1][3]->value = 13;
        $dieArrayArray[1][4]->value = 7;

        // invalid power attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(1), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // invalid single-die skill attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(4), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Skill'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // invalid single-die skill attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(4), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Speed'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // valid multidie skill attack
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(0, 1), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Skill'); // attackType
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[0][1]->value = 1;

        // invalid single die power attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // invalid single die skill attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(5, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);

        // valid multidie skill attack
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0, 3), // attackerAttackDieIdxArray
                              array(4), // defenderAttackDieIdxArray
                              'Skill'); // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
    }

    /**
     * @coversNothing
     */
    public function test_echo_vs_defined() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('', 'Echo');
        $this->assertEquals('', $button1->recipe);
        $this->assertCount(0, $button1->dieArray);

        $button2 = new BMButton;
        $button2->load('p(4) (12) p(20) (20) (V)', 'Coil');
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(4, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[0]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[0]->hookList['score_value']);
        $this->assertEquals(array('score_value'),
                            array_keys($button2->dieArray[2]->hookList));
        $this->assertEquals(array('BMSkillPoison'),
                            $button2->dieArray[2]->hookList['score_value']);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);

        $this->assertEquals('Echo', $game->buttonArray[0]->name);
        $this->assertEquals('p(4) (12) p(20) (20) (V)', $game->buttonArray[0]->recipe);
        $this->assertCount(5, $game->buttonArray[0]->dieArray);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('V' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

    }

    /**
     * @coversNothing
     */
    public function test_echo_vs_echo() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('', 'Echo');
        $this->assertEquals('', $button1->recipe);
        $this->assertCount(0, $button1->dieArray);

        $button2 = new BMButton;
        $button2->load('', 'Echo');
        $this->assertEquals('', $button2->recipe);
        $this->assertCount(0, $button2->dieArray);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);

        $this->assertEquals('Echo', $game->buttonArray[0]->name);
        $this->assertEquals('(4) (4) (10) (12) (X)', $game->buttonArray[0]->recipe);
        $this->assertCount(5, $game->buttonArray[0]->dieArray);
        $this->assertEquals('Echo', $game->buttonArray[1]->name);
        $this->assertEquals($game->buttonArray[0]->recipe, $game->buttonArray[1]->recipe);
        $this->assertCount(5, $game->buttonArray[1]->dieArray);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('X' => NULL)),
                            $game->swingValueArrayArray);
    }

    /**
     * @coversNothing
     */
    public function test_echo_swing_reset() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('', 'Echo');
        $this->assertEquals('', $button1->recipe);
        $this->assertCount(0, $button1->dieArray);

        $button2 = new BMButton;
        $button2->load('(V)', 'Minimal swing');
        $this->assertEquals('(V)', $button2->recipe);
        // check dice in $button2->dieArray are correct
        $this->assertCount(1, $button2->dieArray);
        $this->assertFalse(isset($button2->dieArray[0]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[0]);
        $this->assertTrue($button2->dieArray[0]->needsSwingValue);

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->buttonArray = array($button1, $button2);

        $this->assertEquals('Echo', $game->buttonArray[0]->name);
        $this->assertEquals('(V)', $game->buttonArray[0]->recipe);
        $this->assertCount(1, $game->buttonArray[0]->dieArray);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('V' => NULL), array('V' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('V' => 8), array('V' => 9));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][0]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][0]);
        $this->assertFalse($game->activeDieArrayArray[0][0]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][0]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('V' => 8), array('V' => 9)),
                            $game->swingValueArrayArray);
        $this->assertEquals( 8, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 9, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals( 8, $game->activeDieArrayArray[0][0]->swingValue);
        $this->assertEquals( 9, $game->activeDieArrayArray[1][0]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);


        // round 1, turn 1
        // player 1: [8] showing [1], captured []
        // player 2: [9] showing [9], captured []
        // player 1 passes

        // artificially set player 1 as winning initiative
        $game->playerWithInitiativeIdx = 0;
        $game->activePlayerIdx = 0;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 1;
        $dieArrayArray[1][0]->value = 9;

        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(9, $game->activeDieArrayArray[1][0]->value);

        // perform attack
        $this->assertNULL($game->attack);
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(),  // attackerAttackDieIdxArray
                              array(),  // defenderAttackDieIdxArray
                              'Pass');  // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(9, $game->activeDieArrayArray[1][0]->value);

        // round 1, turn 2
        // player 1: [8] showing [1], captured []
        // player 2: [9] showing [9], captured []
        // player 2 captures player 1's die

        $this->assertNULL($game->attack);
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(0), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $game->proceed_to_next_user_action();

        $this->assertEquals('(V)', $game->buttonArray[0]->recipe);
    }

    /**
     * The following unit tests ensure that the autoplay bug doesn't occur.
     *
     * @coversNothing
     */
    public function test_autoplay_bug() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(1) (1) (1)', 'Test1');

        $button2 = new BMButton;
        $button2->load('(1) (1) (1,1) (1,1)', 'Test2');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);
        $game->autopassArray = array(TRUE, TRUE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals( 1, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals( 1, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals( 2, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals( 2, $game->activeDieArrayArray[1][3]->max);

        // round 1, turn 1, player 1 to attack
        // [1 1 1] vs [1 1 2 2]
        $this->assertNULL($game->attack);
        $game->attack = array(0,           // attackerPlayerIdx
                              1,           // defenderPlayerIdx
                              array(0,1),  // attackerAttackDieIdxArray
                              array(2),    // defenderAttackDieIdxArray
                              'Skill');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(2, $game->capturedDieArrayArray[0][0]->value);

        // round 1, turn 2, player 2 to attack
        // [1 1 1] vs [1 1 2]
        $this->assertNULL($game->attack);
        $game->attack = array(1,           // attackerPlayerIdx
                              0,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Power');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(2, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);

        // round 1, turn 3, player 1 to attack
        // [1 1] vs [1 1 2]
        $this->assertNULL($game->attack);
        $game->attack = array(0,           // attackerPlayerIdx
                              1,           // defenderPlayerIdx
                              array(0,1),  // attackerAttackDieIdxArray
                              array(2),    // defenderAttackDieIdxArray
                              'Skill');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(2, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(2, $game->capturedDieArrayArray[0][1]->value);

        // round 1, turn 4, player 2 to attack
        // [1 1] vs [1 1]
        $this->assertNULL($game->attack);
        $game->attack = array(1,           // attackerPlayerIdx
                              0,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Power');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][1]->value);

        // round 1, turn 5, player 1 to attack
        // [1] vs [1 1]
        $this->assertNULL($game->attack);
        $game->attack = array(0,           // attackerPlayerIdx
                              1,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Skill');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(3, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][2]->value);

        // round 1, turn 6, player 2 to attack
        // [1] vs [1]
        $this->assertNULL($game->attack);
        $game->attack = array(1,           // attackerPlayerIdx
                              0,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Power');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
    }

    /**
     * The following unit tests ensure that the reserve swing bug doesn't occur.
     *
     * @coversNothing
     */
    public function test_reserve_swing_bug() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(1)', 'Test1');

        $button2 = new BMButton;
        $button2->load('(1) (X) r(Y)', 'Test2');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);
        $game->autopassArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(), $game->swingRequestArrayArray[0]);
        $this->assertTrue(array_key_exists('X', $game->swingRequestArrayArray[1]));
        $this->assertFalse(array_key_exists('Y', $game->swingRequestArrayArray[1]));
        $this->assertEquals(array(array(), array('X' => NULL)), $game->swingValueArrayArray);

        $game->swingValueArrayArray = array(array(), array('X' => 5));
        $game->proceed_to_next_user_action();

        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 1, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals( 5, $game->activeDieArrayArray[1][1]->max);

        // player 2 attacks and wins round 1
        $this->assertNULL($game->attack);
        $game->attack = array(1,           // attackerPlayerIdx
                              0,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Power');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
    }

    /**
     * The following unit tests ensure that swing requests are updated for
     * reserve dice that are added to the game.
     *
     * @coversNothing
     */
    public function test_reserve_swing_setting() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(1)', 'Test1');

        $button2 = new BMButton;
        $button2->load('(X) r(Y)', 'Test2');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);
        $game->autopassArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(), $game->swingRequestArrayArray[0]);
        $this->assertTrue(array_key_exists('X', $game->swingRequestArrayArray[1]));
        $this->assertFalse(array_key_exists('Y', $game->swingRequestArrayArray[1]));
        $this->assertEquals(array(array(), array('X' => NULL)), $game->swingValueArrayArray);

        $game->swingValueArrayArray = array(array(), array('X' => 5));
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 5, $game->activeDieArrayArray[1][0]->max);

        // manually set value of swing die to 1
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[1][0]->value = 1;
        $game->waitingOnActionArray = array(TRUE, FALSE);
        $game->activePlayerIdx = 0;

        // player 1 attacks and wins round 1
        $this->assertNULL($game->attack);
        $game->attack = array(0,           // attackerPlayerIdx
                              1,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Power');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::CHOOSE_RESERVE_DICE, $game->gameState);

        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[1][1]->selected = TRUE;
        $game->waitingOnActionArray = array(FALSE, FALSE);

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);

        $this->assertEquals(array(), $game->swingRequestArrayArray[0]);
        $this->assertTrue(array_key_exists('X', $game->swingRequestArrayArray[1]));
        $this->assertTrue(array_key_exists('Y', $game->swingRequestArrayArray[1]));
        $this->assertEquals(array(array(), array('X' => NULL, 'Y' => NULL)),
                            $game->swingValueArrayArray);
        $game->swingValueArrayArray = array(array(), array('X' => 5, 'Y' => 7));
        $game->proceed_to_next_user_action();

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(2, $game->activeDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(5, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals('X', $game->activeDieArrayArray[1][0]->swingType);
        $this->assertEquals('Y', $game->activeDieArrayArray[1][1]->swingType);
    }

    /**
     * The following unit tests ensure that berserk logging works correctly.
     *
     * @coversNothing
     */
    public function test_berserk_logging() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(1) (1)', 'Test1');

        $button2 = new BMButton;
        $button2->load('(1,1) B(Y)', 'Test2');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);
        $game->proceed_to_next_user_action();

        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(), $game->swingRequestArrayArray[0]);
        $this->assertArrayHasKey('Y', $game->swingRequestArrayArray[1]);
        $game->swingValueArrayArray = array(array(), array('Y' => 20));

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals( 1, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals( 2, $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[1][1]->max);

        // artificially set die value of berserk die for later
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[1][1]->value = 1;

        // round 1, turn 1, player 1 to attack
        // [1 1] vs [1 B(Y=20)]
        $this->assertNULL($game->attack);
        $game->attack = array(0,           // attackerPlayerIdx
                              1,           // defenderPlayerIdx
                              array(0,1),  // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Skill');    // attackType

        $game->proceed_to_next_user_action();
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(2, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(0, $game->capturedDieArrayArray[1]);
        $this->assertEquals(1, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(2, $game->capturedDieArrayArray[0][0]->value);

        // round 1, turn 2, player 2 to attack
        // [1 1] vs [B(Y=20)]
        $this->assertNULL($game->attack);
        $game->attack = array(1,           // attackerPlayerIdx
                              0,           // defenderPlayerIdx
                              array(0),    // attackerAttackDieIdxArray
                              array(0),    // defenderAttackDieIdxArray
                              'Berserk');  // attackType

        $game->proceed_to_next_user_action();

        $this->assertCount(3, $game->actionLog);
        $this->assertEquals('determine_initiative', $game->actionLog[0]->actionType);
        $this->assertEquals('attack', $game->actionLog[1]->actionType);
        $this->assertEquals('attack', $game->actionLog[2]->actionType);
        $this->assertObjectHasAttribute('params', $game->actionLog[2]);
        $this->assertArrayHasKey('attackType', $game->actionLog[2]->params);
        $this->assertArrayHasKey('preAttackDice', $game->actionLog[2]->params);
        $this->assertArrayHasKey('postAttackDice', $game->actionLog[2]->params);
        $this->assertArrayHasKey('attacker', $game->actionLog[2]->params['postAttackDice']);
        $this->assertCount(1, $game->actionLog[2]->params['postAttackDice']['attacker']);
        $this->assertEquals(10, $game->actionLog[2]->params['postAttackDice']['attacker'][0]['max']);
        $this->assertEquals('(10)', $game->actionLog[2]->params['postAttackDice']['attacker'][0]['recipe']);
        $this->assertLessThanOrEqual(10, $game->actionLog[2]->params['postAttackDice']['attacker'][0]['value']);
        $this->assertGreaterThanOrEqual(1, $game->actionLog[2]->params['postAttackDice']['attacker'][0]['value']);


        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(1, $game->activeDieArrayArray[0]);
        $this->assertCount(1, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(10, $game->activeDieArrayArray[1][0]->max);
        $this->assertFalse($game->activeDieArrayArray[1][0]->has_skill('Berserk'));
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
    }

    /**
     * The following unit tests ensure that declined courtesy auxiliary swing dice work correctly.
     *
     * @coversNothing
     */
    public function test_declined_courtesy_auxiliary_swing_dice() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) (8) (10) (10) r(4) r(4) r(10) r(20)', 'Ayeka');

        $button2 = new BMButton;
        $button2->load('(2) (4) s(10) s(20) (X) +s(X)', 'Merlin');

        // load game
        $game = new BMGame(535353, array(234, 567), array('', ''), 2);
        $game->buttonArray = array($button1, $button2);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::CHOOSE_AUXILIARY_DICE, $game->gameState);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);

        // decline auxiliary dice
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);

        $this->assertEquals(array(), $game->swingRequestArrayArray[0]);
        $this->assertTrue(array_key_exists('X', $game->swingRequestArrayArray[1]));
        $this->assertEquals(array(array(), array('X' => NULL)), $game->swingValueArrayArray);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);

        $game->swingValueArrayArray = array(array(), array('X' => 5));
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
    }

    /**
     * @coversNothing
     */
    public function test_option_game() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(8) (8) (2/12) (8/16) (20/24)', 'Apples');
        $this->assertEquals('Apples', $button1->name);
        $this->assertEquals('(8) (8) (2/12) (8/16) (20/24)', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(8, $button1->dieArray[0]->max);
        $this->assertEquals(8, $button1->dieArray[1]->max);
        $this->assertFalse(isset($button1->dieArray[2]->max));
        $this->assertFalse(isset($button1->dieArray[3]->max));
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieOption', $button1->dieArray[2]);
        $this->assertTrue($button1->dieArray[2]->needsOptionValue);
        $this->assertInstanceOf('BMDieOption', $button1->dieArray[3]);
        $this->assertTrue($button1->dieArray[3]->needsOptionValue);
        $this->assertInstanceOf('BMDieOption', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsOptionValue);

        $button2 = new BMButton;
        $button2->load('(8) (10) (1/8) (6/12) (12/20)', 'Green Apple');
        $this->assertEquals('Green Apple', $button2->name);
        $this->assertEquals('(8) (10) (1/8) (6/12) (12/20)', $button2->recipe);
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(8, $button2->dieArray[0]->max);
        $this->assertEquals(10, $button2->dieArray[1]->max);
        $this->assertFalse(isset($button2->dieArray[2]->max));
        $this->assertFalse(isset($button2->dieArray[3]->max));
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieOption', $button2->dieArray[2]);
        $this->assertTrue($button2->dieArray[2]->needsOptionValue);
        $this->assertInstanceOf('BMDieOption', $button2->dieArray[3]);
        $this->assertTrue($button2->dieArray[3]->needsOptionValue);
        $this->assertInstanceOf('BMDieOption', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsOptionValue);

        // load game
        $game = new BMGame(424242, array(123, 456), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);

        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array(2 => array(2, 12), 3 => array(8, 16), 4 => array(20, 24)),
                                  array(2 => array(1, 8), 3 => array(6, 12), 4 => array(12, 20))),
                            $game->optRequestArrayArray);

        // specify option dice incorrectly
        $game->activeDieArrayArray[0][2]->set_optionValue(6);
        $this->assertFalse(isset($game->activeDieArrayArray[0][2]->max));

        // specify option dice partially
        $game->activeDieArrayArray[0][2]->set_optionValue(12);
        $game->activeDieArrayArray[0][3]->set_optionValue(16);
        $game->activeDieArrayArray[0][4]->set_optionValue(20);
        $this->assertTrue(isset($game->activeDieArrayArray[0][2]->max));
        $this->assertTrue(isset($game->activeDieArrayArray[0][3]->max));
        $this->assertTrue(isset($game->activeDieArrayArray[0][4]->max));
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(16, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][4]->max);

        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $out1 = $game->getJsonData(123);
        $this->assertEquals(12, $out1['playerDataArray'][0]['activeDieArray'][2]['sides']);
        $this->assertEquals(16, $out1['playerDataArray'][0]['activeDieArray'][3]['sides']);
        $this->assertEquals(20, $out1['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][2]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][3]['sides']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out1['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out1['playerDataArray'][1]['activeDieArray'][4]['value']);
        $this->assertEquals('Option Die (with 20 sides)',
                            $out1['playerDataArray'][0]['activeDieArray'][4]['description']);

        $out2 = $game->getJsonData(456);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][2]['sides']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][3]['sides']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][2]['sides']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][3]['sides']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][4]['sides']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][0]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][1]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][2]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][3]['value']);
        $this->assertNull($out2['playerDataArray'][0]['activeDieArray'][4]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][0]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][1]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][2]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][3]['value']);
        $this->assertNull($out2['playerDataArray'][1]['activeDieArray'][4]['value']);
        $this->assertEquals('Option Die (with 20 or 24 sides)',
                            $out2['playerDataArray'][0]['activeDieArray'][4]['description']);

        // specify option dice fully
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(16, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][4]->max);

        $game->activeDieArrayArray[1][2]->set_optionValue(8);
        $game->activeDieArrayArray[1][3]->set_optionValue(6);
        $game->activeDieArrayArray[1][4]->set_optionValue(12);
        $this->assertTrue(isset($game->activeDieArrayArray[1][2]->max));
        $this->assertTrue(isset($game->activeDieArrayArray[1][3]->max));
        $this->assertTrue(isset($game->activeDieArrayArray[1][4]->max));
        $this->assertEquals(8, $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(6, $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][4]->max);

        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieOption', $game->activeDieArrayArray[0][2]);
        $this->assertInstanceOf('BMDieOption', $game->activeDieArrayArray[0][3]);
        $this->assertInstanceOf('BMDieOption', $game->activeDieArrayArray[0][4]);
        $this->assertInstanceOf('BMDieOption', $game->activeDieArrayArray[1][2]);
        $this->assertInstanceOf('BMDieOption', $game->activeDieArrayArray[1][3]);
        $this->assertInstanceOf('BMDieOption', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[0][2]->needsOptionValue);
        $this->assertFalse($game->activeDieArrayArray[0][3]->needsOptionValue);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsOptionValue);
        $this->assertFalse($game->activeDieArrayArray[1][2]->needsOptionValue);
        $this->assertFalse($game->activeDieArrayArray[1][3]->needsOptionValue);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsOptionValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(8,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(16, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(10, $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(8,  $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(6,  $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(12, $game->activeDieArrayArray[1][4]->max);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);
    }

    /**
     * @coversNothing
     */
    public function test_mood_swing_rounds() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('(6) (8) z(8) (20) (X)?', 'Gilly');
        $this->assertEquals('Gilly', $button1->name);
        $this->assertEquals('(6) (8) z(8) (20) (X)?', $button1->recipe);
        // check dice in $button1->dieArray are correct
        $this->assertCount(5, $button1->dieArray);
        $this->assertEquals(6, $button1->dieArray[0]->max);
        $this->assertEquals(8, $button1->dieArray[1]->max);
        $this->assertEquals(8, $button1->dieArray[2]->max);
        $this->assertEquals(20, $button1->dieArray[3]->max);
        $this->assertFalse(isset($button1->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button1->dieArray[4]);
        $this->assertTrue($button1->dieArray[4]->needsSwingValue);
        $this->assertTrue($button1->dieArray[4]->has_skill('Mood'));
        $this->assertEquals(array('pre_roll', 'add_skill'),
                            array_keys($button1->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillMood'),
                            $button1->dieArray[4]->hookList['pre_roll']);
        $this->assertEquals(array('BMSkillMood'),
                            $button1->dieArray[4]->hookList['add_skill']);

        $button2 = new BMButton;
        $button2->load('(3) (12) (20) (20) (X)?', 'Igor');
        $this->assertEquals('Igor', $button2->name);
        $this->assertEquals('(3) (12) (20) (20) (X)?', $button2->recipe);
        $this->assertCount(5, $button2->dieArray);
        $this->assertEquals(3, $button2->dieArray[0]->max);
        $this->assertEquals(12, $button2->dieArray[1]->max);
        $this->assertEquals(20, $button2->dieArray[2]->max);
        $this->assertEquals(20, $button2->dieArray[3]->max);
        $this->assertFalse(isset($button2->dieArray[4]->max));
        $this->assertInstanceOf('BMDieSwing', $button2->dieArray[4]);
        $this->assertTrue($button2->dieArray[4]->needsSwingValue);
        $this->assertTrue($button2->dieArray[4]->has_skill('Mood'));
        $this->assertEquals(array('pre_roll', 'add_skill'),
                            array_keys($button2->dieArray[4]->hookList));
        $this->assertEquals(array('BMSkillMood'),
                            $button2->dieArray[4]->hookList['pre_roll']);
        $this->assertEquals(array('BMSkillMood'),
                            $button2->dieArray[4]->hookList['add_skill']);

        // load game
        $game = new BMGame(424242, array(123, 456), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);

        $game->buttonArray = array($button1, $button2);
        $this->assertEquals($game, $game->buttonArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[0]->dieArray[4]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[0]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[1]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[2]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[3]->ownerObject);
        $this->assertEquals($game, $game->buttonArray[1]->dieArray[4]->ownerObject);

        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array('X' => NULL)),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 19), array('X' => 4));
        $game->proceed_to_next_user_action();
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[0][4]);
        $this->assertInstanceOf('BMDieSwing', $game->activeDieArrayArray[1][4]);
        $this->assertFalse($game->activeDieArrayArray[0][4]->needsSwingValue);
        $this->assertFalse($game->activeDieArrayArray[1][4]->needsSwingValue);

        $this->assertEquals(1, array_sum($game->waitingOnActionArray));
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(array('X' => 19), array('X' => 4)),
                            $game->swingValueArrayArray);
        $this->assertEquals(6,  $game->activeDieArrayArray[0][0]->max);
        $this->assertEquals(8, $game->activeDieArrayArray[0][1]->max);
        $this->assertEquals(8, $game->activeDieArrayArray[0][2]->max);
        $this->assertEquals(20, $game->activeDieArrayArray[0][3]->max);
        $this->assertEquals(19, $game->activeDieArrayArray[0][4]->max);
        $this->assertEquals(3,  $game->activeDieArrayArray[1][0]->max);
        $this->assertEquals(12,  $game->activeDieArrayArray[1][1]->max);
        $this->assertEquals(20,  $game->activeDieArrayArray[1][2]->max);
        $this->assertEquals(20,  $game->activeDieArrayArray[1][3]->max);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][4]->max);
        $this->assertEquals(19, $game->activeDieArrayArray[0][4]->swingValue);
        $this->assertEquals(4,  $game->activeDieArrayArray[1][4]->swingValue);

        $this->assertNotNull($game->activeDieArrayArray[0][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[0][4]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][0]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][1]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][2]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][3]->value);
        $this->assertNotNull($game->activeDieArrayArray[1][4]->value);


        // round 1, turn 1
        // player 1: [6 8 8 20 19] showing [3 1 8 15 7], captured []
        // player 2: [3 12 20 20 4] showing [2 3 8 4 1], captured []
        // player 2 takes player 1's d8 showing 1 with his/her d4 mood swing showing 1
        // check that the player with initiative is set as the attacking player
        $this->assertEquals($game->activePlayerIdx, $game->playerWithInitiativeIdx);

        // artificially set player 2 as winning initiative
        $game->playerWithInitiativeIdx = 1;
        $game->activePlayerIdx = 1;
        $game->waitingOnActionArray = array(FALSE, TRUE);
        // artificially set die values
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][0]->value = 3;
        $dieArrayArray[0][1]->value = 1;
        $dieArrayArray[0][2]->value = 8;
        $dieArrayArray[0][3]->value = 15;
        $dieArrayArray[0][4]->value = 7;
        $dieArrayArray[1][0]->value = 2;
        $dieArrayArray[1][1]->value = 3;
        $dieArrayArray[1][2]->value = 8;
        $dieArrayArray[1][3]->value = 4;
        $dieArrayArray[1][4]->value = 1;

        $this->assertEquals(3, $game->activeDieArrayArray[0][0]->value);

        // perform attack
        $this->assertNULL($game->attack);
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(4), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType

        $preAttackMoodMax = $game->activeDieArrayArray[1][4]->max;
        $game->proceed_to_next_user_action();
        $postAttackMoodMax = $game->activeDieArrayArray[1][4]->max;
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(5, $game->activeDieArrayArray[1]);
        $this->assertCount(0, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $doesMoodRerollMax = ($preAttackMoodMax != $postAttackMoodMax);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][4]->value = 4;

        // round 1, turn 2
        // player 1: [6 8 20 19] showing [3 8 15 7], captured []
        // player 2: [3 12 20 20 ?] showing [2 3 8 4 4], captured [10]
        // player 1 takes player 2's d12 with his/her mood swing d19
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertFalse(isset($game->attack));

        $this->assertEquals(3, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(8, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(15, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(7, $game->activeDieArrayArray[0][3]->value);
        $this->assertEquals(2, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(3, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(8, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][4]->value);

        // perform attack
        $this->assertNull($game->attack);
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(1), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $preAttackMoodMax = $game->activeDieArrayArray[0][3]->max;
        $game->proceed_to_next_user_action();
        $postAttackMoodMax = $game->activeDieArrayArray[0][3]->max;
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(4, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(1, $game->capturedDieArrayArray[1]);
        $this->assertEquals(3, $game->activeDieArrayArray[0][0]->value);
        $this->assertEquals(8, $game->activeDieArrayArray[0][1]->value);
        $this->assertEquals(15, $game->activeDieArrayArray[0][2]->value);
        $this->assertEquals(2, $game->activeDieArrayArray[1][0]->value);
        $this->assertEquals(8, $game->activeDieArrayArray[1][1]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][2]->value);
        $this->assertEquals(4, $game->activeDieArrayArray[1][3]->value);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);

        // artificially set value of rolled die
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[0][3]->value = 3;
        $doesMoodRerollMax = $doesMoodRerollMax ||
            ($preAttackMoodMax != $postAttackMoodMax);

        // round 1, turn 3
        // player 1: [6 8 20 ?] showing [3 8 15 3], captured [12]
        // player 2: [3 20 20 ?] showing [2 8 4 4], captured [10]
        // player 2 takes player 1's d6 with his/her mood swing die
        $game->attack = array(1,        // attackerPlayerIdx
                              0,        // defenderPlayerIdx
                              array(3), // attackerAttackDieIdxArray
                              array(0), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $preAttackMoodMax = $game->activeDieArrayArray[1][3]->max;
        $game->proceed_to_next_user_action();
        $postAttackMoodMax = $game->activeDieArrayArray[1][3]->max;
        $this->assertEquals(0, $game->activePlayerIdx);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(4, $game->activeDieArrayArray[1]);
        $this->assertCount(1, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(6, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[1][1]->value);

        $doesMoodRerollMax = $doesMoodRerollMax ||
            ($preAttackMoodMax != $postAttackMoodMax);

        // artificially set value of rolled dice
        $dieArrayArray = $game->activeDieArrayArray;
        $dieArrayArray[1][3]->value = 1;

        // round 1, turn 4
        // player 1: [8 20 ?] showing [8 15 3], captured [12]
        // player 2: [3 20 20 ?] showing [2 8 4 1], captured [10 6]
        // player 1 takes player 2's d? with his/her mood swing die
        $game->attack = array(0,        // attackerPlayerIdx
                              1,        // defenderPlayerIdx
                              array(2), // attackerAttackDieIdxArray
                              array(3), // defenderAttackDieIdxArray
                              'Power'); // attackType
        $preAttackMoodMax = $game->activeDieArrayArray[0][2]->max;
        $game->proceed_to_next_user_action();
        $postAttackMoodMax = $game->activeDieArrayArray[0][2]->max;
        $this->assertEquals(1, $game->activePlayerIdx);
        $this->assertEquals(array(FALSE, TRUE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertCount(3, $game->activeDieArrayArray[0]);
        $this->assertCount(3, $game->activeDieArrayArray[1]);
        $this->assertCount(2, $game->capturedDieArrayArray[0]);
        $this->assertCount(2, $game->capturedDieArrayArray[1]);
        $this->assertEquals(12, $game->capturedDieArrayArray[0][0]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[0][0]->value);
        $this->assertEquals(1, $game->capturedDieArrayArray[0][1]->value);
        $this->assertEquals(8, $game->capturedDieArrayArray[1][0]->max);
        $this->assertEquals(1, $game->capturedDieArrayArray[1][0]->value);
        $this->assertEquals(6, $game->capturedDieArrayArray[1][1]->max);
        $this->assertEquals(3, $game->capturedDieArrayArray[1][1]->value);

        $doesMoodRerollMax = $doesMoodRerollMax ||
            ($preAttackMoodMax != $postAttackMoodMax);

        $this->assertTrue($doesMoodRerollMax);
    }

    public function test_Giant_last() {
        // load buttons
        $button1 = new BMButton;
        $button1->load('g(10) g(12) g(20) g(X)', 'Golo');
        $this->assertEquals('Golo', $button1->name);
        $this->assertEquals('g(10) g(12) g(20) g(X)', $button1->recipe);

        $button2 = new BMButton;
        $button2->load('(20) (20) (20) (20) (20) (20)', 'Giant');
        $this->assertEquals('Giant', $button2->name);
        $this->assertEquals('(20) (20) (20) (20) (20) (20)', $button2->recipe);

        // load game
        $game = new BMGame(424242, array(123, 456), array('', ''), 2);
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);
        $this->assertEquals(2, $game->maxWins);
        $game->proceed_to_next_user_action();
        $this->assertEquals(BMGameState::START_GAME, $game->gameState);

        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $this->assertEquals(array(array(), array()), $game->capturedDieArrayArray);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::SPECIFY_DICE, $game->gameState);
        $this->assertEquals(array(array('X' => NULL), array()),
                            $game->swingValueArrayArray);

        // specify swing dice correctly
        $game->swingValueArrayArray = array(array('X' => 4), array());
        $game->proceed_to_next_user_action();

        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);
    }

    /**
     * @coversNothing
     */
    public function test_option_value_visibility_during_reserve_setting() {
        // beginning of game
        $button1 = new BMButton;
        $button1->load('(1) (1) (1) (1/20) r(8)');

        $button2 = new BMButton;
        $button2->load('(10/20) (4/6)');

        $game = new BMGame(424242, array(123, 456));
        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();
        $game->optValueArrayArray = array(array(3 => 20), array(0 => 20, 1 => 4));
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        $game->attack = array(0, 1, array(), array(), 'Surrender');

        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::CHOOSE_RESERVE_DICE, $game->gameState);
        $jsonData = $game->getJsonData(123);
        $this->assertEquals(1, $jsonData['playerDataArray'][0]['activeDieArray'][0]['sides']);
        $this->assertEquals(1, $jsonData['playerDataArray'][0]['activeDieArray'][1]['sides']);
        $this->assertEquals(1, $jsonData['playerDataArray'][0]['activeDieArray'][2]['sides']);
        $this->assertNULL($jsonData['playerDataArray'][0]['activeDieArray'][3]['sides']);
        $this->assertEquals(8, $jsonData['playerDataArray'][0]['activeDieArray'][4]['sides']);
        $this->assertEquals(20, $jsonData['playerDataArray'][1]['activeDieArray'][0]['sides']);
        $this->assertEquals(4, $jsonData['playerDataArray'][1]['activeDieArray'][1]['sides']);
    }

    /**
     * @coversNothing
     */
    public function test_can_still_win_case_of_clear_win() {
        // beginning of game
        $button1 = new BMButton;
        $button1->load('(1) (1) (1)');

        $button2 = new BMButton;
        $button2->load('(1) (20)');

        $game = new BMGame(424242, array(123, 456));
        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        $jsonData = $game->getJsonData(0);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][1]['canStillWin']);

        // manually set value of (20)
        $activeDieArrayArray = $game->activeDieArrayArray;
        $activeDieArrayArray[1][1]->value = 1;

        $game->attack = array(0, 1, array(1), array(1), 'Power');

        $game->proceed_to_next_user_action();

        $jsonData = $game->getJsonData(0);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(FALSE, $jsonData['playerDataArray'][1]['canStillWin']);
    }

    /**
     * @coversNothing
     */
    public function test_can_still_win_case_of_close_contest() {
        // beginning of game
        $button1 = new BMButton;
        $button1->load('(1) (1)');

        $button2 = new BMButton;
        $button2->load('(1) (1,1)');

        $game = new BMGame(424242, array(123, 456));
        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        // active: (1) (1) vs (1) (1,1), captured: none vs none
        $jsonData = $game->getJsonData(0);
        $this->assertEquals(1, $jsonData['playerDataArray'][0]['roundScore']);
        $this->assertEquals(1.5, $jsonData['playerDataArray'][1]['roundScore']);
        $this->assertEquals(-0.3, $jsonData['playerDataArray'][0]['sideScore']);
        $this->assertEquals(0.3, $jsonData['playerDataArray'][1]['sideScore']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][1]['canStillWin']);

        $game->attack = array(0, 1, array(0, 1), array(1), 'Skill');
        $game->proceed_to_next_user_action();

        // active: (1) (1) vs (1), captured: (1,1) vs none
        $jsonData = $game->getJsonData(0);
        $this->assertEquals(3, $jsonData['playerDataArray'][0]['roundScore']);
        $this->assertEquals(0.5, $jsonData['playerDataArray'][1]['roundScore']);
        $this->assertEquals(1.7, $jsonData['playerDataArray'][0]['sideScore']);
        $this->assertEquals(-1.7, $jsonData['playerDataArray'][1]['sideScore']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][1]['canStillWin']);

        $game->attack = array(1, 0, array(0), array(0), 'Power');
        $game->proceed_to_next_user_action();

        // active: (1) vs (1), captured (1,1) vs (1)
        $jsonData = $game->getJsonData(0);
        $this->assertEquals(2.5, $jsonData['playerDataArray'][0]['roundScore']);
        $this->assertEquals(1.5, $jsonData['playerDataArray'][1]['roundScore']);
        $this->assertEquals(0.7, $jsonData['playerDataArray'][0]['sideScore']);
        $this->assertEquals(-0.7, $jsonData['playerDataArray'][1]['sideScore']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][1]['canStillWin']);
    }

    /**
     * @coversNothing
     */
    public function test_can_still_win_case_of_draw() {
        // beginning of game
        $button1 = new BMButton;
        $button1->load('(1) (1)');

        $button2 = new BMButton;
        $button2->load('(2)');

        $game = new BMGame(424242, array(123, 456));
        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        // manually add captured dice to reduce side score of player 1 to -2
        $die = new BMDie;
        $die->init(3);
        $die->captured = TRUE;
        $capturedDieArrayArray = $game->capturedDieArrayArray;
        $capturedDieArrayArray[1][] = $die;
        $game->capturedDieArrayArray = $capturedDieArrayArray;
        $this->assertCount(1, $game->capturedDieArrayArray[1]);

        $jsonData = $game->getJsonData(0);
        $this->assertEquals(1, $jsonData['playerDataArray'][0]['roundScore']);
        $this->assertEquals(4, $jsonData['playerDataArray'][1]['roundScore']);
        $this->assertEquals(-2, $jsonData['playerDataArray'][0]['sideScore']);
        $this->assertEquals(2, $jsonData['playerDataArray'][1]['sideScore']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][1]['canStillWin']);
    }

    /**
     * @coversNothing
     */
    public function test_can_still_win_nulled_because_of_skills() {
        // beginning of game
        $button1 = new BMButton;
        $button1->load('(1) (1) (1)');

        $button2 = new BMButton;
        $button2->load('(1) p(1)');

        $game = new BMGame(424242, array(123, 456));
        $game->buttonArray = array($button1, $button2);
        $game->waitingOnActionArray = array(FALSE, FALSE);
        $game->proceed_to_next_user_action();

        $this->assertEquals(BMGameState::START_TURN, $game->gameState);
        $this->assertEquals(array(TRUE, FALSE), $game->waitingOnActionArray);
        $this->assertEquals(0, $game->playerWithInitiativeIdx);

        $jsonData = $game->getJsonData(0);
        $this->assertEquals(1.5, $jsonData['playerDataArray'][0]['roundScore']);
        $this->assertEquals(-0.5, $jsonData['playerDataArray'][1]['roundScore']);
        $this->assertEquals(1.3, $jsonData['playerDataArray'][0]['sideScore']);
        $this->assertEquals(-1.3, $jsonData['playerDataArray'][1]['sideScore']);
        $this->assertEquals(NULL, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(NULL, $jsonData['playerDataArray'][1]['canStillWin']);

        $game->attack = array(0, 1, array(1), array(1), 'Power');
        $game->proceed_to_next_user_action();

        $jsonData = $game->getJsonData(0);
        $this->assertEquals(1.0, $jsonData['playerDataArray'][0]['roundScore']);
        $this->assertEquals(0.5, $jsonData['playerDataArray'][1]['roundScore']);
        $this->assertEquals(0.3, $jsonData['playerDataArray'][0]['sideScore']);
        $this->assertEquals(-0.3, $jsonData['playerDataArray'][1]['sideScore']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][0]['canStillWin']);
        $this->assertEquals(TRUE, $jsonData['playerDataArray'][1]['canStillWin']);
    }
}

