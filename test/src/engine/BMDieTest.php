<?php

require_once "engine/BMDie.php";


// well defined skill classes with which to test
class BMSkillTesting extends BMSkill {
    public static $hooked_methods = array("test");

    public static function test($args) {
        $args[0] .= "testing";
    }
}

class BMSkillTesting2 extends BMSkill {
    public static $hooked_methods = array("test");

    public static function test($args) {
        $args[0] .= "still testing";
    }
}

class BMDieTesting extends BMDie {
    public $testvar = "";

    public function test() {
        $this->testvar = "";

        $this->run_hooks(__FUNCTION__, array(&$this->testvar));
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-01 at 14:50:59.
 */
class BMDieTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BMDie
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BMDie;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testAdd_skill() {
        // Check that the skill list is indeed empty
        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");

        $this->assertEmpty($sl, "Skill list not initially empty.");
        $this->assertFalse(array_key_exists("test", $hl), "Hook list not initially empty.");

        $this->object->add_skill("Testing");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 1, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertEquals($sl["Testing"], "BMSkillTesting", "Incorrect stored classname for 'Testing'");

        // Proper maintenance of the hook lists
        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");
        $this->assertArrayHasKey("test", $hl, "Hook list missing test hooks.");

        $this->assertContains("BMSkillTesting", $hl["test"], "Hook list missing 'Testing' hook.");

        $this->assertEquals(1, count($hl), "Hook list contains something extra.");
        $this->assertEquals(1, count($hl["test"]), "Hook list for function 'test' contains something extra.");



        // Another skill

        $this->object->add_skill("Testing2");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");
        $this->assertEquals($sl["Testing2"], "BMSkillTesting2", "Incorrect stored classname for 'Testing2'");
        

        // Redundancy

        $this->object->add_skill("Testing");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");

        // Proper maintenance of the hook lists
        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");
        $this->assertArrayHasKey("test", $hl, "Hook list missing test hooks.");

        $this->assertContains("BMSkillTesting", $hl["test"], "Hook list missing 'Testing' hook.");
        $this->assertContains("BMSkillTesting2", $hl["test"], "Hook list missing 'Testing2' hook.");

        $this->assertEquals(1, count($hl), "Hook list contains something extra.");
        $this->assertEquals(2, count($hl["test"]), "Hook list for function 'test' contains something extra.");



    }

    /**
     * @depends testAdd_skill
     */
    public function testHas_skill() {
        $this->object->add_skill("Testing");
        $this->object->add_skill("Testing2");
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
        $this->assertFalse($this->object->has_skill("Testing3"));
    }

    /**
     * @depends testAdd_skill
     * @depends testHas_skill
     */
    public function testRemove_skill() {

        // simple
        $this->object->add_skill("Testing");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));

        // multiple skills
        $this->object->add_skill("Testing");
        $this->object->add_skill("Testing2");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));

        // fail to remove non-existent skills
        $this->object->add_skill("Testing");
        $this->assertFalse($this->object->remove_skill("Testing3"));
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
        
        // examine the hook list for proper editing
        $this->assertTrue($this->object->remove_skill("Testing2"));
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing2"));

        $hl = PHPUnit_Framework_Assert::readAttribute($this->object, "hookList");
        $this->assertArrayHasKey("test", $hl, "Hook list missing test hooks.");

        $this->assertContains("BMSkillTesting", $hl["test"], "Hook list missing 'Testing' hook.");
        $this->assertNotContains("BMSkillTesting2", $hl["test"], "Hook list _not_ missing 'Testing2' hook.");

        $this->assertEquals(1, count($hl), "Hook list contains something extra.");
        $this->assertEquals(1, count($hl["test"]), "Hook list for function 'test' contains something extra.");
    }

    /**
     * @depends testAdd_skill
     * @depends testHas_skill
     * @depends testRemove_skill
     */
    public function testRun_hooks() {
        $die = new BMDieTesting;

        $die->add_skill("Testing");

        $die->test();

        $this->assertEquals("testing", $die->testvar);

        $die->remove_skill("Testing");
        $die->add_skill("Testing2");

        $die->test();
        $this->assertEquals("still testing", $die->testvar);

        $die->add_skill("Testing");

        $die->test();
        // order in which hooks run is not guaranteed
        $this->assertRegExp('/testingstill testing|still testingtesting/', $die->testvar);
    }


    /**
     * @depends testAdd_skill
     * @depends testHas_skill
     * @depends testRemove_skill
     */
    public function testInit() {
        $this->object->init(6, array("Testing"));

        $this->assertEquals($this->object->min, 1);
        $this->assertEquals($this->object->max, 6);

        // scoreValue is protected, and its test requires init to function
        $sv = PHPUnit_Framework_Assert::readAttribute($this->object, "scoreValue");
        $this->assertEquals($sv, 6);

        $this->assertTrue($this->object->has_skill("Testing"));

        $this->object->init(14, array("Testing2"));

        $this->assertEquals($this->object->min, 1);
        $this->assertEquals($this->object->max, 14);


        $sv = PHPUnit_Framework_Assert::readAttribute($this->object, "scoreValue");
        $this->assertEquals($sv, 14);

        $this->assertTrue($this->object->has_skill("Testing2"));

        // init does not remove old skills, or otherwise reset variables
        // at the moment. It's for working on brand-new dice
        $this->assertTrue($this->object->has_skill("Testing"));
    }

    /**
     * @depends testInit
     * @expectedException UnexpectedValueException
     */
    public function testCreate() {
        $die = BMDie::create(6, array());

        $this->assertInstanceOf('BMDie', $die);
        $this->assertEquals(6, $die->max);

        $die = BMDie::create(-15, array());

        $this->assertEquals(6, $die->max);
        
    }

    /**
     * @depends testCreate
     */
    public function testCreate_from_string() {
        // We only test creation of standard die types here.
        // (and errors)
        //
        // The complex types can work this function out in their own
        // test suites

        $die = BMDie::create_from_string("72", array());
        $this->assertInstanceOf('BMDie', $die);
        $this->assertEquals(72, $die->max);

        $die = BMDie::create_from_string("himom!", array());
        $this->assertNull($die);

        $die = BMDie::create_from_string("75.3", array());
        $this->assertNull($die);

        $die = BMDie::create_from_string("trombones76", array());
        $this->assertNull($die);

        $die = BMDie::create_from_string("76trombones", array());
        $this->assertNull($die);

    }

    public function testActivate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testFirst_roll() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testRoll() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testAttack_list() {
        $this->assertNotEmpty($this->object->attack_list());
        $this->assertContains("Skill", $this->object->attack_list());
        $this->assertContains("Power", $this->object->attack_list());
        $this->assertNotEmpty($this->object->attack_list());
        $this->assertEquals(2, count($this->object->attack_list()));
    }

    /**
     * @depends testInit
     * @depends testAttack_list
     */
    public function testAttack_values() {
        $this->object->value = 7;

        foreach ($this->object->attack_list() as $att) {
            $this->assertNotEmpty($this->object->attack_values($att));
            $this->assertContains(7, $this->object->attack_values($att));
            $this->assertEquals(1, count($this->object->attack_values($att)));
        }

        $this->assertNotEmpty($this->object->attack_values("Bob"));
        $this->assertContains(7, $this->object->attack_values("Bob"));
        $this->assertEquals(1, count($this->object->attack_values("Bob")));

        $this->object->value = 4;
        foreach ($this->object->attack_list() as $att) {
            $this->assertNotEmpty($this->object->attack_values($att));
            $this->assertContains(4, $this->object->attack_values($att));
            $this->assertEquals(1, count($this->object->attack_values($att)));
        }


    }

    public function testDefense_value() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @depends testInit
     */
    public function testGet_scoreValue() {
        $this->object->init(7, array());

        $this->assertEquals(35, $this->object->get_scoreValue());

        $this->object->captured = TRUE;

        $this->assertEquals(70, $this->object->get_scoreValue());

    }

    public function testInitiative_value() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testValid_attack() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testValid_target() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testCapture() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testBe_captured() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testDescribe() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testSplit() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testStart_turn() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testEnd_turn() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testStart_round() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }


    public function testEnd_round() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }


    public function test__get() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function test__set() {
        // test valid sets
        $this->object->mSides = 1;
        $this->assertEquals(1, $this->object->mSides);

        $this->object->mSides = 100;
        $this->assertEquals(100, $this->object->mSides);

        // test invalid sets
        try {
            $this->object->mSides = 0;
            $this->fail('Number of sides must be positive.');
        }
        catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->mSides = -1;
            $this->fail('Number of sides must be positive.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
