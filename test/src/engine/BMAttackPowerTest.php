<?php

require_once "TestDummyGame.php";
require_once "TestDummyBMSkillAVTesting.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-21 at 15:12:02.
 */
class BMAttackPowerTest extends PHPUnit_Framework_TestCase {
    /**
     * @var BMAttackPower
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BMAttackPower;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers BMAttackPower::validate_attack
     */
    public function testValidate_attack() {
        $game = new TestDummyGame;

        $die1 = new BMDie;
        $die1->init(6);
        $die1->value = 6;

        $die2 = new BMDie;
        $die2->init(6);
        $die2->value = 1;

        // Basic error handling
        $this->assertFalse($this->object->validate_attack($game, array(), array()));
        $this->assertFalse($this->object->validate_attack($game, array($die1), array()));
        $this->assertFalse($this->object->validate_attack($game, array(), array($die1)));

        // Basic attacks

        // 6 > 1
        $this->assertTrue($this->object->validate_attack($game, array($die1), array($die2)));


        // 1 ! > 6
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1)));

        // 6 == 6
        $this->assertTrue($this->object->validate_attack($game, array($die1), array($die1)));

        // 1 == 1
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die2)));


        // Attacks with helpers
        $die3 = new BMDie;
        $die3->init(6, array("TestDummyBMSkillAVTesting" => "AVTesting", ));
        $die3->value = 6;

        $die4 = new BMDie;
        $die4->init(6);
        $die4->value = 2;

        $game->attackerAllDieArray[] = $die3;

        // 1 + 1 ! >= 6
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1)));

        // 1 + 1 == 2
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die4)));

        // 6 > 1
        $this->assertTrue($this->object->validate_attack($game, array($die1), array($die2)));

        // 1 == 1
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die2)));

        // With a few more of those, 1 can take a 6.
        $game->attackerAllDieArray[] = $die3;
        $game->attackerAllDieArray[] = $die3;
        $game->attackerAllDieArray[] = $die3;
        $game->attackerAllDieArray[] = $die3;

        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die1)));

    }

    /**
     * @covers BMAttackPower::validate_attack()
     * @depends testValidate_attack
     */
    public function testInterfaceValidate_attack() {
        $game = new BMGame;

        $die1 = new BMDie;
        $die1->init(6);
        $die1->value = 6;

        $die2 = new BMDie;
        $die2->init(6);
        $die2->value = 1;

        // Basic error handling
        $this->assertFalse($this->object->validate_attack($game, array(), array()));
        $this->assertFalse($this->object->validate_attack($game, array($die1), array()));
        $this->assertFalse($this->object->validate_attack($game, array(), array($die1)));

        // Basic attacks

        // 6 > 1
        $this->assertTrue($this->object->validate_attack($game, array($die1), array($die2)));


        // 1 ! > 6
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1)));

        // 6 == 6
        $this->assertTrue($this->object->validate_attack($game, array($die1), array($die1)));

        // 1 == 1
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die2)));


        // Attacks with helpers
        $die3 = new BMDie;
        $die3->init(6, array("TestDummyBMSkillAVTesting" => "AVTesting"));
        $die3->value = 6;

        $die4 = new BMDie;
        $die4->init(6);
        $die4->value = 2;

        $game->activeDieArrayArray = array(array($die3), array());
        $game->attack = array(0, 1, array(), array(), 'Power');

        // 1 + 1 ! >= 6
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1)));

        // 1 + 1 == 2
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die4)));

        // 6 > 1
        $this->assertTrue($this->object->validate_attack($game, array($die1), array($die2)));

        // 1 == 1
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die2)));

        // With a few more of those, 1 can take a 6.
        $die5 = clone $die3;
        $die6 = clone $die3;
        $die7 = clone $die3;
        $die8 = clone $die3;

        $game->activeDieArrayArray = array(array($die3, $die5, $die6, $die7, $die8), array());

        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die1)));

        // test case where the amount of help is explicitly specified
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1), array('helpValue' => 1)));
        $this->assertTrue($this->object->validate_attack($game, array($die2), array($die1), array('helpValue' => 5)));
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1), array('helpValue' => 6)));
    }

    /**
     * @covers BMAttackPower::validate_attack()
     * @depends testValidate_attack
     */
    public function testInterfaceValidate_attack_shadow() {
        $game = new BMGame;

        $att = new BMDie;
        $att->init(6);
        $att->add_skill('Shadow');
        $att->value = 6;

        $def = new BMDie;
        $def->init(6);
        $def->value = 5;

        $this->assertFalse($this->object->validate_attack($game, array($att), array($def)));
    }

    /**
     * @covers BMAttackPower::validate_attack()
     * @depends testValidate_attack
     */
    public function testInterfaceValidate_attack_konstant() {
        $game = new BMGame;

        $att = new BMDie;
        $att->init(6);
        $att->add_skill('Konstant');
        $att->value = 6;

        $def = new BMDie;
        $def->init(6);
        $def->value = 5;

        $this->assertFalse($this->object->validate_attack($game, array($att), array($def)));
    }

    /**
     * @covers BMAttackPower::validate_attack()
     * @depends testValidate_attack
     */
    public function testInterfaceValidate_attack_stealth() {
        $game = new BMGame;

        $die1 = new BMDie;
        $die1->init(6);
        $die1->add_skill('Stealth');
        $die1->value = 6;

        $die2 = new BMDie;
        $die2->init(6);
        $die2->value = 6;

        $this->assertFalse($this->object->validate_attack($game, array($die1), array($die2)));
        $this->assertFalse($this->object->validate_attack($game, array($die2), array($die1)));
    }

    /**
     * @covers BMAttackPower::validate_attack()
     * @depends testValidate_attack
     */
    public function testInterfaceValidate_attack_fire() {
        $game = new BMGame;

        $att = new BMDie;
        $att->init(6);
        $att->add_skill('Fire');
        $att->value = 6;

        $def = new BMDie;
        $def->init(6);
        $def->value = 5;

        $this->assertFalse($this->object->validate_attack($game, array($att), array($def)));
    }

    /**
     * @covers BMAttackPower::validate_attack()
     * @depends testValidate_attack
     */
    public function testInterfaceValidate_attack_queer() {
        $game = new BMGame;

        $att = new BMDie;
        $att->init(6);
        $att->add_skill('Queer');
        $att->value = 6;

        $def = new BMDie;
        $def->init(6);
        $def->value = 5;

        $this->assertTrue($this->object->validate_attack($game, array($att), array($def)));

        $att->value = 5;
        $this->assertFalse($this->object->validate_attack($game, array($att), array($def)));
    }

    /**
     * @covers BMAttackPower::find_attack
     * @depends testValidate_attack
     * @todo   Implement testFind_attack().
     */
    public function testFind_attack() {
        $game = new TestDummyGame;

        // we find nothing when there are no attackers
        $this->assertFalse($this->object->find_attack($game));

        // Load some dice into the attack:
        // attackers: (7):6, (6):1
        $die1 = new BMDie;
        $die1->init(7);
        $die1->value = 6;

        $this->object->add_die($die1);

        $die2 = new BMDie;
        $die2->init(6);
        $die2->value = 1;

        $this->object->add_die($die2);

        // we find nothing when there are no defenders
        $this->assertFalse($this->object->find_attack($game));

        $die3 = new BMDie;
        $die3->init(6);
        $die3->value = 6;

        $die4 = new BMDie;
        $die4->init(20);
        $die4->value = 7;

        // defenders: (6):6
        $game->defenderAllDieArray = array($die3);

        $this->assertTrue($this->object->find_attack($game));

        // defenders: (20):7
        $game->defenderAllDieArray = array($die4);

        $this->assertFalse($this->object->find_attack($game));

        // defenders: (20):7, (6):6
        $game->defenderAllDieArray = array($die4, $die3);

        $this->assertTrue($this->object->find_attack($game));
    }

    public function testFind_attack_with_help() {
        $game = new TestDummyGame;

        // Load die into the attack:
        // attackers: (7):6
        $die1 = new BMDie;
        $die1->init(7);
        $die1->value = 6;

        $this->object->add_die($die1);

        $die2 = new BMDie;
        $die2->init(20);
        $die2->value = 7;

        // with an assist
        $game->defenderAllDieArray = array($die2);

        // Attacks with helpers
        // attackers: (7):6
        // helpers  : (6):1
        // defenders: (20):7

        $die3 = new BMDie;
        $die3->init(6, array("TestDummyBMSkillAVTesting" => "AVTesting"));
        $die3->value = 1;
        $game->attackerAllDieArray[] = $die3;

        $this->assertTrue($this->object->find_attack($game));
    }

    public function testFind_attack_impossible_even_with_help() {
        $game = new TestDummyGame;

        // Load die into the attack:
        // attackers: (7):6
        $die1 = new BMDie;
        $die1->init(7);
        $die1->value = 6;

        $this->object->add_die($die1);

        $die2 = new BMDie;
        $die2->init(20);
        $die2->value = 8;

        // with an assist
        $game->defenderAllDieArray = array($die2);

        // Attacks with helpers
        // attackers: (7):6
        // helpers  : (6):6
        // defenders: (20):8

        $die3 = new BMDie;
        $die3->init(6, array("TestDummyBMSkillAVTesting" => "AVTesting"));
        $die3->value = 6;
        $game->attackerAllDieArray[] = $die3;

        // the attack must fail because help cannot boost a die past its maximum
        $this->assertFalse($this->object->find_attack($game));
    }

    /**
     * @coversNothing
     * @depends testValidate_attack
     */
    public function testInterfaceFind_attack() {
        $game = new BMGame;

        // we find nothing when there are no attackers
        $this->assertFalse($this->object->find_attack($game));

        // Load some dice into the attack.
        $die1 = new BMDie;
        $die1->init(7);
        $die1->value = 6;

        $this->object->add_die($die1);

        $die2 = new BMDie;
        $die2->init(6);
        $die2->value = 1;

        $this->object->add_die($die2);

        // we find nothing when there are no defenders
        $this->assertFalse($this->object->find_attack($game));


        $die3 = new BMDie;
        $die3->init(6);
        $die3->value = 6;

        $die4 = new BMDie;
        $die4->init(20);
        $die4->value = 7;


        $game->activeDieArrayArray = array(array(), array($die3));
        $game->attack = array(0, 1, array(), array(), 'Power');

        $this->assertTrue($this->object->find_attack($game));

        $game->activeDieArrayArray = array(array(), array($die4));

        $this->assertFalse($this->object->find_attack($game));

        // with both
        $game->activeDieArrayArray = array(array(), array($die4, $die3));

        $this->assertTrue($this->object->find_attack($game));

        // with an assist

        // Attacks with helpers
        $die5 = new BMDie;
        $die5->init(7, array("TestDummyBMSkillAVTesting" => "AVTesting"));
        $die5->value = 1;

        $game->activeDieArrayArray = array(array($die5), array($die4));

        $this->assertTrue($this->object->find_attack($game));
    }
}
